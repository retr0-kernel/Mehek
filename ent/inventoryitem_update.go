// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"project/ent/ingredient"
	"project/ent/inventoryitem"
	"project/ent/kitchen"
	"project/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// InventoryItemUpdate is the builder for updating InventoryItem entities.
type InventoryItemUpdate struct {
	config
	hooks    []Hook
	mutation *InventoryItemMutation
}

// Where appends a list predicates to the InventoryItemUpdate builder.
func (iiu *InventoryItemUpdate) Where(ps ...predicate.InventoryItem) *InventoryItemUpdate {
	iiu.mutation.Where(ps...)
	return iiu
}

// SetQuantity sets the "quantity" field.
func (iiu *InventoryItemUpdate) SetQuantity(f float64) *InventoryItemUpdate {
	iiu.mutation.ResetQuantity()
	iiu.mutation.SetQuantity(f)
	return iiu
}

// SetNillableQuantity sets the "quantity" field if the given value is not nil.
func (iiu *InventoryItemUpdate) SetNillableQuantity(f *float64) *InventoryItemUpdate {
	if f != nil {
		iiu.SetQuantity(*f)
	}
	return iiu
}

// AddQuantity adds f to the "quantity" field.
func (iiu *InventoryItemUpdate) AddQuantity(f float64) *InventoryItemUpdate {
	iiu.mutation.AddQuantity(f)
	return iiu
}

// SetExpirationDate sets the "expiration_date" field.
func (iiu *InventoryItemUpdate) SetExpirationDate(t time.Time) *InventoryItemUpdate {
	iiu.mutation.SetExpirationDate(t)
	return iiu
}

// SetNillableExpirationDate sets the "expiration_date" field if the given value is not nil.
func (iiu *InventoryItemUpdate) SetNillableExpirationDate(t *time.Time) *InventoryItemUpdate {
	if t != nil {
		iiu.SetExpirationDate(*t)
	}
	return iiu
}

// ClearExpirationDate clears the value of the "expiration_date" field.
func (iiu *InventoryItemUpdate) ClearExpirationDate() *InventoryItemUpdate {
	iiu.mutation.ClearExpirationDate()
	return iiu
}

// SetKitchenID sets the "kitchen" edge to the Kitchen entity by ID.
func (iiu *InventoryItemUpdate) SetKitchenID(id int) *InventoryItemUpdate {
	iiu.mutation.SetKitchenID(id)
	return iiu
}

// SetKitchen sets the "kitchen" edge to the Kitchen entity.
func (iiu *InventoryItemUpdate) SetKitchen(k *Kitchen) *InventoryItemUpdate {
	return iiu.SetKitchenID(k.ID)
}

// SetIngredientID sets the "ingredient" edge to the Ingredient entity by ID.
func (iiu *InventoryItemUpdate) SetIngredientID(id int) *InventoryItemUpdate {
	iiu.mutation.SetIngredientID(id)
	return iiu
}

// SetIngredient sets the "ingredient" edge to the Ingredient entity.
func (iiu *InventoryItemUpdate) SetIngredient(i *Ingredient) *InventoryItemUpdate {
	return iiu.SetIngredientID(i.ID)
}

// Mutation returns the InventoryItemMutation object of the builder.
func (iiu *InventoryItemUpdate) Mutation() *InventoryItemMutation {
	return iiu.mutation
}

// ClearKitchen clears the "kitchen" edge to the Kitchen entity.
func (iiu *InventoryItemUpdate) ClearKitchen() *InventoryItemUpdate {
	iiu.mutation.ClearKitchen()
	return iiu
}

// ClearIngredient clears the "ingredient" edge to the Ingredient entity.
func (iiu *InventoryItemUpdate) ClearIngredient() *InventoryItemUpdate {
	iiu.mutation.ClearIngredient()
	return iiu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iiu *InventoryItemUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, iiu.sqlSave, iiu.mutation, iiu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iiu *InventoryItemUpdate) SaveX(ctx context.Context) int {
	affected, err := iiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iiu *InventoryItemUpdate) Exec(ctx context.Context) error {
	_, err := iiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iiu *InventoryItemUpdate) ExecX(ctx context.Context) {
	if err := iiu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iiu *InventoryItemUpdate) check() error {
	if v, ok := iiu.mutation.Quantity(); ok {
		if err := inventoryitem.QuantityValidator(v); err != nil {
			return &ValidationError{Name: "quantity", err: fmt.Errorf(`ent: validator failed for field "InventoryItem.quantity": %w`, err)}
		}
	}
	if iiu.mutation.KitchenCleared() && len(iiu.mutation.KitchenIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "InventoryItem.kitchen"`)
	}
	if iiu.mutation.IngredientCleared() && len(iiu.mutation.IngredientIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "InventoryItem.ingredient"`)
	}
	return nil
}

func (iiu *InventoryItemUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := iiu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(inventoryitem.Table, inventoryitem.Columns, sqlgraph.NewFieldSpec(inventoryitem.FieldID, field.TypeInt))
	if ps := iiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iiu.mutation.Quantity(); ok {
		_spec.SetField(inventoryitem.FieldQuantity, field.TypeFloat64, value)
	}
	if value, ok := iiu.mutation.AddedQuantity(); ok {
		_spec.AddField(inventoryitem.FieldQuantity, field.TypeFloat64, value)
	}
	if value, ok := iiu.mutation.ExpirationDate(); ok {
		_spec.SetField(inventoryitem.FieldExpirationDate, field.TypeTime, value)
	}
	if iiu.mutation.ExpirationDateCleared() {
		_spec.ClearField(inventoryitem.FieldExpirationDate, field.TypeTime)
	}
	if iiu.mutation.KitchenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   inventoryitem.KitchenTable,
			Columns: []string{inventoryitem.KitchenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(kitchen.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iiu.mutation.KitchenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   inventoryitem.KitchenTable,
			Columns: []string{inventoryitem.KitchenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(kitchen.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iiu.mutation.IngredientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   inventoryitem.IngredientTable,
			Columns: []string{inventoryitem.IngredientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ingredient.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iiu.mutation.IngredientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   inventoryitem.IngredientTable,
			Columns: []string{inventoryitem.IngredientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ingredient.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{inventoryitem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	iiu.mutation.done = true
	return n, nil
}

// InventoryItemUpdateOne is the builder for updating a single InventoryItem entity.
type InventoryItemUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *InventoryItemMutation
}

// SetQuantity sets the "quantity" field.
func (iiuo *InventoryItemUpdateOne) SetQuantity(f float64) *InventoryItemUpdateOne {
	iiuo.mutation.ResetQuantity()
	iiuo.mutation.SetQuantity(f)
	return iiuo
}

// SetNillableQuantity sets the "quantity" field if the given value is not nil.
func (iiuo *InventoryItemUpdateOne) SetNillableQuantity(f *float64) *InventoryItemUpdateOne {
	if f != nil {
		iiuo.SetQuantity(*f)
	}
	return iiuo
}

// AddQuantity adds f to the "quantity" field.
func (iiuo *InventoryItemUpdateOne) AddQuantity(f float64) *InventoryItemUpdateOne {
	iiuo.mutation.AddQuantity(f)
	return iiuo
}

// SetExpirationDate sets the "expiration_date" field.
func (iiuo *InventoryItemUpdateOne) SetExpirationDate(t time.Time) *InventoryItemUpdateOne {
	iiuo.mutation.SetExpirationDate(t)
	return iiuo
}

// SetNillableExpirationDate sets the "expiration_date" field if the given value is not nil.
func (iiuo *InventoryItemUpdateOne) SetNillableExpirationDate(t *time.Time) *InventoryItemUpdateOne {
	if t != nil {
		iiuo.SetExpirationDate(*t)
	}
	return iiuo
}

// ClearExpirationDate clears the value of the "expiration_date" field.
func (iiuo *InventoryItemUpdateOne) ClearExpirationDate() *InventoryItemUpdateOne {
	iiuo.mutation.ClearExpirationDate()
	return iiuo
}

// SetKitchenID sets the "kitchen" edge to the Kitchen entity by ID.
func (iiuo *InventoryItemUpdateOne) SetKitchenID(id int) *InventoryItemUpdateOne {
	iiuo.mutation.SetKitchenID(id)
	return iiuo
}

// SetKitchen sets the "kitchen" edge to the Kitchen entity.
func (iiuo *InventoryItemUpdateOne) SetKitchen(k *Kitchen) *InventoryItemUpdateOne {
	return iiuo.SetKitchenID(k.ID)
}

// SetIngredientID sets the "ingredient" edge to the Ingredient entity by ID.
func (iiuo *InventoryItemUpdateOne) SetIngredientID(id int) *InventoryItemUpdateOne {
	iiuo.mutation.SetIngredientID(id)
	return iiuo
}

// SetIngredient sets the "ingredient" edge to the Ingredient entity.
func (iiuo *InventoryItemUpdateOne) SetIngredient(i *Ingredient) *InventoryItemUpdateOne {
	return iiuo.SetIngredientID(i.ID)
}

// Mutation returns the InventoryItemMutation object of the builder.
func (iiuo *InventoryItemUpdateOne) Mutation() *InventoryItemMutation {
	return iiuo.mutation
}

// ClearKitchen clears the "kitchen" edge to the Kitchen entity.
func (iiuo *InventoryItemUpdateOne) ClearKitchen() *InventoryItemUpdateOne {
	iiuo.mutation.ClearKitchen()
	return iiuo
}

// ClearIngredient clears the "ingredient" edge to the Ingredient entity.
func (iiuo *InventoryItemUpdateOne) ClearIngredient() *InventoryItemUpdateOne {
	iiuo.mutation.ClearIngredient()
	return iiuo
}

// Where appends a list predicates to the InventoryItemUpdate builder.
func (iiuo *InventoryItemUpdateOne) Where(ps ...predicate.InventoryItem) *InventoryItemUpdateOne {
	iiuo.mutation.Where(ps...)
	return iiuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iiuo *InventoryItemUpdateOne) Select(field string, fields ...string) *InventoryItemUpdateOne {
	iiuo.fields = append([]string{field}, fields...)
	return iiuo
}

// Save executes the query and returns the updated InventoryItem entity.
func (iiuo *InventoryItemUpdateOne) Save(ctx context.Context) (*InventoryItem, error) {
	return withHooks(ctx, iiuo.sqlSave, iiuo.mutation, iiuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iiuo *InventoryItemUpdateOne) SaveX(ctx context.Context) *InventoryItem {
	node, err := iiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iiuo *InventoryItemUpdateOne) Exec(ctx context.Context) error {
	_, err := iiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iiuo *InventoryItemUpdateOne) ExecX(ctx context.Context) {
	if err := iiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iiuo *InventoryItemUpdateOne) check() error {
	if v, ok := iiuo.mutation.Quantity(); ok {
		if err := inventoryitem.QuantityValidator(v); err != nil {
			return &ValidationError{Name: "quantity", err: fmt.Errorf(`ent: validator failed for field "InventoryItem.quantity": %w`, err)}
		}
	}
	if iiuo.mutation.KitchenCleared() && len(iiuo.mutation.KitchenIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "InventoryItem.kitchen"`)
	}
	if iiuo.mutation.IngredientCleared() && len(iiuo.mutation.IngredientIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "InventoryItem.ingredient"`)
	}
	return nil
}

func (iiuo *InventoryItemUpdateOne) sqlSave(ctx context.Context) (_node *InventoryItem, err error) {
	if err := iiuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(inventoryitem.Table, inventoryitem.Columns, sqlgraph.NewFieldSpec(inventoryitem.FieldID, field.TypeInt))
	id, ok := iiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "InventoryItem.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iiuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, inventoryitem.FieldID)
		for _, f := range fields {
			if !inventoryitem.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != inventoryitem.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iiuo.mutation.Quantity(); ok {
		_spec.SetField(inventoryitem.FieldQuantity, field.TypeFloat64, value)
	}
	if value, ok := iiuo.mutation.AddedQuantity(); ok {
		_spec.AddField(inventoryitem.FieldQuantity, field.TypeFloat64, value)
	}
	if value, ok := iiuo.mutation.ExpirationDate(); ok {
		_spec.SetField(inventoryitem.FieldExpirationDate, field.TypeTime, value)
	}
	if iiuo.mutation.ExpirationDateCleared() {
		_spec.ClearField(inventoryitem.FieldExpirationDate, field.TypeTime)
	}
	if iiuo.mutation.KitchenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   inventoryitem.KitchenTable,
			Columns: []string{inventoryitem.KitchenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(kitchen.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iiuo.mutation.KitchenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   inventoryitem.KitchenTable,
			Columns: []string{inventoryitem.KitchenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(kitchen.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iiuo.mutation.IngredientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   inventoryitem.IngredientTable,
			Columns: []string{inventoryitem.IngredientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ingredient.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iiuo.mutation.IngredientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   inventoryitem.IngredientTable,
			Columns: []string{inventoryitem.IngredientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ingredient.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &InventoryItem{config: iiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{inventoryitem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	iiuo.mutation.done = true
	return _node, nil
}
