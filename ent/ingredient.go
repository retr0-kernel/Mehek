// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"project/ent/ingredient"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Ingredient is the model entity for the Ingredient schema.
type Ingredient struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Unit holds the value of the "unit" field.
	Unit string `json:"unit,omitempty"`
	// CostPerUnit holds the value of the "cost_per_unit" field.
	CostPerUnit float64 `json:"cost_per_unit,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the IngredientQuery when eager-loading is set.
	Edges        IngredientEdges `json:"edges"`
	selectValues sql.SelectValues
}

// IngredientEdges holds the relations/edges for other nodes in the graph.
type IngredientEdges struct {
	// MenuItems holds the value of the menu_items edge.
	MenuItems []*MenuItem `json:"menu_items,omitempty"`
	// InventoryItems holds the value of the inventory_items edge.
	InventoryItems []*InventoryItem `json:"inventory_items,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// MenuItemsOrErr returns the MenuItems value or an error if the edge
// was not loaded in eager-loading.
func (e IngredientEdges) MenuItemsOrErr() ([]*MenuItem, error) {
	if e.loadedTypes[0] {
		return e.MenuItems, nil
	}
	return nil, &NotLoadedError{edge: "menu_items"}
}

// InventoryItemsOrErr returns the InventoryItems value or an error if the edge
// was not loaded in eager-loading.
func (e IngredientEdges) InventoryItemsOrErr() ([]*InventoryItem, error) {
	if e.loadedTypes[1] {
		return e.InventoryItems, nil
	}
	return nil, &NotLoadedError{edge: "inventory_items"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Ingredient) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case ingredient.FieldCostPerUnit:
			values[i] = new(sql.NullFloat64)
		case ingredient.FieldID:
			values[i] = new(sql.NullInt64)
		case ingredient.FieldName, ingredient.FieldUnit:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Ingredient fields.
func (i *Ingredient) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for j := range columns {
		switch columns[j] {
		case ingredient.FieldID:
			value, ok := values[j].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			i.ID = int(value.Int64)
		case ingredient.FieldName:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[j])
			} else if value.Valid {
				i.Name = value.String
			}
		case ingredient.FieldUnit:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field unit", values[j])
			} else if value.Valid {
				i.Unit = value.String
			}
		case ingredient.FieldCostPerUnit:
			if value, ok := values[j].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field cost_per_unit", values[j])
			} else if value.Valid {
				i.CostPerUnit = value.Float64
			}
		default:
			i.selectValues.Set(columns[j], values[j])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Ingredient.
// This includes values selected through modifiers, order, etc.
func (i *Ingredient) Value(name string) (ent.Value, error) {
	return i.selectValues.Get(name)
}

// QueryMenuItems queries the "menu_items" edge of the Ingredient entity.
func (i *Ingredient) QueryMenuItems() *MenuItemQuery {
	return NewIngredientClient(i.config).QueryMenuItems(i)
}

// QueryInventoryItems queries the "inventory_items" edge of the Ingredient entity.
func (i *Ingredient) QueryInventoryItems() *InventoryItemQuery {
	return NewIngredientClient(i.config).QueryInventoryItems(i)
}

// Update returns a builder for updating this Ingredient.
// Note that you need to call Ingredient.Unwrap() before calling this method if this Ingredient
// was returned from a transaction, and the transaction was committed or rolled back.
func (i *Ingredient) Update() *IngredientUpdateOne {
	return NewIngredientClient(i.config).UpdateOne(i)
}

// Unwrap unwraps the Ingredient entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (i *Ingredient) Unwrap() *Ingredient {
	_tx, ok := i.config.driver.(*txDriver)
	if !ok {
		panic("ent: Ingredient is not a transactional entity")
	}
	i.config.driver = _tx.drv
	return i
}

// String implements the fmt.Stringer.
func (i *Ingredient) String() string {
	var builder strings.Builder
	builder.WriteString("Ingredient(")
	builder.WriteString(fmt.Sprintf("id=%v, ", i.ID))
	builder.WriteString("name=")
	builder.WriteString(i.Name)
	builder.WriteString(", ")
	builder.WriteString("unit=")
	builder.WriteString(i.Unit)
	builder.WriteString(", ")
	builder.WriteString("cost_per_unit=")
	builder.WriteString(fmt.Sprintf("%v", i.CostPerUnit))
	builder.WriteByte(')')
	return builder.String()
}

// Ingredients is a parsable slice of Ingredient.
type Ingredients []*Ingredient
