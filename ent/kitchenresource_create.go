// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"project/ent/kitchen"
	"project/ent/kitchenresource"
	"project/ent/resourceallocation"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// KitchenResourceCreate is the builder for creating a KitchenResource entity.
type KitchenResourceCreate struct {
	config
	mutation *KitchenResourceMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (krc *KitchenResourceCreate) SetName(s string) *KitchenResourceCreate {
	krc.mutation.SetName(s)
	return krc
}

// SetType sets the "type" field.
func (krc *KitchenResourceCreate) SetType(s string) *KitchenResourceCreate {
	krc.mutation.SetType(s)
	return krc
}

// SetCapacity sets the "capacity" field.
func (krc *KitchenResourceCreate) SetCapacity(i int) *KitchenResourceCreate {
	krc.mutation.SetCapacity(i)
	return krc
}

// SetAvailable sets the "available" field.
func (krc *KitchenResourceCreate) SetAvailable(b bool) *KitchenResourceCreate {
	krc.mutation.SetAvailable(b)
	return krc
}

// SetNillableAvailable sets the "available" field if the given value is not nil.
func (krc *KitchenResourceCreate) SetNillableAvailable(b *bool) *KitchenResourceCreate {
	if b != nil {
		krc.SetAvailable(*b)
	}
	return krc
}

// SetKitchenID sets the "kitchen" edge to the Kitchen entity by ID.
func (krc *KitchenResourceCreate) SetKitchenID(id int) *KitchenResourceCreate {
	krc.mutation.SetKitchenID(id)
	return krc
}

// SetKitchen sets the "kitchen" edge to the Kitchen entity.
func (krc *KitchenResourceCreate) SetKitchen(k *Kitchen) *KitchenResourceCreate {
	return krc.SetKitchenID(k.ID)
}

// AddAllocationIDs adds the "allocations" edge to the ResourceAllocation entity by IDs.
func (krc *KitchenResourceCreate) AddAllocationIDs(ids ...int) *KitchenResourceCreate {
	krc.mutation.AddAllocationIDs(ids...)
	return krc
}

// AddAllocations adds the "allocations" edges to the ResourceAllocation entity.
func (krc *KitchenResourceCreate) AddAllocations(r ...*ResourceAllocation) *KitchenResourceCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return krc.AddAllocationIDs(ids...)
}

// Mutation returns the KitchenResourceMutation object of the builder.
func (krc *KitchenResourceCreate) Mutation() *KitchenResourceMutation {
	return krc.mutation
}

// Save creates the KitchenResource in the database.
func (krc *KitchenResourceCreate) Save(ctx context.Context) (*KitchenResource, error) {
	krc.defaults()
	return withHooks(ctx, krc.sqlSave, krc.mutation, krc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (krc *KitchenResourceCreate) SaveX(ctx context.Context) *KitchenResource {
	v, err := krc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (krc *KitchenResourceCreate) Exec(ctx context.Context) error {
	_, err := krc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (krc *KitchenResourceCreate) ExecX(ctx context.Context) {
	if err := krc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (krc *KitchenResourceCreate) defaults() {
	if _, ok := krc.mutation.Available(); !ok {
		v := kitchenresource.DefaultAvailable
		krc.mutation.SetAvailable(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (krc *KitchenResourceCreate) check() error {
	if _, ok := krc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "KitchenResource.name"`)}
	}
	if v, ok := krc.mutation.Name(); ok {
		if err := kitchenresource.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "KitchenResource.name": %w`, err)}
		}
	}
	if _, ok := krc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "KitchenResource.type"`)}
	}
	if v, ok := krc.mutation.GetType(); ok {
		if err := kitchenresource.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "KitchenResource.type": %w`, err)}
		}
	}
	if _, ok := krc.mutation.Capacity(); !ok {
		return &ValidationError{Name: "capacity", err: errors.New(`ent: missing required field "KitchenResource.capacity"`)}
	}
	if v, ok := krc.mutation.Capacity(); ok {
		if err := kitchenresource.CapacityValidator(v); err != nil {
			return &ValidationError{Name: "capacity", err: fmt.Errorf(`ent: validator failed for field "KitchenResource.capacity": %w`, err)}
		}
	}
	if _, ok := krc.mutation.Available(); !ok {
		return &ValidationError{Name: "available", err: errors.New(`ent: missing required field "KitchenResource.available"`)}
	}
	if len(krc.mutation.KitchenIDs()) == 0 {
		return &ValidationError{Name: "kitchen", err: errors.New(`ent: missing required edge "KitchenResource.kitchen"`)}
	}
	return nil
}

func (krc *KitchenResourceCreate) sqlSave(ctx context.Context) (*KitchenResource, error) {
	if err := krc.check(); err != nil {
		return nil, err
	}
	_node, _spec := krc.createSpec()
	if err := sqlgraph.CreateNode(ctx, krc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	krc.mutation.id = &_node.ID
	krc.mutation.done = true
	return _node, nil
}

func (krc *KitchenResourceCreate) createSpec() (*KitchenResource, *sqlgraph.CreateSpec) {
	var (
		_node = &KitchenResource{config: krc.config}
		_spec = sqlgraph.NewCreateSpec(kitchenresource.Table, sqlgraph.NewFieldSpec(kitchenresource.FieldID, field.TypeInt))
	)
	if value, ok := krc.mutation.Name(); ok {
		_spec.SetField(kitchenresource.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := krc.mutation.GetType(); ok {
		_spec.SetField(kitchenresource.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := krc.mutation.Capacity(); ok {
		_spec.SetField(kitchenresource.FieldCapacity, field.TypeInt, value)
		_node.Capacity = value
	}
	if value, ok := krc.mutation.Available(); ok {
		_spec.SetField(kitchenresource.FieldAvailable, field.TypeBool, value)
		_node.Available = value
	}
	if nodes := krc.mutation.KitchenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   kitchenresource.KitchenTable,
			Columns: []string{kitchenresource.KitchenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(kitchen.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.kitchen_resources = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := krc.mutation.AllocationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kitchenresource.AllocationsTable,
			Columns: []string{kitchenresource.AllocationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resourceallocation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// KitchenResourceCreateBulk is the builder for creating many KitchenResource entities in bulk.
type KitchenResourceCreateBulk struct {
	config
	err      error
	builders []*KitchenResourceCreate
}

// Save creates the KitchenResource entities in the database.
func (krcb *KitchenResourceCreateBulk) Save(ctx context.Context) ([]*KitchenResource, error) {
	if krcb.err != nil {
		return nil, krcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(krcb.builders))
	nodes := make([]*KitchenResource, len(krcb.builders))
	mutators := make([]Mutator, len(krcb.builders))
	for i := range krcb.builders {
		func(i int, root context.Context) {
			builder := krcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*KitchenResourceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, krcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, krcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, krcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (krcb *KitchenResourceCreateBulk) SaveX(ctx context.Context) []*KitchenResource {
	v, err := krcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (krcb *KitchenResourceCreateBulk) Exec(ctx context.Context) error {
	_, err := krcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (krcb *KitchenResourceCreateBulk) ExecX(ctx context.Context) {
	if err := krcb.Exec(ctx); err != nil {
		panic(err)
	}
}
