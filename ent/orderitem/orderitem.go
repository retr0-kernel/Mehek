// Code generated by ent, DO NOT EDIT.

package orderitem

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the orderitem type in the database.
	Label = "order_item"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldQuantity holds the string denoting the quantity field in the database.
	FieldQuantity = "quantity"
	// FieldSpecialInstructions holds the string denoting the special_instructions field in the database.
	FieldSpecialInstructions = "special_instructions"
	// EdgeOrder holds the string denoting the order edge name in mutations.
	EdgeOrder = "order"
	// EdgeMenuItem holds the string denoting the menu_item edge name in mutations.
	EdgeMenuItem = "menu_item"
	// Table holds the table name of the orderitem in the database.
	Table = "order_items"
	// OrderTable is the table that holds the order relation/edge.
	OrderTable = "order_items"
	// OrderInverseTable is the table name for the Order entity.
	// It exists in this package in order to avoid circular dependency with the "order" package.
	OrderInverseTable = "orders"
	// OrderColumn is the table column denoting the order relation/edge.
	OrderColumn = "order_items"
	// MenuItemTable is the table that holds the menu_item relation/edge.
	MenuItemTable = "order_items"
	// MenuItemInverseTable is the table name for the MenuItem entity.
	// It exists in this package in order to avoid circular dependency with the "menuitem" package.
	MenuItemInverseTable = "menu_items"
	// MenuItemColumn is the table column denoting the menu_item relation/edge.
	MenuItemColumn = "order_item_menu_item"
)

// Columns holds all SQL columns for orderitem fields.
var Columns = []string{
	FieldID,
	FieldQuantity,
	FieldSpecialInstructions,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "order_items"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"order_items",
	"order_item_menu_item",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// QuantityValidator is a validator for the "quantity" field. It is called by the builders before save.
	QuantityValidator func(int) error
)

// OrderOption defines the ordering options for the OrderItem queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByQuantity orders the results by the quantity field.
func ByQuantity(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldQuantity, opts...).ToFunc()
}

// BySpecialInstructions orders the results by the special_instructions field.
func BySpecialInstructions(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSpecialInstructions, opts...).ToFunc()
}

// ByOrderField orders the results by order field.
func ByOrderField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOrderStep(), sql.OrderByField(field, opts...))
	}
}

// ByMenuItemField orders the results by menu_item field.
func ByMenuItemField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMenuItemStep(), sql.OrderByField(field, opts...))
	}
}
func newOrderStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OrderInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, OrderTable, OrderColumn),
	)
}
func newMenuItemStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MenuItemInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, MenuItemTable, MenuItemColumn),
	)
}
