// Code generated by ent, DO NOT EDIT.

package inventoryitem

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the inventoryitem type in the database.
	Label = "inventory_item"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldQuantity holds the string denoting the quantity field in the database.
	FieldQuantity = "quantity"
	// FieldExpirationDate holds the string denoting the expiration_date field in the database.
	FieldExpirationDate = "expiration_date"
	// EdgeKitchen holds the string denoting the kitchen edge name in mutations.
	EdgeKitchen = "kitchen"
	// EdgeIngredient holds the string denoting the ingredient edge name in mutations.
	EdgeIngredient = "ingredient"
	// Table holds the table name of the inventoryitem in the database.
	Table = "inventory_items"
	// KitchenTable is the table that holds the kitchen relation/edge.
	KitchenTable = "inventory_items"
	// KitchenInverseTable is the table name for the Kitchen entity.
	// It exists in this package in order to avoid circular dependency with the "kitchen" package.
	KitchenInverseTable = "kitchens"
	// KitchenColumn is the table column denoting the kitchen relation/edge.
	KitchenColumn = "kitchen_inventory"
	// IngredientTable is the table that holds the ingredient relation/edge.
	IngredientTable = "inventory_items"
	// IngredientInverseTable is the table name for the Ingredient entity.
	// It exists in this package in order to avoid circular dependency with the "ingredient" package.
	IngredientInverseTable = "ingredients"
	// IngredientColumn is the table column denoting the ingredient relation/edge.
	IngredientColumn = "inventory_item_ingredient"
)

// Columns holds all SQL columns for inventoryitem fields.
var Columns = []string{
	FieldID,
	FieldQuantity,
	FieldExpirationDate,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "inventory_items"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"inventory_item_ingredient",
	"kitchen_inventory",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// QuantityValidator is a validator for the "quantity" field. It is called by the builders before save.
	QuantityValidator func(float64) error
)

// OrderOption defines the ordering options for the InventoryItem queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByQuantity orders the results by the quantity field.
func ByQuantity(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldQuantity, opts...).ToFunc()
}

// ByExpirationDate orders the results by the expiration_date field.
func ByExpirationDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExpirationDate, opts...).ToFunc()
}

// ByKitchenField orders the results by kitchen field.
func ByKitchenField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newKitchenStep(), sql.OrderByField(field, opts...))
	}
}

// ByIngredientField orders the results by ingredient field.
func ByIngredientField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newIngredientStep(), sql.OrderByField(field, opts...))
	}
}
func newKitchenStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(KitchenInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, KitchenTable, KitchenColumn),
	)
}
func newIngredientStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(IngredientInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, IngredientTable, IngredientColumn),
	)
}
