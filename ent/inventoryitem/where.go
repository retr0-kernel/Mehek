// Code generated by ent, DO NOT EDIT.

package inventoryitem

import (
	"project/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.InventoryItem {
	return predicate.InventoryItem(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.InventoryItem {
	return predicate.InventoryItem(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.InventoryItem {
	return predicate.InventoryItem(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.InventoryItem {
	return predicate.InventoryItem(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.InventoryItem {
	return predicate.InventoryItem(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.InventoryItem {
	return predicate.InventoryItem(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.InventoryItem {
	return predicate.InventoryItem(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.InventoryItem {
	return predicate.InventoryItem(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.InventoryItem {
	return predicate.InventoryItem(sql.FieldLTE(FieldID, id))
}

// Quantity applies equality check predicate on the "quantity" field. It's identical to QuantityEQ.
func Quantity(v float64) predicate.InventoryItem {
	return predicate.InventoryItem(sql.FieldEQ(FieldQuantity, v))
}

// ExpirationDate applies equality check predicate on the "expiration_date" field. It's identical to ExpirationDateEQ.
func ExpirationDate(v time.Time) predicate.InventoryItem {
	return predicate.InventoryItem(sql.FieldEQ(FieldExpirationDate, v))
}

// QuantityEQ applies the EQ predicate on the "quantity" field.
func QuantityEQ(v float64) predicate.InventoryItem {
	return predicate.InventoryItem(sql.FieldEQ(FieldQuantity, v))
}

// QuantityNEQ applies the NEQ predicate on the "quantity" field.
func QuantityNEQ(v float64) predicate.InventoryItem {
	return predicate.InventoryItem(sql.FieldNEQ(FieldQuantity, v))
}

// QuantityIn applies the In predicate on the "quantity" field.
func QuantityIn(vs ...float64) predicate.InventoryItem {
	return predicate.InventoryItem(sql.FieldIn(FieldQuantity, vs...))
}

// QuantityNotIn applies the NotIn predicate on the "quantity" field.
func QuantityNotIn(vs ...float64) predicate.InventoryItem {
	return predicate.InventoryItem(sql.FieldNotIn(FieldQuantity, vs...))
}

// QuantityGT applies the GT predicate on the "quantity" field.
func QuantityGT(v float64) predicate.InventoryItem {
	return predicate.InventoryItem(sql.FieldGT(FieldQuantity, v))
}

// QuantityGTE applies the GTE predicate on the "quantity" field.
func QuantityGTE(v float64) predicate.InventoryItem {
	return predicate.InventoryItem(sql.FieldGTE(FieldQuantity, v))
}

// QuantityLT applies the LT predicate on the "quantity" field.
func QuantityLT(v float64) predicate.InventoryItem {
	return predicate.InventoryItem(sql.FieldLT(FieldQuantity, v))
}

// QuantityLTE applies the LTE predicate on the "quantity" field.
func QuantityLTE(v float64) predicate.InventoryItem {
	return predicate.InventoryItem(sql.FieldLTE(FieldQuantity, v))
}

// ExpirationDateEQ applies the EQ predicate on the "expiration_date" field.
func ExpirationDateEQ(v time.Time) predicate.InventoryItem {
	return predicate.InventoryItem(sql.FieldEQ(FieldExpirationDate, v))
}

// ExpirationDateNEQ applies the NEQ predicate on the "expiration_date" field.
func ExpirationDateNEQ(v time.Time) predicate.InventoryItem {
	return predicate.InventoryItem(sql.FieldNEQ(FieldExpirationDate, v))
}

// ExpirationDateIn applies the In predicate on the "expiration_date" field.
func ExpirationDateIn(vs ...time.Time) predicate.InventoryItem {
	return predicate.InventoryItem(sql.FieldIn(FieldExpirationDate, vs...))
}

// ExpirationDateNotIn applies the NotIn predicate on the "expiration_date" field.
func ExpirationDateNotIn(vs ...time.Time) predicate.InventoryItem {
	return predicate.InventoryItem(sql.FieldNotIn(FieldExpirationDate, vs...))
}

// ExpirationDateGT applies the GT predicate on the "expiration_date" field.
func ExpirationDateGT(v time.Time) predicate.InventoryItem {
	return predicate.InventoryItem(sql.FieldGT(FieldExpirationDate, v))
}

// ExpirationDateGTE applies the GTE predicate on the "expiration_date" field.
func ExpirationDateGTE(v time.Time) predicate.InventoryItem {
	return predicate.InventoryItem(sql.FieldGTE(FieldExpirationDate, v))
}

// ExpirationDateLT applies the LT predicate on the "expiration_date" field.
func ExpirationDateLT(v time.Time) predicate.InventoryItem {
	return predicate.InventoryItem(sql.FieldLT(FieldExpirationDate, v))
}

// ExpirationDateLTE applies the LTE predicate on the "expiration_date" field.
func ExpirationDateLTE(v time.Time) predicate.InventoryItem {
	return predicate.InventoryItem(sql.FieldLTE(FieldExpirationDate, v))
}

// ExpirationDateIsNil applies the IsNil predicate on the "expiration_date" field.
func ExpirationDateIsNil() predicate.InventoryItem {
	return predicate.InventoryItem(sql.FieldIsNull(FieldExpirationDate))
}

// ExpirationDateNotNil applies the NotNil predicate on the "expiration_date" field.
func ExpirationDateNotNil() predicate.InventoryItem {
	return predicate.InventoryItem(sql.FieldNotNull(FieldExpirationDate))
}

// HasKitchen applies the HasEdge predicate on the "kitchen" edge.
func HasKitchen() predicate.InventoryItem {
	return predicate.InventoryItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, KitchenTable, KitchenColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasKitchenWith applies the HasEdge predicate on the "kitchen" edge with a given conditions (other predicates).
func HasKitchenWith(preds ...predicate.Kitchen) predicate.InventoryItem {
	return predicate.InventoryItem(func(s *sql.Selector) {
		step := newKitchenStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasIngredient applies the HasEdge predicate on the "ingredient" edge.
func HasIngredient() predicate.InventoryItem {
	return predicate.InventoryItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, IngredientTable, IngredientColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasIngredientWith applies the HasEdge predicate on the "ingredient" edge with a given conditions (other predicates).
func HasIngredientWith(preds ...predicate.Ingredient) predicate.InventoryItem {
	return predicate.InventoryItem(func(s *sql.Selector) {
		step := newIngredientStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.InventoryItem) predicate.InventoryItem {
	return predicate.InventoryItem(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.InventoryItem) predicate.InventoryItem {
	return predicate.InventoryItem(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.InventoryItem) predicate.InventoryItem {
	return predicate.InventoryItem(sql.NotPredicates(p))
}
