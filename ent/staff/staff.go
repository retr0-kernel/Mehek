// Code generated by ent, DO NOT EDIT.

package staff

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the staff type in the database.
	Label = "staff"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldRole holds the string denoting the role field in the database.
	FieldRole = "role"
	// FieldSkills holds the string denoting the skills field in the database.
	FieldSkills = "skills"
	// FieldAvailability holds the string denoting the availability field in the database.
	FieldAvailability = "availability"
	// EdgeKitchen holds the string denoting the kitchen edge name in mutations.
	EdgeKitchen = "kitchen"
	// EdgeShifts holds the string denoting the shifts edge name in mutations.
	EdgeShifts = "shifts"
	// Table holds the table name of the staff in the database.
	Table = "staffs"
	// KitchenTable is the table that holds the kitchen relation/edge.
	KitchenTable = "staffs"
	// KitchenInverseTable is the table name for the Kitchen entity.
	// It exists in this package in order to avoid circular dependency with the "kitchen" package.
	KitchenInverseTable = "kitchens"
	// KitchenColumn is the table column denoting the kitchen relation/edge.
	KitchenColumn = "kitchen_staff"
	// ShiftsTable is the table that holds the shifts relation/edge.
	ShiftsTable = "shifts"
	// ShiftsInverseTable is the table name for the Shift entity.
	// It exists in this package in order to avoid circular dependency with the "shift" package.
	ShiftsInverseTable = "shifts"
	// ShiftsColumn is the table column denoting the shifts relation/edge.
	ShiftsColumn = "staff_shifts"
)

// Columns holds all SQL columns for staff fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldRole,
	FieldSkills,
	FieldAvailability,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "staffs"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"kitchen_staff",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// RoleValidator is a validator for the "role" field. It is called by the builders before save.
	RoleValidator func(string) error
)

// OrderOption defines the ordering options for the Staff queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByRole orders the results by the role field.
func ByRole(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRole, opts...).ToFunc()
}

// BySkills orders the results by the skills field.
func BySkills(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSkills, opts...).ToFunc()
}

// ByKitchenField orders the results by kitchen field.
func ByKitchenField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newKitchenStep(), sql.OrderByField(field, opts...))
	}
}

// ByShiftsCount orders the results by shifts count.
func ByShiftsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newShiftsStep(), opts...)
	}
}

// ByShifts orders the results by shifts terms.
func ByShifts(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newShiftsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newKitchenStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(KitchenInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, KitchenTable, KitchenColumn),
	)
}
func newShiftsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ShiftsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ShiftsTable, ShiftsColumn),
	)
}
