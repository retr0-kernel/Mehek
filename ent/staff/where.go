// Code generated by ent, DO NOT EDIT.

package staff

import (
	"project/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Staff {
	return predicate.Staff(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Staff {
	return predicate.Staff(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Staff {
	return predicate.Staff(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Staff {
	return predicate.Staff(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Staff {
	return predicate.Staff(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Staff {
	return predicate.Staff(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Staff {
	return predicate.Staff(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Staff {
	return predicate.Staff(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Staff {
	return predicate.Staff(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Staff {
	return predicate.Staff(sql.FieldEQ(FieldName, v))
}

// Role applies equality check predicate on the "role" field. It's identical to RoleEQ.
func Role(v string) predicate.Staff {
	return predicate.Staff(sql.FieldEQ(FieldRole, v))
}

// Skills applies equality check predicate on the "skills" field. It's identical to SkillsEQ.
func Skills(v string) predicate.Staff {
	return predicate.Staff(sql.FieldEQ(FieldSkills, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Staff {
	return predicate.Staff(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Staff {
	return predicate.Staff(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Staff {
	return predicate.Staff(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Staff {
	return predicate.Staff(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Staff {
	return predicate.Staff(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Staff {
	return predicate.Staff(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Staff {
	return predicate.Staff(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Staff {
	return predicate.Staff(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Staff {
	return predicate.Staff(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Staff {
	return predicate.Staff(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Staff {
	return predicate.Staff(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Staff {
	return predicate.Staff(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Staff {
	return predicate.Staff(sql.FieldContainsFold(FieldName, v))
}

// RoleEQ applies the EQ predicate on the "role" field.
func RoleEQ(v string) predicate.Staff {
	return predicate.Staff(sql.FieldEQ(FieldRole, v))
}

// RoleNEQ applies the NEQ predicate on the "role" field.
func RoleNEQ(v string) predicate.Staff {
	return predicate.Staff(sql.FieldNEQ(FieldRole, v))
}

// RoleIn applies the In predicate on the "role" field.
func RoleIn(vs ...string) predicate.Staff {
	return predicate.Staff(sql.FieldIn(FieldRole, vs...))
}

// RoleNotIn applies the NotIn predicate on the "role" field.
func RoleNotIn(vs ...string) predicate.Staff {
	return predicate.Staff(sql.FieldNotIn(FieldRole, vs...))
}

// RoleGT applies the GT predicate on the "role" field.
func RoleGT(v string) predicate.Staff {
	return predicate.Staff(sql.FieldGT(FieldRole, v))
}

// RoleGTE applies the GTE predicate on the "role" field.
func RoleGTE(v string) predicate.Staff {
	return predicate.Staff(sql.FieldGTE(FieldRole, v))
}

// RoleLT applies the LT predicate on the "role" field.
func RoleLT(v string) predicate.Staff {
	return predicate.Staff(sql.FieldLT(FieldRole, v))
}

// RoleLTE applies the LTE predicate on the "role" field.
func RoleLTE(v string) predicate.Staff {
	return predicate.Staff(sql.FieldLTE(FieldRole, v))
}

// RoleContains applies the Contains predicate on the "role" field.
func RoleContains(v string) predicate.Staff {
	return predicate.Staff(sql.FieldContains(FieldRole, v))
}

// RoleHasPrefix applies the HasPrefix predicate on the "role" field.
func RoleHasPrefix(v string) predicate.Staff {
	return predicate.Staff(sql.FieldHasPrefix(FieldRole, v))
}

// RoleHasSuffix applies the HasSuffix predicate on the "role" field.
func RoleHasSuffix(v string) predicate.Staff {
	return predicate.Staff(sql.FieldHasSuffix(FieldRole, v))
}

// RoleEqualFold applies the EqualFold predicate on the "role" field.
func RoleEqualFold(v string) predicate.Staff {
	return predicate.Staff(sql.FieldEqualFold(FieldRole, v))
}

// RoleContainsFold applies the ContainsFold predicate on the "role" field.
func RoleContainsFold(v string) predicate.Staff {
	return predicate.Staff(sql.FieldContainsFold(FieldRole, v))
}

// SkillsEQ applies the EQ predicate on the "skills" field.
func SkillsEQ(v string) predicate.Staff {
	return predicate.Staff(sql.FieldEQ(FieldSkills, v))
}

// SkillsNEQ applies the NEQ predicate on the "skills" field.
func SkillsNEQ(v string) predicate.Staff {
	return predicate.Staff(sql.FieldNEQ(FieldSkills, v))
}

// SkillsIn applies the In predicate on the "skills" field.
func SkillsIn(vs ...string) predicate.Staff {
	return predicate.Staff(sql.FieldIn(FieldSkills, vs...))
}

// SkillsNotIn applies the NotIn predicate on the "skills" field.
func SkillsNotIn(vs ...string) predicate.Staff {
	return predicate.Staff(sql.FieldNotIn(FieldSkills, vs...))
}

// SkillsGT applies the GT predicate on the "skills" field.
func SkillsGT(v string) predicate.Staff {
	return predicate.Staff(sql.FieldGT(FieldSkills, v))
}

// SkillsGTE applies the GTE predicate on the "skills" field.
func SkillsGTE(v string) predicate.Staff {
	return predicate.Staff(sql.FieldGTE(FieldSkills, v))
}

// SkillsLT applies the LT predicate on the "skills" field.
func SkillsLT(v string) predicate.Staff {
	return predicate.Staff(sql.FieldLT(FieldSkills, v))
}

// SkillsLTE applies the LTE predicate on the "skills" field.
func SkillsLTE(v string) predicate.Staff {
	return predicate.Staff(sql.FieldLTE(FieldSkills, v))
}

// SkillsContains applies the Contains predicate on the "skills" field.
func SkillsContains(v string) predicate.Staff {
	return predicate.Staff(sql.FieldContains(FieldSkills, v))
}

// SkillsHasPrefix applies the HasPrefix predicate on the "skills" field.
func SkillsHasPrefix(v string) predicate.Staff {
	return predicate.Staff(sql.FieldHasPrefix(FieldSkills, v))
}

// SkillsHasSuffix applies the HasSuffix predicate on the "skills" field.
func SkillsHasSuffix(v string) predicate.Staff {
	return predicate.Staff(sql.FieldHasSuffix(FieldSkills, v))
}

// SkillsEqualFold applies the EqualFold predicate on the "skills" field.
func SkillsEqualFold(v string) predicate.Staff {
	return predicate.Staff(sql.FieldEqualFold(FieldSkills, v))
}

// SkillsContainsFold applies the ContainsFold predicate on the "skills" field.
func SkillsContainsFold(v string) predicate.Staff {
	return predicate.Staff(sql.FieldContainsFold(FieldSkills, v))
}

// HasKitchen applies the HasEdge predicate on the "kitchen" edge.
func HasKitchen() predicate.Staff {
	return predicate.Staff(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, KitchenTable, KitchenColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasKitchenWith applies the HasEdge predicate on the "kitchen" edge with a given conditions (other predicates).
func HasKitchenWith(preds ...predicate.Kitchen) predicate.Staff {
	return predicate.Staff(func(s *sql.Selector) {
		step := newKitchenStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasShifts applies the HasEdge predicate on the "shifts" edge.
func HasShifts() predicate.Staff {
	return predicate.Staff(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ShiftsTable, ShiftsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasShiftsWith applies the HasEdge predicate on the "shifts" edge with a given conditions (other predicates).
func HasShiftsWith(preds ...predicate.Shift) predicate.Staff {
	return predicate.Staff(func(s *sql.Selector) {
		step := newShiftsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Staff) predicate.Staff {
	return predicate.Staff(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Staff) predicate.Staff {
	return predicate.Staff(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Staff) predicate.Staff {
	return predicate.Staff(sql.NotPredicates(p))
}
