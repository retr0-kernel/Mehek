// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"project/ent/kitchen"
	"project/ent/kitchenresource"
	"project/ent/predicate"
	"project/ent/resourceallocation"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// KitchenResourceUpdate is the builder for updating KitchenResource entities.
type KitchenResourceUpdate struct {
	config
	hooks    []Hook
	mutation *KitchenResourceMutation
}

// Where appends a list predicates to the KitchenResourceUpdate builder.
func (kru *KitchenResourceUpdate) Where(ps ...predicate.KitchenResource) *KitchenResourceUpdate {
	kru.mutation.Where(ps...)
	return kru
}

// SetName sets the "name" field.
func (kru *KitchenResourceUpdate) SetName(s string) *KitchenResourceUpdate {
	kru.mutation.SetName(s)
	return kru
}

// SetNillableName sets the "name" field if the given value is not nil.
func (kru *KitchenResourceUpdate) SetNillableName(s *string) *KitchenResourceUpdate {
	if s != nil {
		kru.SetName(*s)
	}
	return kru
}

// SetType sets the "type" field.
func (kru *KitchenResourceUpdate) SetType(s string) *KitchenResourceUpdate {
	kru.mutation.SetType(s)
	return kru
}

// SetNillableType sets the "type" field if the given value is not nil.
func (kru *KitchenResourceUpdate) SetNillableType(s *string) *KitchenResourceUpdate {
	if s != nil {
		kru.SetType(*s)
	}
	return kru
}

// SetCapacity sets the "capacity" field.
func (kru *KitchenResourceUpdate) SetCapacity(i int) *KitchenResourceUpdate {
	kru.mutation.ResetCapacity()
	kru.mutation.SetCapacity(i)
	return kru
}

// SetNillableCapacity sets the "capacity" field if the given value is not nil.
func (kru *KitchenResourceUpdate) SetNillableCapacity(i *int) *KitchenResourceUpdate {
	if i != nil {
		kru.SetCapacity(*i)
	}
	return kru
}

// AddCapacity adds i to the "capacity" field.
func (kru *KitchenResourceUpdate) AddCapacity(i int) *KitchenResourceUpdate {
	kru.mutation.AddCapacity(i)
	return kru
}

// SetAvailable sets the "available" field.
func (kru *KitchenResourceUpdate) SetAvailable(b bool) *KitchenResourceUpdate {
	kru.mutation.SetAvailable(b)
	return kru
}

// SetNillableAvailable sets the "available" field if the given value is not nil.
func (kru *KitchenResourceUpdate) SetNillableAvailable(b *bool) *KitchenResourceUpdate {
	if b != nil {
		kru.SetAvailable(*b)
	}
	return kru
}

// SetKitchenID sets the "kitchen" edge to the Kitchen entity by ID.
func (kru *KitchenResourceUpdate) SetKitchenID(id int) *KitchenResourceUpdate {
	kru.mutation.SetKitchenID(id)
	return kru
}

// SetKitchen sets the "kitchen" edge to the Kitchen entity.
func (kru *KitchenResourceUpdate) SetKitchen(k *Kitchen) *KitchenResourceUpdate {
	return kru.SetKitchenID(k.ID)
}

// AddAllocationIDs adds the "allocations" edge to the ResourceAllocation entity by IDs.
func (kru *KitchenResourceUpdate) AddAllocationIDs(ids ...int) *KitchenResourceUpdate {
	kru.mutation.AddAllocationIDs(ids...)
	return kru
}

// AddAllocations adds the "allocations" edges to the ResourceAllocation entity.
func (kru *KitchenResourceUpdate) AddAllocations(r ...*ResourceAllocation) *KitchenResourceUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return kru.AddAllocationIDs(ids...)
}

// Mutation returns the KitchenResourceMutation object of the builder.
func (kru *KitchenResourceUpdate) Mutation() *KitchenResourceMutation {
	return kru.mutation
}

// ClearKitchen clears the "kitchen" edge to the Kitchen entity.
func (kru *KitchenResourceUpdate) ClearKitchen() *KitchenResourceUpdate {
	kru.mutation.ClearKitchen()
	return kru
}

// ClearAllocations clears all "allocations" edges to the ResourceAllocation entity.
func (kru *KitchenResourceUpdate) ClearAllocations() *KitchenResourceUpdate {
	kru.mutation.ClearAllocations()
	return kru
}

// RemoveAllocationIDs removes the "allocations" edge to ResourceAllocation entities by IDs.
func (kru *KitchenResourceUpdate) RemoveAllocationIDs(ids ...int) *KitchenResourceUpdate {
	kru.mutation.RemoveAllocationIDs(ids...)
	return kru
}

// RemoveAllocations removes "allocations" edges to ResourceAllocation entities.
func (kru *KitchenResourceUpdate) RemoveAllocations(r ...*ResourceAllocation) *KitchenResourceUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return kru.RemoveAllocationIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (kru *KitchenResourceUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, kru.sqlSave, kru.mutation, kru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (kru *KitchenResourceUpdate) SaveX(ctx context.Context) int {
	affected, err := kru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (kru *KitchenResourceUpdate) Exec(ctx context.Context) error {
	_, err := kru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (kru *KitchenResourceUpdate) ExecX(ctx context.Context) {
	if err := kru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (kru *KitchenResourceUpdate) check() error {
	if v, ok := kru.mutation.Name(); ok {
		if err := kitchenresource.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "KitchenResource.name": %w`, err)}
		}
	}
	if v, ok := kru.mutation.GetType(); ok {
		if err := kitchenresource.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "KitchenResource.type": %w`, err)}
		}
	}
	if v, ok := kru.mutation.Capacity(); ok {
		if err := kitchenresource.CapacityValidator(v); err != nil {
			return &ValidationError{Name: "capacity", err: fmt.Errorf(`ent: validator failed for field "KitchenResource.capacity": %w`, err)}
		}
	}
	if kru.mutation.KitchenCleared() && len(kru.mutation.KitchenIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "KitchenResource.kitchen"`)
	}
	return nil
}

func (kru *KitchenResourceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := kru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(kitchenresource.Table, kitchenresource.Columns, sqlgraph.NewFieldSpec(kitchenresource.FieldID, field.TypeInt))
	if ps := kru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := kru.mutation.Name(); ok {
		_spec.SetField(kitchenresource.FieldName, field.TypeString, value)
	}
	if value, ok := kru.mutation.GetType(); ok {
		_spec.SetField(kitchenresource.FieldType, field.TypeString, value)
	}
	if value, ok := kru.mutation.Capacity(); ok {
		_spec.SetField(kitchenresource.FieldCapacity, field.TypeInt, value)
	}
	if value, ok := kru.mutation.AddedCapacity(); ok {
		_spec.AddField(kitchenresource.FieldCapacity, field.TypeInt, value)
	}
	if value, ok := kru.mutation.Available(); ok {
		_spec.SetField(kitchenresource.FieldAvailable, field.TypeBool, value)
	}
	if kru.mutation.KitchenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   kitchenresource.KitchenTable,
			Columns: []string{kitchenresource.KitchenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(kitchen.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kru.mutation.KitchenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   kitchenresource.KitchenTable,
			Columns: []string{kitchenresource.KitchenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(kitchen.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if kru.mutation.AllocationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kitchenresource.AllocationsTable,
			Columns: []string{kitchenresource.AllocationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resourceallocation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kru.mutation.RemovedAllocationsIDs(); len(nodes) > 0 && !kru.mutation.AllocationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kitchenresource.AllocationsTable,
			Columns: []string{kitchenresource.AllocationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resourceallocation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kru.mutation.AllocationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kitchenresource.AllocationsTable,
			Columns: []string{kitchenresource.AllocationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resourceallocation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, kru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{kitchenresource.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	kru.mutation.done = true
	return n, nil
}

// KitchenResourceUpdateOne is the builder for updating a single KitchenResource entity.
type KitchenResourceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *KitchenResourceMutation
}

// SetName sets the "name" field.
func (kruo *KitchenResourceUpdateOne) SetName(s string) *KitchenResourceUpdateOne {
	kruo.mutation.SetName(s)
	return kruo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (kruo *KitchenResourceUpdateOne) SetNillableName(s *string) *KitchenResourceUpdateOne {
	if s != nil {
		kruo.SetName(*s)
	}
	return kruo
}

// SetType sets the "type" field.
func (kruo *KitchenResourceUpdateOne) SetType(s string) *KitchenResourceUpdateOne {
	kruo.mutation.SetType(s)
	return kruo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (kruo *KitchenResourceUpdateOne) SetNillableType(s *string) *KitchenResourceUpdateOne {
	if s != nil {
		kruo.SetType(*s)
	}
	return kruo
}

// SetCapacity sets the "capacity" field.
func (kruo *KitchenResourceUpdateOne) SetCapacity(i int) *KitchenResourceUpdateOne {
	kruo.mutation.ResetCapacity()
	kruo.mutation.SetCapacity(i)
	return kruo
}

// SetNillableCapacity sets the "capacity" field if the given value is not nil.
func (kruo *KitchenResourceUpdateOne) SetNillableCapacity(i *int) *KitchenResourceUpdateOne {
	if i != nil {
		kruo.SetCapacity(*i)
	}
	return kruo
}

// AddCapacity adds i to the "capacity" field.
func (kruo *KitchenResourceUpdateOne) AddCapacity(i int) *KitchenResourceUpdateOne {
	kruo.mutation.AddCapacity(i)
	return kruo
}

// SetAvailable sets the "available" field.
func (kruo *KitchenResourceUpdateOne) SetAvailable(b bool) *KitchenResourceUpdateOne {
	kruo.mutation.SetAvailable(b)
	return kruo
}

// SetNillableAvailable sets the "available" field if the given value is not nil.
func (kruo *KitchenResourceUpdateOne) SetNillableAvailable(b *bool) *KitchenResourceUpdateOne {
	if b != nil {
		kruo.SetAvailable(*b)
	}
	return kruo
}

// SetKitchenID sets the "kitchen" edge to the Kitchen entity by ID.
func (kruo *KitchenResourceUpdateOne) SetKitchenID(id int) *KitchenResourceUpdateOne {
	kruo.mutation.SetKitchenID(id)
	return kruo
}

// SetKitchen sets the "kitchen" edge to the Kitchen entity.
func (kruo *KitchenResourceUpdateOne) SetKitchen(k *Kitchen) *KitchenResourceUpdateOne {
	return kruo.SetKitchenID(k.ID)
}

// AddAllocationIDs adds the "allocations" edge to the ResourceAllocation entity by IDs.
func (kruo *KitchenResourceUpdateOne) AddAllocationIDs(ids ...int) *KitchenResourceUpdateOne {
	kruo.mutation.AddAllocationIDs(ids...)
	return kruo
}

// AddAllocations adds the "allocations" edges to the ResourceAllocation entity.
func (kruo *KitchenResourceUpdateOne) AddAllocations(r ...*ResourceAllocation) *KitchenResourceUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return kruo.AddAllocationIDs(ids...)
}

// Mutation returns the KitchenResourceMutation object of the builder.
func (kruo *KitchenResourceUpdateOne) Mutation() *KitchenResourceMutation {
	return kruo.mutation
}

// ClearKitchen clears the "kitchen" edge to the Kitchen entity.
func (kruo *KitchenResourceUpdateOne) ClearKitchen() *KitchenResourceUpdateOne {
	kruo.mutation.ClearKitchen()
	return kruo
}

// ClearAllocations clears all "allocations" edges to the ResourceAllocation entity.
func (kruo *KitchenResourceUpdateOne) ClearAllocations() *KitchenResourceUpdateOne {
	kruo.mutation.ClearAllocations()
	return kruo
}

// RemoveAllocationIDs removes the "allocations" edge to ResourceAllocation entities by IDs.
func (kruo *KitchenResourceUpdateOne) RemoveAllocationIDs(ids ...int) *KitchenResourceUpdateOne {
	kruo.mutation.RemoveAllocationIDs(ids...)
	return kruo
}

// RemoveAllocations removes "allocations" edges to ResourceAllocation entities.
func (kruo *KitchenResourceUpdateOne) RemoveAllocations(r ...*ResourceAllocation) *KitchenResourceUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return kruo.RemoveAllocationIDs(ids...)
}

// Where appends a list predicates to the KitchenResourceUpdate builder.
func (kruo *KitchenResourceUpdateOne) Where(ps ...predicate.KitchenResource) *KitchenResourceUpdateOne {
	kruo.mutation.Where(ps...)
	return kruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (kruo *KitchenResourceUpdateOne) Select(field string, fields ...string) *KitchenResourceUpdateOne {
	kruo.fields = append([]string{field}, fields...)
	return kruo
}

// Save executes the query and returns the updated KitchenResource entity.
func (kruo *KitchenResourceUpdateOne) Save(ctx context.Context) (*KitchenResource, error) {
	return withHooks(ctx, kruo.sqlSave, kruo.mutation, kruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (kruo *KitchenResourceUpdateOne) SaveX(ctx context.Context) *KitchenResource {
	node, err := kruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (kruo *KitchenResourceUpdateOne) Exec(ctx context.Context) error {
	_, err := kruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (kruo *KitchenResourceUpdateOne) ExecX(ctx context.Context) {
	if err := kruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (kruo *KitchenResourceUpdateOne) check() error {
	if v, ok := kruo.mutation.Name(); ok {
		if err := kitchenresource.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "KitchenResource.name": %w`, err)}
		}
	}
	if v, ok := kruo.mutation.GetType(); ok {
		if err := kitchenresource.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "KitchenResource.type": %w`, err)}
		}
	}
	if v, ok := kruo.mutation.Capacity(); ok {
		if err := kitchenresource.CapacityValidator(v); err != nil {
			return &ValidationError{Name: "capacity", err: fmt.Errorf(`ent: validator failed for field "KitchenResource.capacity": %w`, err)}
		}
	}
	if kruo.mutation.KitchenCleared() && len(kruo.mutation.KitchenIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "KitchenResource.kitchen"`)
	}
	return nil
}

func (kruo *KitchenResourceUpdateOne) sqlSave(ctx context.Context) (_node *KitchenResource, err error) {
	if err := kruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(kitchenresource.Table, kitchenresource.Columns, sqlgraph.NewFieldSpec(kitchenresource.FieldID, field.TypeInt))
	id, ok := kruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "KitchenResource.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := kruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, kitchenresource.FieldID)
		for _, f := range fields {
			if !kitchenresource.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != kitchenresource.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := kruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := kruo.mutation.Name(); ok {
		_spec.SetField(kitchenresource.FieldName, field.TypeString, value)
	}
	if value, ok := kruo.mutation.GetType(); ok {
		_spec.SetField(kitchenresource.FieldType, field.TypeString, value)
	}
	if value, ok := kruo.mutation.Capacity(); ok {
		_spec.SetField(kitchenresource.FieldCapacity, field.TypeInt, value)
	}
	if value, ok := kruo.mutation.AddedCapacity(); ok {
		_spec.AddField(kitchenresource.FieldCapacity, field.TypeInt, value)
	}
	if value, ok := kruo.mutation.Available(); ok {
		_spec.SetField(kitchenresource.FieldAvailable, field.TypeBool, value)
	}
	if kruo.mutation.KitchenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   kitchenresource.KitchenTable,
			Columns: []string{kitchenresource.KitchenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(kitchen.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kruo.mutation.KitchenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   kitchenresource.KitchenTable,
			Columns: []string{kitchenresource.KitchenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(kitchen.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if kruo.mutation.AllocationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kitchenresource.AllocationsTable,
			Columns: []string{kitchenresource.AllocationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resourceallocation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kruo.mutation.RemovedAllocationsIDs(); len(nodes) > 0 && !kruo.mutation.AllocationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kitchenresource.AllocationsTable,
			Columns: []string{kitchenresource.AllocationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resourceallocation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kruo.mutation.AllocationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kitchenresource.AllocationsTable,
			Columns: []string{kitchenresource.AllocationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resourceallocation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &KitchenResource{config: kruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, kruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{kitchenresource.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	kruo.mutation.done = true
	return _node, nil
}
