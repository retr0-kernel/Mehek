// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"project/ent/brand"
	"project/ent/order"
	"project/ent/orderitem"
	"project/ent/predicate"
	"project/ent/resourceallocation"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OrderUpdate is the builder for updating Order entities.
type OrderUpdate struct {
	config
	hooks    []Hook
	mutation *OrderMutation
}

// Where appends a list predicates to the OrderUpdate builder.
func (ou *OrderUpdate) Where(ps ...predicate.Order) *OrderUpdate {
	ou.mutation.Where(ps...)
	return ou
}

// SetCreatedAt sets the "created_at" field.
func (ou *OrderUpdate) SetCreatedAt(t time.Time) *OrderUpdate {
	ou.mutation.SetCreatedAt(t)
	return ou
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableCreatedAt(t *time.Time) *OrderUpdate {
	if t != nil {
		ou.SetCreatedAt(*t)
	}
	return ou
}

// SetRequiredBy sets the "required_by" field.
func (ou *OrderUpdate) SetRequiredBy(t time.Time) *OrderUpdate {
	ou.mutation.SetRequiredBy(t)
	return ou
}

// SetNillableRequiredBy sets the "required_by" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableRequiredBy(t *time.Time) *OrderUpdate {
	if t != nil {
		ou.SetRequiredBy(*t)
	}
	return ou
}

// SetStatus sets the "status" field.
func (ou *OrderUpdate) SetStatus(s string) *OrderUpdate {
	ou.mutation.SetStatus(s)
	return ou
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableStatus(s *string) *OrderUpdate {
	if s != nil {
		ou.SetStatus(*s)
	}
	return ou
}

// SetTotalPrice sets the "total_price" field.
func (ou *OrderUpdate) SetTotalPrice(f float64) *OrderUpdate {
	ou.mutation.ResetTotalPrice()
	ou.mutation.SetTotalPrice(f)
	return ou
}

// SetNillableTotalPrice sets the "total_price" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableTotalPrice(f *float64) *OrderUpdate {
	if f != nil {
		ou.SetTotalPrice(*f)
	}
	return ou
}

// AddTotalPrice adds f to the "total_price" field.
func (ou *OrderUpdate) AddTotalPrice(f float64) *OrderUpdate {
	ou.mutation.AddTotalPrice(f)
	return ou
}

// SetBrandID sets the "brand" edge to the Brand entity by ID.
func (ou *OrderUpdate) SetBrandID(id int) *OrderUpdate {
	ou.mutation.SetBrandID(id)
	return ou
}

// SetBrand sets the "brand" edge to the Brand entity.
func (ou *OrderUpdate) SetBrand(b *Brand) *OrderUpdate {
	return ou.SetBrandID(b.ID)
}

// AddItemIDs adds the "items" edge to the OrderItem entity by IDs.
func (ou *OrderUpdate) AddItemIDs(ids ...int) *OrderUpdate {
	ou.mutation.AddItemIDs(ids...)
	return ou
}

// AddItems adds the "items" edges to the OrderItem entity.
func (ou *OrderUpdate) AddItems(o ...*OrderItem) *OrderUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ou.AddItemIDs(ids...)
}

// AddResourceAllocationIDs adds the "resource_allocations" edge to the ResourceAllocation entity by IDs.
func (ou *OrderUpdate) AddResourceAllocationIDs(ids ...int) *OrderUpdate {
	ou.mutation.AddResourceAllocationIDs(ids...)
	return ou
}

// AddResourceAllocations adds the "resource_allocations" edges to the ResourceAllocation entity.
func (ou *OrderUpdate) AddResourceAllocations(r ...*ResourceAllocation) *OrderUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ou.AddResourceAllocationIDs(ids...)
}

// Mutation returns the OrderMutation object of the builder.
func (ou *OrderUpdate) Mutation() *OrderMutation {
	return ou.mutation
}

// ClearBrand clears the "brand" edge to the Brand entity.
func (ou *OrderUpdate) ClearBrand() *OrderUpdate {
	ou.mutation.ClearBrand()
	return ou
}

// ClearItems clears all "items" edges to the OrderItem entity.
func (ou *OrderUpdate) ClearItems() *OrderUpdate {
	ou.mutation.ClearItems()
	return ou
}

// RemoveItemIDs removes the "items" edge to OrderItem entities by IDs.
func (ou *OrderUpdate) RemoveItemIDs(ids ...int) *OrderUpdate {
	ou.mutation.RemoveItemIDs(ids...)
	return ou
}

// RemoveItems removes "items" edges to OrderItem entities.
func (ou *OrderUpdate) RemoveItems(o ...*OrderItem) *OrderUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ou.RemoveItemIDs(ids...)
}

// ClearResourceAllocations clears all "resource_allocations" edges to the ResourceAllocation entity.
func (ou *OrderUpdate) ClearResourceAllocations() *OrderUpdate {
	ou.mutation.ClearResourceAllocations()
	return ou
}

// RemoveResourceAllocationIDs removes the "resource_allocations" edge to ResourceAllocation entities by IDs.
func (ou *OrderUpdate) RemoveResourceAllocationIDs(ids ...int) *OrderUpdate {
	ou.mutation.RemoveResourceAllocationIDs(ids...)
	return ou
}

// RemoveResourceAllocations removes "resource_allocations" edges to ResourceAllocation entities.
func (ou *OrderUpdate) RemoveResourceAllocations(r ...*ResourceAllocation) *OrderUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ou.RemoveResourceAllocationIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ou *OrderUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ou.sqlSave, ou.mutation, ou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ou *OrderUpdate) SaveX(ctx context.Context) int {
	affected, err := ou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ou *OrderUpdate) Exec(ctx context.Context) error {
	_, err := ou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ou *OrderUpdate) ExecX(ctx context.Context) {
	if err := ou.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ou *OrderUpdate) check() error {
	if ou.mutation.BrandCleared() && len(ou.mutation.BrandIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Order.brand"`)
	}
	return nil
}

func (ou *OrderUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ou.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(order.Table, order.Columns, sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt))
	if ps := ou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ou.mutation.CreatedAt(); ok {
		_spec.SetField(order.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ou.mutation.RequiredBy(); ok {
		_spec.SetField(order.FieldRequiredBy, field.TypeTime, value)
	}
	if value, ok := ou.mutation.Status(); ok {
		_spec.SetField(order.FieldStatus, field.TypeString, value)
	}
	if value, ok := ou.mutation.TotalPrice(); ok {
		_spec.SetField(order.FieldTotalPrice, field.TypeFloat64, value)
	}
	if value, ok := ou.mutation.AddedTotalPrice(); ok {
		_spec.AddField(order.FieldTotalPrice, field.TypeFloat64, value)
	}
	if ou.mutation.BrandCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.BrandTable,
			Columns: []string{order.BrandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(brand.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.BrandIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.BrandTable,
			Columns: []string{order.BrandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(brand.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.ItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.ItemsTable,
			Columns: []string{order.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderitem.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedItemsIDs(); len(nodes) > 0 && !ou.mutation.ItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.ItemsTable,
			Columns: []string{order.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.ItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.ItemsTable,
			Columns: []string{order.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.ResourceAllocationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   order.ResourceAllocationsTable,
			Columns: []string{order.ResourceAllocationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resourceallocation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedResourceAllocationsIDs(); len(nodes) > 0 && !ou.mutation.ResourceAllocationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   order.ResourceAllocationsTable,
			Columns: []string{order.ResourceAllocationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resourceallocation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.ResourceAllocationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   order.ResourceAllocationsTable,
			Columns: []string{order.ResourceAllocationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resourceallocation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{order.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ou.mutation.done = true
	return n, nil
}

// OrderUpdateOne is the builder for updating a single Order entity.
type OrderUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrderMutation
}

// SetCreatedAt sets the "created_at" field.
func (ouo *OrderUpdateOne) SetCreatedAt(t time.Time) *OrderUpdateOne {
	ouo.mutation.SetCreatedAt(t)
	return ouo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableCreatedAt(t *time.Time) *OrderUpdateOne {
	if t != nil {
		ouo.SetCreatedAt(*t)
	}
	return ouo
}

// SetRequiredBy sets the "required_by" field.
func (ouo *OrderUpdateOne) SetRequiredBy(t time.Time) *OrderUpdateOne {
	ouo.mutation.SetRequiredBy(t)
	return ouo
}

// SetNillableRequiredBy sets the "required_by" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableRequiredBy(t *time.Time) *OrderUpdateOne {
	if t != nil {
		ouo.SetRequiredBy(*t)
	}
	return ouo
}

// SetStatus sets the "status" field.
func (ouo *OrderUpdateOne) SetStatus(s string) *OrderUpdateOne {
	ouo.mutation.SetStatus(s)
	return ouo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableStatus(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetStatus(*s)
	}
	return ouo
}

// SetTotalPrice sets the "total_price" field.
func (ouo *OrderUpdateOne) SetTotalPrice(f float64) *OrderUpdateOne {
	ouo.mutation.ResetTotalPrice()
	ouo.mutation.SetTotalPrice(f)
	return ouo
}

// SetNillableTotalPrice sets the "total_price" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableTotalPrice(f *float64) *OrderUpdateOne {
	if f != nil {
		ouo.SetTotalPrice(*f)
	}
	return ouo
}

// AddTotalPrice adds f to the "total_price" field.
func (ouo *OrderUpdateOne) AddTotalPrice(f float64) *OrderUpdateOne {
	ouo.mutation.AddTotalPrice(f)
	return ouo
}

// SetBrandID sets the "brand" edge to the Brand entity by ID.
func (ouo *OrderUpdateOne) SetBrandID(id int) *OrderUpdateOne {
	ouo.mutation.SetBrandID(id)
	return ouo
}

// SetBrand sets the "brand" edge to the Brand entity.
func (ouo *OrderUpdateOne) SetBrand(b *Brand) *OrderUpdateOne {
	return ouo.SetBrandID(b.ID)
}

// AddItemIDs adds the "items" edge to the OrderItem entity by IDs.
func (ouo *OrderUpdateOne) AddItemIDs(ids ...int) *OrderUpdateOne {
	ouo.mutation.AddItemIDs(ids...)
	return ouo
}

// AddItems adds the "items" edges to the OrderItem entity.
func (ouo *OrderUpdateOne) AddItems(o ...*OrderItem) *OrderUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ouo.AddItemIDs(ids...)
}

// AddResourceAllocationIDs adds the "resource_allocations" edge to the ResourceAllocation entity by IDs.
func (ouo *OrderUpdateOne) AddResourceAllocationIDs(ids ...int) *OrderUpdateOne {
	ouo.mutation.AddResourceAllocationIDs(ids...)
	return ouo
}

// AddResourceAllocations adds the "resource_allocations" edges to the ResourceAllocation entity.
func (ouo *OrderUpdateOne) AddResourceAllocations(r ...*ResourceAllocation) *OrderUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ouo.AddResourceAllocationIDs(ids...)
}

// Mutation returns the OrderMutation object of the builder.
func (ouo *OrderUpdateOne) Mutation() *OrderMutation {
	return ouo.mutation
}

// ClearBrand clears the "brand" edge to the Brand entity.
func (ouo *OrderUpdateOne) ClearBrand() *OrderUpdateOne {
	ouo.mutation.ClearBrand()
	return ouo
}

// ClearItems clears all "items" edges to the OrderItem entity.
func (ouo *OrderUpdateOne) ClearItems() *OrderUpdateOne {
	ouo.mutation.ClearItems()
	return ouo
}

// RemoveItemIDs removes the "items" edge to OrderItem entities by IDs.
func (ouo *OrderUpdateOne) RemoveItemIDs(ids ...int) *OrderUpdateOne {
	ouo.mutation.RemoveItemIDs(ids...)
	return ouo
}

// RemoveItems removes "items" edges to OrderItem entities.
func (ouo *OrderUpdateOne) RemoveItems(o ...*OrderItem) *OrderUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ouo.RemoveItemIDs(ids...)
}

// ClearResourceAllocations clears all "resource_allocations" edges to the ResourceAllocation entity.
func (ouo *OrderUpdateOne) ClearResourceAllocations() *OrderUpdateOne {
	ouo.mutation.ClearResourceAllocations()
	return ouo
}

// RemoveResourceAllocationIDs removes the "resource_allocations" edge to ResourceAllocation entities by IDs.
func (ouo *OrderUpdateOne) RemoveResourceAllocationIDs(ids ...int) *OrderUpdateOne {
	ouo.mutation.RemoveResourceAllocationIDs(ids...)
	return ouo
}

// RemoveResourceAllocations removes "resource_allocations" edges to ResourceAllocation entities.
func (ouo *OrderUpdateOne) RemoveResourceAllocations(r ...*ResourceAllocation) *OrderUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ouo.RemoveResourceAllocationIDs(ids...)
}

// Where appends a list predicates to the OrderUpdate builder.
func (ouo *OrderUpdateOne) Where(ps ...predicate.Order) *OrderUpdateOne {
	ouo.mutation.Where(ps...)
	return ouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ouo *OrderUpdateOne) Select(field string, fields ...string) *OrderUpdateOne {
	ouo.fields = append([]string{field}, fields...)
	return ouo
}

// Save executes the query and returns the updated Order entity.
func (ouo *OrderUpdateOne) Save(ctx context.Context) (*Order, error) {
	return withHooks(ctx, ouo.sqlSave, ouo.mutation, ouo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ouo *OrderUpdateOne) SaveX(ctx context.Context) *Order {
	node, err := ouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ouo *OrderUpdateOne) Exec(ctx context.Context) error {
	_, err := ouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouo *OrderUpdateOne) ExecX(ctx context.Context) {
	if err := ouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ouo *OrderUpdateOne) check() error {
	if ouo.mutation.BrandCleared() && len(ouo.mutation.BrandIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Order.brand"`)
	}
	return nil
}

func (ouo *OrderUpdateOne) sqlSave(ctx context.Context) (_node *Order, err error) {
	if err := ouo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(order.Table, order.Columns, sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt))
	id, ok := ouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Order.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, order.FieldID)
		for _, f := range fields {
			if !order.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != order.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ouo.mutation.CreatedAt(); ok {
		_spec.SetField(order.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ouo.mutation.RequiredBy(); ok {
		_spec.SetField(order.FieldRequiredBy, field.TypeTime, value)
	}
	if value, ok := ouo.mutation.Status(); ok {
		_spec.SetField(order.FieldStatus, field.TypeString, value)
	}
	if value, ok := ouo.mutation.TotalPrice(); ok {
		_spec.SetField(order.FieldTotalPrice, field.TypeFloat64, value)
	}
	if value, ok := ouo.mutation.AddedTotalPrice(); ok {
		_spec.AddField(order.FieldTotalPrice, field.TypeFloat64, value)
	}
	if ouo.mutation.BrandCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.BrandTable,
			Columns: []string{order.BrandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(brand.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.BrandIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.BrandTable,
			Columns: []string{order.BrandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(brand.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.ItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.ItemsTable,
			Columns: []string{order.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderitem.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedItemsIDs(); len(nodes) > 0 && !ouo.mutation.ItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.ItemsTable,
			Columns: []string{order.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.ItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.ItemsTable,
			Columns: []string{order.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.ResourceAllocationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   order.ResourceAllocationsTable,
			Columns: []string{order.ResourceAllocationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resourceallocation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedResourceAllocationsIDs(); len(nodes) > 0 && !ouo.mutation.ResourceAllocationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   order.ResourceAllocationsTable,
			Columns: []string{order.ResourceAllocationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resourceallocation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.ResourceAllocationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   order.ResourceAllocationsTable,
			Columns: []string{order.ResourceAllocationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resourceallocation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Order{config: ouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{order.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ouo.mutation.done = true
	return _node, nil
}
