// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"project/ent/kitchen"
	"project/ent/staff"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Staff is the model entity for the Staff schema.
type Staff struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Role holds the value of the "role" field.
	Role string `json:"role,omitempty"`
	// Skills holds the value of the "skills" field.
	Skills string `json:"skills,omitempty"`
	// Availability holds the value of the "availability" field.
	Availability map[string][]string `json:"availability,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the StaffQuery when eager-loading is set.
	Edges         StaffEdges `json:"edges"`
	kitchen_staff *int
	selectValues  sql.SelectValues
}

// StaffEdges holds the relations/edges for other nodes in the graph.
type StaffEdges struct {
	// Kitchen holds the value of the kitchen edge.
	Kitchen *Kitchen `json:"kitchen,omitempty"`
	// Shifts holds the value of the shifts edge.
	Shifts []*Shift `json:"shifts,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// KitchenOrErr returns the Kitchen value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StaffEdges) KitchenOrErr() (*Kitchen, error) {
	if e.Kitchen != nil {
		return e.Kitchen, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: kitchen.Label}
	}
	return nil, &NotLoadedError{edge: "kitchen"}
}

// ShiftsOrErr returns the Shifts value or an error if the edge
// was not loaded in eager-loading.
func (e StaffEdges) ShiftsOrErr() ([]*Shift, error) {
	if e.loadedTypes[1] {
		return e.Shifts, nil
	}
	return nil, &NotLoadedError{edge: "shifts"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Staff) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case staff.FieldAvailability:
			values[i] = new([]byte)
		case staff.FieldID:
			values[i] = new(sql.NullInt64)
		case staff.FieldName, staff.FieldRole, staff.FieldSkills:
			values[i] = new(sql.NullString)
		case staff.ForeignKeys[0]: // kitchen_staff
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Staff fields.
func (s *Staff) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case staff.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int(value.Int64)
		case staff.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				s.Name = value.String
			}
		case staff.FieldRole:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field role", values[i])
			} else if value.Valid {
				s.Role = value.String
			}
		case staff.FieldSkills:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field skills", values[i])
			} else if value.Valid {
				s.Skills = value.String
			}
		case staff.FieldAvailability:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field availability", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &s.Availability); err != nil {
					return fmt.Errorf("unmarshal field availability: %w", err)
				}
			}
		case staff.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field kitchen_staff", value)
			} else if value.Valid {
				s.kitchen_staff = new(int)
				*s.kitchen_staff = int(value.Int64)
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Staff.
// This includes values selected through modifiers, order, etc.
func (s *Staff) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// QueryKitchen queries the "kitchen" edge of the Staff entity.
func (s *Staff) QueryKitchen() *KitchenQuery {
	return NewStaffClient(s.config).QueryKitchen(s)
}

// QueryShifts queries the "shifts" edge of the Staff entity.
func (s *Staff) QueryShifts() *ShiftQuery {
	return NewStaffClient(s.config).QueryShifts(s)
}

// Update returns a builder for updating this Staff.
// Note that you need to call Staff.Unwrap() before calling this method if this Staff
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Staff) Update() *StaffUpdateOne {
	return NewStaffClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Staff entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Staff) Unwrap() *Staff {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Staff is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Staff) String() string {
	var builder strings.Builder
	builder.WriteString("Staff(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("name=")
	builder.WriteString(s.Name)
	builder.WriteString(", ")
	builder.WriteString("role=")
	builder.WriteString(s.Role)
	builder.WriteString(", ")
	builder.WriteString("skills=")
	builder.WriteString(s.Skills)
	builder.WriteString(", ")
	builder.WriteString("availability=")
	builder.WriteString(fmt.Sprintf("%v", s.Availability))
	builder.WriteByte(')')
	return builder.String()
}

// Staffs is a parsable slice of Staff.
type Staffs []*Staff
