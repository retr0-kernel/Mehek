// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"project/ent/kitchenresource"
	"project/ent/order"
	"project/ent/predicate"
	"project/ent/resourceallocation"
	"project/ent/shift"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ResourceAllocationUpdate is the builder for updating ResourceAllocation entities.
type ResourceAllocationUpdate struct {
	config
	hooks    []Hook
	mutation *ResourceAllocationMutation
}

// Where appends a list predicates to the ResourceAllocationUpdate builder.
func (rau *ResourceAllocationUpdate) Where(ps ...predicate.ResourceAllocation) *ResourceAllocationUpdate {
	rau.mutation.Where(ps...)
	return rau
}

// SetStartTime sets the "start_time" field.
func (rau *ResourceAllocationUpdate) SetStartTime(t time.Time) *ResourceAllocationUpdate {
	rau.mutation.SetStartTime(t)
	return rau
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (rau *ResourceAllocationUpdate) SetNillableStartTime(t *time.Time) *ResourceAllocationUpdate {
	if t != nil {
		rau.SetStartTime(*t)
	}
	return rau
}

// SetEndTime sets the "end_time" field.
func (rau *ResourceAllocationUpdate) SetEndTime(t time.Time) *ResourceAllocationUpdate {
	rau.mutation.SetEndTime(t)
	return rau
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (rau *ResourceAllocationUpdate) SetNillableEndTime(t *time.Time) *ResourceAllocationUpdate {
	if t != nil {
		rau.SetEndTime(*t)
	}
	return rau
}

// SetStatus sets the "status" field.
func (rau *ResourceAllocationUpdate) SetStatus(s string) *ResourceAllocationUpdate {
	rau.mutation.SetStatus(s)
	return rau
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (rau *ResourceAllocationUpdate) SetNillableStatus(s *string) *ResourceAllocationUpdate {
	if s != nil {
		rau.SetStatus(*s)
	}
	return rau
}

// SetResourceID sets the "resource" edge to the KitchenResource entity by ID.
func (rau *ResourceAllocationUpdate) SetResourceID(id int) *ResourceAllocationUpdate {
	rau.mutation.SetResourceID(id)
	return rau
}

// SetResource sets the "resource" edge to the KitchenResource entity.
func (rau *ResourceAllocationUpdate) SetResource(k *KitchenResource) *ResourceAllocationUpdate {
	return rau.SetResourceID(k.ID)
}

// SetOrderID sets the "order" edge to the Order entity by ID.
func (rau *ResourceAllocationUpdate) SetOrderID(id int) *ResourceAllocationUpdate {
	rau.mutation.SetOrderID(id)
	return rau
}

// SetOrder sets the "order" edge to the Order entity.
func (rau *ResourceAllocationUpdate) SetOrder(o *Order) *ResourceAllocationUpdate {
	return rau.SetOrderID(o.ID)
}

// SetShiftID sets the "shift" edge to the Shift entity by ID.
func (rau *ResourceAllocationUpdate) SetShiftID(id int) *ResourceAllocationUpdate {
	rau.mutation.SetShiftID(id)
	return rau
}

// SetShift sets the "shift" edge to the Shift entity.
func (rau *ResourceAllocationUpdate) SetShift(s *Shift) *ResourceAllocationUpdate {
	return rau.SetShiftID(s.ID)
}

// Mutation returns the ResourceAllocationMutation object of the builder.
func (rau *ResourceAllocationUpdate) Mutation() *ResourceAllocationMutation {
	return rau.mutation
}

// ClearResource clears the "resource" edge to the KitchenResource entity.
func (rau *ResourceAllocationUpdate) ClearResource() *ResourceAllocationUpdate {
	rau.mutation.ClearResource()
	return rau
}

// ClearOrder clears the "order" edge to the Order entity.
func (rau *ResourceAllocationUpdate) ClearOrder() *ResourceAllocationUpdate {
	rau.mutation.ClearOrder()
	return rau
}

// ClearShift clears the "shift" edge to the Shift entity.
func (rau *ResourceAllocationUpdate) ClearShift() *ResourceAllocationUpdate {
	rau.mutation.ClearShift()
	return rau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rau *ResourceAllocationUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, rau.sqlSave, rau.mutation, rau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rau *ResourceAllocationUpdate) SaveX(ctx context.Context) int {
	affected, err := rau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rau *ResourceAllocationUpdate) Exec(ctx context.Context) error {
	_, err := rau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rau *ResourceAllocationUpdate) ExecX(ctx context.Context) {
	if err := rau.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rau *ResourceAllocationUpdate) check() error {
	if rau.mutation.ResourceCleared() && len(rau.mutation.ResourceIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ResourceAllocation.resource"`)
	}
	if rau.mutation.OrderCleared() && len(rau.mutation.OrderIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ResourceAllocation.order"`)
	}
	if rau.mutation.ShiftCleared() && len(rau.mutation.ShiftIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ResourceAllocation.shift"`)
	}
	return nil
}

func (rau *ResourceAllocationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := rau.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(resourceallocation.Table, resourceallocation.Columns, sqlgraph.NewFieldSpec(resourceallocation.FieldID, field.TypeInt))
	if ps := rau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rau.mutation.StartTime(); ok {
		_spec.SetField(resourceallocation.FieldStartTime, field.TypeTime, value)
	}
	if value, ok := rau.mutation.EndTime(); ok {
		_spec.SetField(resourceallocation.FieldEndTime, field.TypeTime, value)
	}
	if value, ok := rau.mutation.Status(); ok {
		_spec.SetField(resourceallocation.FieldStatus, field.TypeString, value)
	}
	if rau.mutation.ResourceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resourceallocation.ResourceTable,
			Columns: []string{resourceallocation.ResourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(kitchenresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rau.mutation.ResourceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resourceallocation.ResourceTable,
			Columns: []string{resourceallocation.ResourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(kitchenresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rau.mutation.OrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   resourceallocation.OrderTable,
			Columns: []string{resourceallocation.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rau.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   resourceallocation.OrderTable,
			Columns: []string{resourceallocation.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rau.mutation.ShiftCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resourceallocation.ShiftTable,
			Columns: []string{resourceallocation.ShiftColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shift.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rau.mutation.ShiftIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resourceallocation.ShiftTable,
			Columns: []string{resourceallocation.ShiftColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shift.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{resourceallocation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rau.mutation.done = true
	return n, nil
}

// ResourceAllocationUpdateOne is the builder for updating a single ResourceAllocation entity.
type ResourceAllocationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ResourceAllocationMutation
}

// SetStartTime sets the "start_time" field.
func (rauo *ResourceAllocationUpdateOne) SetStartTime(t time.Time) *ResourceAllocationUpdateOne {
	rauo.mutation.SetStartTime(t)
	return rauo
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (rauo *ResourceAllocationUpdateOne) SetNillableStartTime(t *time.Time) *ResourceAllocationUpdateOne {
	if t != nil {
		rauo.SetStartTime(*t)
	}
	return rauo
}

// SetEndTime sets the "end_time" field.
func (rauo *ResourceAllocationUpdateOne) SetEndTime(t time.Time) *ResourceAllocationUpdateOne {
	rauo.mutation.SetEndTime(t)
	return rauo
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (rauo *ResourceAllocationUpdateOne) SetNillableEndTime(t *time.Time) *ResourceAllocationUpdateOne {
	if t != nil {
		rauo.SetEndTime(*t)
	}
	return rauo
}

// SetStatus sets the "status" field.
func (rauo *ResourceAllocationUpdateOne) SetStatus(s string) *ResourceAllocationUpdateOne {
	rauo.mutation.SetStatus(s)
	return rauo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (rauo *ResourceAllocationUpdateOne) SetNillableStatus(s *string) *ResourceAllocationUpdateOne {
	if s != nil {
		rauo.SetStatus(*s)
	}
	return rauo
}

// SetResourceID sets the "resource" edge to the KitchenResource entity by ID.
func (rauo *ResourceAllocationUpdateOne) SetResourceID(id int) *ResourceAllocationUpdateOne {
	rauo.mutation.SetResourceID(id)
	return rauo
}

// SetResource sets the "resource" edge to the KitchenResource entity.
func (rauo *ResourceAllocationUpdateOne) SetResource(k *KitchenResource) *ResourceAllocationUpdateOne {
	return rauo.SetResourceID(k.ID)
}

// SetOrderID sets the "order" edge to the Order entity by ID.
func (rauo *ResourceAllocationUpdateOne) SetOrderID(id int) *ResourceAllocationUpdateOne {
	rauo.mutation.SetOrderID(id)
	return rauo
}

// SetOrder sets the "order" edge to the Order entity.
func (rauo *ResourceAllocationUpdateOne) SetOrder(o *Order) *ResourceAllocationUpdateOne {
	return rauo.SetOrderID(o.ID)
}

// SetShiftID sets the "shift" edge to the Shift entity by ID.
func (rauo *ResourceAllocationUpdateOne) SetShiftID(id int) *ResourceAllocationUpdateOne {
	rauo.mutation.SetShiftID(id)
	return rauo
}

// SetShift sets the "shift" edge to the Shift entity.
func (rauo *ResourceAllocationUpdateOne) SetShift(s *Shift) *ResourceAllocationUpdateOne {
	return rauo.SetShiftID(s.ID)
}

// Mutation returns the ResourceAllocationMutation object of the builder.
func (rauo *ResourceAllocationUpdateOne) Mutation() *ResourceAllocationMutation {
	return rauo.mutation
}

// ClearResource clears the "resource" edge to the KitchenResource entity.
func (rauo *ResourceAllocationUpdateOne) ClearResource() *ResourceAllocationUpdateOne {
	rauo.mutation.ClearResource()
	return rauo
}

// ClearOrder clears the "order" edge to the Order entity.
func (rauo *ResourceAllocationUpdateOne) ClearOrder() *ResourceAllocationUpdateOne {
	rauo.mutation.ClearOrder()
	return rauo
}

// ClearShift clears the "shift" edge to the Shift entity.
func (rauo *ResourceAllocationUpdateOne) ClearShift() *ResourceAllocationUpdateOne {
	rauo.mutation.ClearShift()
	return rauo
}

// Where appends a list predicates to the ResourceAllocationUpdate builder.
func (rauo *ResourceAllocationUpdateOne) Where(ps ...predicate.ResourceAllocation) *ResourceAllocationUpdateOne {
	rauo.mutation.Where(ps...)
	return rauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rauo *ResourceAllocationUpdateOne) Select(field string, fields ...string) *ResourceAllocationUpdateOne {
	rauo.fields = append([]string{field}, fields...)
	return rauo
}

// Save executes the query and returns the updated ResourceAllocation entity.
func (rauo *ResourceAllocationUpdateOne) Save(ctx context.Context) (*ResourceAllocation, error) {
	return withHooks(ctx, rauo.sqlSave, rauo.mutation, rauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rauo *ResourceAllocationUpdateOne) SaveX(ctx context.Context) *ResourceAllocation {
	node, err := rauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rauo *ResourceAllocationUpdateOne) Exec(ctx context.Context) error {
	_, err := rauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rauo *ResourceAllocationUpdateOne) ExecX(ctx context.Context) {
	if err := rauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rauo *ResourceAllocationUpdateOne) check() error {
	if rauo.mutation.ResourceCleared() && len(rauo.mutation.ResourceIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ResourceAllocation.resource"`)
	}
	if rauo.mutation.OrderCleared() && len(rauo.mutation.OrderIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ResourceAllocation.order"`)
	}
	if rauo.mutation.ShiftCleared() && len(rauo.mutation.ShiftIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ResourceAllocation.shift"`)
	}
	return nil
}

func (rauo *ResourceAllocationUpdateOne) sqlSave(ctx context.Context) (_node *ResourceAllocation, err error) {
	if err := rauo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(resourceallocation.Table, resourceallocation.Columns, sqlgraph.NewFieldSpec(resourceallocation.FieldID, field.TypeInt))
	id, ok := rauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ResourceAllocation.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, resourceallocation.FieldID)
		for _, f := range fields {
			if !resourceallocation.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != resourceallocation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rauo.mutation.StartTime(); ok {
		_spec.SetField(resourceallocation.FieldStartTime, field.TypeTime, value)
	}
	if value, ok := rauo.mutation.EndTime(); ok {
		_spec.SetField(resourceallocation.FieldEndTime, field.TypeTime, value)
	}
	if value, ok := rauo.mutation.Status(); ok {
		_spec.SetField(resourceallocation.FieldStatus, field.TypeString, value)
	}
	if rauo.mutation.ResourceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resourceallocation.ResourceTable,
			Columns: []string{resourceallocation.ResourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(kitchenresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rauo.mutation.ResourceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resourceallocation.ResourceTable,
			Columns: []string{resourceallocation.ResourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(kitchenresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rauo.mutation.OrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   resourceallocation.OrderTable,
			Columns: []string{resourceallocation.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rauo.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   resourceallocation.OrderTable,
			Columns: []string{resourceallocation.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rauo.mutation.ShiftCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resourceallocation.ShiftTable,
			Columns: []string{resourceallocation.ShiftColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shift.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rauo.mutation.ShiftIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resourceallocation.ShiftTable,
			Columns: []string{resourceallocation.ShiftColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shift.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ResourceAllocation{config: rauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{resourceallocation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	rauo.mutation.done = true
	return _node, nil
}
