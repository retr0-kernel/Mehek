// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"project/ent/ingredient"
	"project/ent/menu"
	"project/ent/menuitem"
	"project/ent/orderitem"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MenuItemCreate is the builder for creating a MenuItem entity.
type MenuItemCreate struct {
	config
	mutation *MenuItemMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (mic *MenuItemCreate) SetName(s string) *MenuItemCreate {
	mic.mutation.SetName(s)
	return mic
}

// SetPrice sets the "price" field.
func (mic *MenuItemCreate) SetPrice(f float64) *MenuItemCreate {
	mic.mutation.SetPrice(f)
	return mic
}

// SetPrepTime sets the "prep_time" field.
func (mic *MenuItemCreate) SetPrepTime(i int) *MenuItemCreate {
	mic.mutation.SetPrepTime(i)
	return mic
}

// SetEquipmentNeeded sets the "equipment_needed" field.
func (mic *MenuItemCreate) SetEquipmentNeeded(s string) *MenuItemCreate {
	mic.mutation.SetEquipmentNeeded(s)
	return mic
}

// SetMenuID sets the "menu" edge to the Menu entity by ID.
func (mic *MenuItemCreate) SetMenuID(id int) *MenuItemCreate {
	mic.mutation.SetMenuID(id)
	return mic
}

// SetMenu sets the "menu" edge to the Menu entity.
func (mic *MenuItemCreate) SetMenu(m *Menu) *MenuItemCreate {
	return mic.SetMenuID(m.ID)
}

// AddIngredientIDs adds the "ingredients" edge to the Ingredient entity by IDs.
func (mic *MenuItemCreate) AddIngredientIDs(ids ...int) *MenuItemCreate {
	mic.mutation.AddIngredientIDs(ids...)
	return mic
}

// AddIngredients adds the "ingredients" edges to the Ingredient entity.
func (mic *MenuItemCreate) AddIngredients(i ...*Ingredient) *MenuItemCreate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return mic.AddIngredientIDs(ids...)
}

// AddOrderItemIDs adds the "order_items" edge to the OrderItem entity by IDs.
func (mic *MenuItemCreate) AddOrderItemIDs(ids ...int) *MenuItemCreate {
	mic.mutation.AddOrderItemIDs(ids...)
	return mic
}

// AddOrderItems adds the "order_items" edges to the OrderItem entity.
func (mic *MenuItemCreate) AddOrderItems(o ...*OrderItem) *MenuItemCreate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return mic.AddOrderItemIDs(ids...)
}

// Mutation returns the MenuItemMutation object of the builder.
func (mic *MenuItemCreate) Mutation() *MenuItemMutation {
	return mic.mutation
}

// Save creates the MenuItem in the database.
func (mic *MenuItemCreate) Save(ctx context.Context) (*MenuItem, error) {
	return withHooks(ctx, mic.sqlSave, mic.mutation, mic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mic *MenuItemCreate) SaveX(ctx context.Context) *MenuItem {
	v, err := mic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mic *MenuItemCreate) Exec(ctx context.Context) error {
	_, err := mic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mic *MenuItemCreate) ExecX(ctx context.Context) {
	if err := mic.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mic *MenuItemCreate) check() error {
	if _, ok := mic.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "MenuItem.name"`)}
	}
	if v, ok := mic.mutation.Name(); ok {
		if err := menuitem.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "MenuItem.name": %w`, err)}
		}
	}
	if _, ok := mic.mutation.Price(); !ok {
		return &ValidationError{Name: "price", err: errors.New(`ent: missing required field "MenuItem.price"`)}
	}
	if v, ok := mic.mutation.Price(); ok {
		if err := menuitem.PriceValidator(v); err != nil {
			return &ValidationError{Name: "price", err: fmt.Errorf(`ent: validator failed for field "MenuItem.price": %w`, err)}
		}
	}
	if _, ok := mic.mutation.PrepTime(); !ok {
		return &ValidationError{Name: "prep_time", err: errors.New(`ent: missing required field "MenuItem.prep_time"`)}
	}
	if v, ok := mic.mutation.PrepTime(); ok {
		if err := menuitem.PrepTimeValidator(v); err != nil {
			return &ValidationError{Name: "prep_time", err: fmt.Errorf(`ent: validator failed for field "MenuItem.prep_time": %w`, err)}
		}
	}
	if _, ok := mic.mutation.EquipmentNeeded(); !ok {
		return &ValidationError{Name: "equipment_needed", err: errors.New(`ent: missing required field "MenuItem.equipment_needed"`)}
	}
	if len(mic.mutation.MenuIDs()) == 0 {
		return &ValidationError{Name: "menu", err: errors.New(`ent: missing required edge "MenuItem.menu"`)}
	}
	return nil
}

func (mic *MenuItemCreate) sqlSave(ctx context.Context) (*MenuItem, error) {
	if err := mic.check(); err != nil {
		return nil, err
	}
	_node, _spec := mic.createSpec()
	if err := sqlgraph.CreateNode(ctx, mic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	mic.mutation.id = &_node.ID
	mic.mutation.done = true
	return _node, nil
}

func (mic *MenuItemCreate) createSpec() (*MenuItem, *sqlgraph.CreateSpec) {
	var (
		_node = &MenuItem{config: mic.config}
		_spec = sqlgraph.NewCreateSpec(menuitem.Table, sqlgraph.NewFieldSpec(menuitem.FieldID, field.TypeInt))
	)
	if value, ok := mic.mutation.Name(); ok {
		_spec.SetField(menuitem.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := mic.mutation.Price(); ok {
		_spec.SetField(menuitem.FieldPrice, field.TypeFloat64, value)
		_node.Price = value
	}
	if value, ok := mic.mutation.PrepTime(); ok {
		_spec.SetField(menuitem.FieldPrepTime, field.TypeInt, value)
		_node.PrepTime = value
	}
	if value, ok := mic.mutation.EquipmentNeeded(); ok {
		_spec.SetField(menuitem.FieldEquipmentNeeded, field.TypeString, value)
		_node.EquipmentNeeded = value
	}
	if nodes := mic.mutation.MenuIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   menuitem.MenuTable,
			Columns: []string{menuitem.MenuColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.menu_items = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mic.mutation.IngredientsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   menuitem.IngredientsTable,
			Columns: menuitem.IngredientsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ingredient.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mic.mutation.OrderItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   menuitem.OrderItemsTable,
			Columns: []string{menuitem.OrderItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// MenuItemCreateBulk is the builder for creating many MenuItem entities in bulk.
type MenuItemCreateBulk struct {
	config
	err      error
	builders []*MenuItemCreate
}

// Save creates the MenuItem entities in the database.
func (micb *MenuItemCreateBulk) Save(ctx context.Context) ([]*MenuItem, error) {
	if micb.err != nil {
		return nil, micb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(micb.builders))
	nodes := make([]*MenuItem, len(micb.builders))
	mutators := make([]Mutator, len(micb.builders))
	for i := range micb.builders {
		func(i int, root context.Context) {
			builder := micb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MenuItemMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, micb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, micb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, micb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (micb *MenuItemCreateBulk) SaveX(ctx context.Context) []*MenuItem {
	v, err := micb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (micb *MenuItemCreateBulk) Exec(ctx context.Context) error {
	_, err := micb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (micb *MenuItemCreateBulk) ExecX(ctx context.Context) {
	if err := micb.Exec(ctx); err != nil {
		panic(err)
	}
}
