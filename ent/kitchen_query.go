// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"
	"project/ent/brand"
	"project/ent/inventoryitem"
	"project/ent/kitchen"
	"project/ent/kitchenresource"
	"project/ent/predicate"
	"project/ent/staff"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// KitchenQuery is the builder for querying Kitchen entities.
type KitchenQuery struct {
	config
	ctx           *QueryContext
	order         []kitchen.OrderOption
	inters        []Interceptor
	predicates    []predicate.Kitchen
	withResources *KitchenResourceQuery
	withStaff     *StaffQuery
	withBrands    *BrandQuery
	withInventory *InventoryItemQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the KitchenQuery builder.
func (kq *KitchenQuery) Where(ps ...predicate.Kitchen) *KitchenQuery {
	kq.predicates = append(kq.predicates, ps...)
	return kq
}

// Limit the number of records to be returned by this query.
func (kq *KitchenQuery) Limit(limit int) *KitchenQuery {
	kq.ctx.Limit = &limit
	return kq
}

// Offset to start from.
func (kq *KitchenQuery) Offset(offset int) *KitchenQuery {
	kq.ctx.Offset = &offset
	return kq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (kq *KitchenQuery) Unique(unique bool) *KitchenQuery {
	kq.ctx.Unique = &unique
	return kq
}

// Order specifies how the records should be ordered.
func (kq *KitchenQuery) Order(o ...kitchen.OrderOption) *KitchenQuery {
	kq.order = append(kq.order, o...)
	return kq
}

// QueryResources chains the current query on the "resources" edge.
func (kq *KitchenQuery) QueryResources() *KitchenResourceQuery {
	query := (&KitchenResourceClient{config: kq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := kq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := kq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(kitchen.Table, kitchen.FieldID, selector),
			sqlgraph.To(kitchenresource.Table, kitchenresource.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, kitchen.ResourcesTable, kitchen.ResourcesColumn),
		)
		fromU = sqlgraph.SetNeighbors(kq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryStaff chains the current query on the "staff" edge.
func (kq *KitchenQuery) QueryStaff() *StaffQuery {
	query := (&StaffClient{config: kq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := kq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := kq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(kitchen.Table, kitchen.FieldID, selector),
			sqlgraph.To(staff.Table, staff.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, kitchen.StaffTable, kitchen.StaffColumn),
		)
		fromU = sqlgraph.SetNeighbors(kq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryBrands chains the current query on the "brands" edge.
func (kq *KitchenQuery) QueryBrands() *BrandQuery {
	query := (&BrandClient{config: kq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := kq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := kq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(kitchen.Table, kitchen.FieldID, selector),
			sqlgraph.To(brand.Table, brand.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, kitchen.BrandsTable, kitchen.BrandsColumn),
		)
		fromU = sqlgraph.SetNeighbors(kq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryInventory chains the current query on the "inventory" edge.
func (kq *KitchenQuery) QueryInventory() *InventoryItemQuery {
	query := (&InventoryItemClient{config: kq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := kq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := kq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(kitchen.Table, kitchen.FieldID, selector),
			sqlgraph.To(inventoryitem.Table, inventoryitem.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, kitchen.InventoryTable, kitchen.InventoryColumn),
		)
		fromU = sqlgraph.SetNeighbors(kq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Kitchen entity from the query.
// Returns a *NotFoundError when no Kitchen was found.
func (kq *KitchenQuery) First(ctx context.Context) (*Kitchen, error) {
	nodes, err := kq.Limit(1).All(setContextOp(ctx, kq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{kitchen.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (kq *KitchenQuery) FirstX(ctx context.Context) *Kitchen {
	node, err := kq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Kitchen ID from the query.
// Returns a *NotFoundError when no Kitchen ID was found.
func (kq *KitchenQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = kq.Limit(1).IDs(setContextOp(ctx, kq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{kitchen.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (kq *KitchenQuery) FirstIDX(ctx context.Context) int {
	id, err := kq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Kitchen entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Kitchen entity is found.
// Returns a *NotFoundError when no Kitchen entities are found.
func (kq *KitchenQuery) Only(ctx context.Context) (*Kitchen, error) {
	nodes, err := kq.Limit(2).All(setContextOp(ctx, kq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{kitchen.Label}
	default:
		return nil, &NotSingularError{kitchen.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (kq *KitchenQuery) OnlyX(ctx context.Context) *Kitchen {
	node, err := kq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Kitchen ID in the query.
// Returns a *NotSingularError when more than one Kitchen ID is found.
// Returns a *NotFoundError when no entities are found.
func (kq *KitchenQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = kq.Limit(2).IDs(setContextOp(ctx, kq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{kitchen.Label}
	default:
		err = &NotSingularError{kitchen.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (kq *KitchenQuery) OnlyIDX(ctx context.Context) int {
	id, err := kq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Kitchens.
func (kq *KitchenQuery) All(ctx context.Context) ([]*Kitchen, error) {
	ctx = setContextOp(ctx, kq.ctx, ent.OpQueryAll)
	if err := kq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Kitchen, *KitchenQuery]()
	return withInterceptors[[]*Kitchen](ctx, kq, qr, kq.inters)
}

// AllX is like All, but panics if an error occurs.
func (kq *KitchenQuery) AllX(ctx context.Context) []*Kitchen {
	nodes, err := kq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Kitchen IDs.
func (kq *KitchenQuery) IDs(ctx context.Context) (ids []int, err error) {
	if kq.ctx.Unique == nil && kq.path != nil {
		kq.Unique(true)
	}
	ctx = setContextOp(ctx, kq.ctx, ent.OpQueryIDs)
	if err = kq.Select(kitchen.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (kq *KitchenQuery) IDsX(ctx context.Context) []int {
	ids, err := kq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (kq *KitchenQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, kq.ctx, ent.OpQueryCount)
	if err := kq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, kq, querierCount[*KitchenQuery](), kq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (kq *KitchenQuery) CountX(ctx context.Context) int {
	count, err := kq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (kq *KitchenQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, kq.ctx, ent.OpQueryExist)
	switch _, err := kq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (kq *KitchenQuery) ExistX(ctx context.Context) bool {
	exist, err := kq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the KitchenQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (kq *KitchenQuery) Clone() *KitchenQuery {
	if kq == nil {
		return nil
	}
	return &KitchenQuery{
		config:        kq.config,
		ctx:           kq.ctx.Clone(),
		order:         append([]kitchen.OrderOption{}, kq.order...),
		inters:        append([]Interceptor{}, kq.inters...),
		predicates:    append([]predicate.Kitchen{}, kq.predicates...),
		withResources: kq.withResources.Clone(),
		withStaff:     kq.withStaff.Clone(),
		withBrands:    kq.withBrands.Clone(),
		withInventory: kq.withInventory.Clone(),
		// clone intermediate query.
		sql:  kq.sql.Clone(),
		path: kq.path,
	}
}

// WithResources tells the query-builder to eager-load the nodes that are connected to
// the "resources" edge. The optional arguments are used to configure the query builder of the edge.
func (kq *KitchenQuery) WithResources(opts ...func(*KitchenResourceQuery)) *KitchenQuery {
	query := (&KitchenResourceClient{config: kq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	kq.withResources = query
	return kq
}

// WithStaff tells the query-builder to eager-load the nodes that are connected to
// the "staff" edge. The optional arguments are used to configure the query builder of the edge.
func (kq *KitchenQuery) WithStaff(opts ...func(*StaffQuery)) *KitchenQuery {
	query := (&StaffClient{config: kq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	kq.withStaff = query
	return kq
}

// WithBrands tells the query-builder to eager-load the nodes that are connected to
// the "brands" edge. The optional arguments are used to configure the query builder of the edge.
func (kq *KitchenQuery) WithBrands(opts ...func(*BrandQuery)) *KitchenQuery {
	query := (&BrandClient{config: kq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	kq.withBrands = query
	return kq
}

// WithInventory tells the query-builder to eager-load the nodes that are connected to
// the "inventory" edge. The optional arguments are used to configure the query builder of the edge.
func (kq *KitchenQuery) WithInventory(opts ...func(*InventoryItemQuery)) *KitchenQuery {
	query := (&InventoryItemClient{config: kq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	kq.withInventory = query
	return kq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Kitchen.Query().
//		GroupBy(kitchen.FieldName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (kq *KitchenQuery) GroupBy(field string, fields ...string) *KitchenGroupBy {
	kq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &KitchenGroupBy{build: kq}
	grbuild.flds = &kq.ctx.Fields
	grbuild.label = kitchen.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//	}
//
//	client.Kitchen.Query().
//		Select(kitchen.FieldName).
//		Scan(ctx, &v)
func (kq *KitchenQuery) Select(fields ...string) *KitchenSelect {
	kq.ctx.Fields = append(kq.ctx.Fields, fields...)
	sbuild := &KitchenSelect{KitchenQuery: kq}
	sbuild.label = kitchen.Label
	sbuild.flds, sbuild.scan = &kq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a KitchenSelect configured with the given aggregations.
func (kq *KitchenQuery) Aggregate(fns ...AggregateFunc) *KitchenSelect {
	return kq.Select().Aggregate(fns...)
}

func (kq *KitchenQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range kq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, kq); err != nil {
				return err
			}
		}
	}
	for _, f := range kq.ctx.Fields {
		if !kitchen.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if kq.path != nil {
		prev, err := kq.path(ctx)
		if err != nil {
			return err
		}
		kq.sql = prev
	}
	return nil
}

func (kq *KitchenQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Kitchen, error) {
	var (
		nodes       = []*Kitchen{}
		_spec       = kq.querySpec()
		loadedTypes = [4]bool{
			kq.withResources != nil,
			kq.withStaff != nil,
			kq.withBrands != nil,
			kq.withInventory != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Kitchen).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Kitchen{config: kq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, kq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := kq.withResources; query != nil {
		if err := kq.loadResources(ctx, query, nodes,
			func(n *Kitchen) { n.Edges.Resources = []*KitchenResource{} },
			func(n *Kitchen, e *KitchenResource) { n.Edges.Resources = append(n.Edges.Resources, e) }); err != nil {
			return nil, err
		}
	}
	if query := kq.withStaff; query != nil {
		if err := kq.loadStaff(ctx, query, nodes,
			func(n *Kitchen) { n.Edges.Staff = []*Staff{} },
			func(n *Kitchen, e *Staff) { n.Edges.Staff = append(n.Edges.Staff, e) }); err != nil {
			return nil, err
		}
	}
	if query := kq.withBrands; query != nil {
		if err := kq.loadBrands(ctx, query, nodes,
			func(n *Kitchen) { n.Edges.Brands = []*Brand{} },
			func(n *Kitchen, e *Brand) { n.Edges.Brands = append(n.Edges.Brands, e) }); err != nil {
			return nil, err
		}
	}
	if query := kq.withInventory; query != nil {
		if err := kq.loadInventory(ctx, query, nodes,
			func(n *Kitchen) { n.Edges.Inventory = []*InventoryItem{} },
			func(n *Kitchen, e *InventoryItem) { n.Edges.Inventory = append(n.Edges.Inventory, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (kq *KitchenQuery) loadResources(ctx context.Context, query *KitchenResourceQuery, nodes []*Kitchen, init func(*Kitchen), assign func(*Kitchen, *KitchenResource)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Kitchen)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.KitchenResource(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(kitchen.ResourcesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.kitchen_resources
		if fk == nil {
			return fmt.Errorf(`foreign-key "kitchen_resources" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "kitchen_resources" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (kq *KitchenQuery) loadStaff(ctx context.Context, query *StaffQuery, nodes []*Kitchen, init func(*Kitchen), assign func(*Kitchen, *Staff)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Kitchen)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Staff(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(kitchen.StaffColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.kitchen_staff
		if fk == nil {
			return fmt.Errorf(`foreign-key "kitchen_staff" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "kitchen_staff" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (kq *KitchenQuery) loadBrands(ctx context.Context, query *BrandQuery, nodes []*Kitchen, init func(*Kitchen), assign func(*Kitchen, *Brand)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Kitchen)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Brand(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(kitchen.BrandsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.kitchen_brands
		if fk == nil {
			return fmt.Errorf(`foreign-key "kitchen_brands" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "kitchen_brands" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (kq *KitchenQuery) loadInventory(ctx context.Context, query *InventoryItemQuery, nodes []*Kitchen, init func(*Kitchen), assign func(*Kitchen, *InventoryItem)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Kitchen)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.InventoryItem(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(kitchen.InventoryColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.kitchen_inventory
		if fk == nil {
			return fmt.Errorf(`foreign-key "kitchen_inventory" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "kitchen_inventory" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (kq *KitchenQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := kq.querySpec()
	_spec.Node.Columns = kq.ctx.Fields
	if len(kq.ctx.Fields) > 0 {
		_spec.Unique = kq.ctx.Unique != nil && *kq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, kq.driver, _spec)
}

func (kq *KitchenQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(kitchen.Table, kitchen.Columns, sqlgraph.NewFieldSpec(kitchen.FieldID, field.TypeInt))
	_spec.From = kq.sql
	if unique := kq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if kq.path != nil {
		_spec.Unique = true
	}
	if fields := kq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, kitchen.FieldID)
		for i := range fields {
			if fields[i] != kitchen.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := kq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := kq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := kq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := kq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (kq *KitchenQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(kq.driver.Dialect())
	t1 := builder.Table(kitchen.Table)
	columns := kq.ctx.Fields
	if len(columns) == 0 {
		columns = kitchen.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if kq.sql != nil {
		selector = kq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if kq.ctx.Unique != nil && *kq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range kq.predicates {
		p(selector)
	}
	for _, p := range kq.order {
		p(selector)
	}
	if offset := kq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := kq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// KitchenGroupBy is the group-by builder for Kitchen entities.
type KitchenGroupBy struct {
	selector
	build *KitchenQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (kgb *KitchenGroupBy) Aggregate(fns ...AggregateFunc) *KitchenGroupBy {
	kgb.fns = append(kgb.fns, fns...)
	return kgb
}

// Scan applies the selector query and scans the result into the given value.
func (kgb *KitchenGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, kgb.build.ctx, ent.OpQueryGroupBy)
	if err := kgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*KitchenQuery, *KitchenGroupBy](ctx, kgb.build, kgb, kgb.build.inters, v)
}

func (kgb *KitchenGroupBy) sqlScan(ctx context.Context, root *KitchenQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(kgb.fns))
	for _, fn := range kgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*kgb.flds)+len(kgb.fns))
		for _, f := range *kgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*kgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := kgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// KitchenSelect is the builder for selecting fields of Kitchen entities.
type KitchenSelect struct {
	*KitchenQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ks *KitchenSelect) Aggregate(fns ...AggregateFunc) *KitchenSelect {
	ks.fns = append(ks.fns, fns...)
	return ks
}

// Scan applies the selector query and scans the result into the given value.
func (ks *KitchenSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ks.ctx, ent.OpQuerySelect)
	if err := ks.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*KitchenQuery, *KitchenSelect](ctx, ks.KitchenQuery, ks, ks.inters, v)
}

func (ks *KitchenSelect) sqlScan(ctx context.Context, root *KitchenQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ks.fns))
	for _, fn := range ks.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ks.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ks.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
