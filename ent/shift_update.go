// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"project/ent/predicate"
	"project/ent/resourceallocation"
	"project/ent/shift"
	"project/ent/staff"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ShiftUpdate is the builder for updating Shift entities.
type ShiftUpdate struct {
	config
	hooks    []Hook
	mutation *ShiftMutation
}

// Where appends a list predicates to the ShiftUpdate builder.
func (su *ShiftUpdate) Where(ps ...predicate.Shift) *ShiftUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetStartTime sets the "start_time" field.
func (su *ShiftUpdate) SetStartTime(t time.Time) *ShiftUpdate {
	su.mutation.SetStartTime(t)
	return su
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (su *ShiftUpdate) SetNillableStartTime(t *time.Time) *ShiftUpdate {
	if t != nil {
		su.SetStartTime(*t)
	}
	return su
}

// SetEndTime sets the "end_time" field.
func (su *ShiftUpdate) SetEndTime(t time.Time) *ShiftUpdate {
	su.mutation.SetEndTime(t)
	return su
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (su *ShiftUpdate) SetNillableEndTime(t *time.Time) *ShiftUpdate {
	if t != nil {
		su.SetEndTime(*t)
	}
	return su
}

// SetStaffID sets the "staff" edge to the Staff entity by ID.
func (su *ShiftUpdate) SetStaffID(id int) *ShiftUpdate {
	su.mutation.SetStaffID(id)
	return su
}

// SetStaff sets the "staff" edge to the Staff entity.
func (su *ShiftUpdate) SetStaff(s *Staff) *ShiftUpdate {
	return su.SetStaffID(s.ID)
}

// AddAllocationIDs adds the "allocations" edge to the ResourceAllocation entity by IDs.
func (su *ShiftUpdate) AddAllocationIDs(ids ...int) *ShiftUpdate {
	su.mutation.AddAllocationIDs(ids...)
	return su
}

// AddAllocations adds the "allocations" edges to the ResourceAllocation entity.
func (su *ShiftUpdate) AddAllocations(r ...*ResourceAllocation) *ShiftUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return su.AddAllocationIDs(ids...)
}

// Mutation returns the ShiftMutation object of the builder.
func (su *ShiftUpdate) Mutation() *ShiftMutation {
	return su.mutation
}

// ClearStaff clears the "staff" edge to the Staff entity.
func (su *ShiftUpdate) ClearStaff() *ShiftUpdate {
	su.mutation.ClearStaff()
	return su
}

// ClearAllocations clears all "allocations" edges to the ResourceAllocation entity.
func (su *ShiftUpdate) ClearAllocations() *ShiftUpdate {
	su.mutation.ClearAllocations()
	return su
}

// RemoveAllocationIDs removes the "allocations" edge to ResourceAllocation entities by IDs.
func (su *ShiftUpdate) RemoveAllocationIDs(ids ...int) *ShiftUpdate {
	su.mutation.RemoveAllocationIDs(ids...)
	return su
}

// RemoveAllocations removes "allocations" edges to ResourceAllocation entities.
func (su *ShiftUpdate) RemoveAllocations(r ...*ResourceAllocation) *ShiftUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return su.RemoveAllocationIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *ShiftUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *ShiftUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *ShiftUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *ShiftUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *ShiftUpdate) check() error {
	if su.mutation.StaffCleared() && len(su.mutation.StaffIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Shift.staff"`)
	}
	return nil
}

func (su *ShiftUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := su.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(shift.Table, shift.Columns, sqlgraph.NewFieldSpec(shift.FieldID, field.TypeInt))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.StartTime(); ok {
		_spec.SetField(shift.FieldStartTime, field.TypeTime, value)
	}
	if value, ok := su.mutation.EndTime(); ok {
		_spec.SetField(shift.FieldEndTime, field.TypeTime, value)
	}
	if su.mutation.StaffCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shift.StaffTable,
			Columns: []string{shift.StaffColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(staff.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.StaffIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shift.StaffTable,
			Columns: []string{shift.StaffColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(staff.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.AllocationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shift.AllocationsTable,
			Columns: []string{shift.AllocationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resourceallocation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedAllocationsIDs(); len(nodes) > 0 && !su.mutation.AllocationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shift.AllocationsTable,
			Columns: []string{shift.AllocationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resourceallocation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.AllocationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shift.AllocationsTable,
			Columns: []string{shift.AllocationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resourceallocation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{shift.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// ShiftUpdateOne is the builder for updating a single Shift entity.
type ShiftUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ShiftMutation
}

// SetStartTime sets the "start_time" field.
func (suo *ShiftUpdateOne) SetStartTime(t time.Time) *ShiftUpdateOne {
	suo.mutation.SetStartTime(t)
	return suo
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (suo *ShiftUpdateOne) SetNillableStartTime(t *time.Time) *ShiftUpdateOne {
	if t != nil {
		suo.SetStartTime(*t)
	}
	return suo
}

// SetEndTime sets the "end_time" field.
func (suo *ShiftUpdateOne) SetEndTime(t time.Time) *ShiftUpdateOne {
	suo.mutation.SetEndTime(t)
	return suo
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (suo *ShiftUpdateOne) SetNillableEndTime(t *time.Time) *ShiftUpdateOne {
	if t != nil {
		suo.SetEndTime(*t)
	}
	return suo
}

// SetStaffID sets the "staff" edge to the Staff entity by ID.
func (suo *ShiftUpdateOne) SetStaffID(id int) *ShiftUpdateOne {
	suo.mutation.SetStaffID(id)
	return suo
}

// SetStaff sets the "staff" edge to the Staff entity.
func (suo *ShiftUpdateOne) SetStaff(s *Staff) *ShiftUpdateOne {
	return suo.SetStaffID(s.ID)
}

// AddAllocationIDs adds the "allocations" edge to the ResourceAllocation entity by IDs.
func (suo *ShiftUpdateOne) AddAllocationIDs(ids ...int) *ShiftUpdateOne {
	suo.mutation.AddAllocationIDs(ids...)
	return suo
}

// AddAllocations adds the "allocations" edges to the ResourceAllocation entity.
func (suo *ShiftUpdateOne) AddAllocations(r ...*ResourceAllocation) *ShiftUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return suo.AddAllocationIDs(ids...)
}

// Mutation returns the ShiftMutation object of the builder.
func (suo *ShiftUpdateOne) Mutation() *ShiftMutation {
	return suo.mutation
}

// ClearStaff clears the "staff" edge to the Staff entity.
func (suo *ShiftUpdateOne) ClearStaff() *ShiftUpdateOne {
	suo.mutation.ClearStaff()
	return suo
}

// ClearAllocations clears all "allocations" edges to the ResourceAllocation entity.
func (suo *ShiftUpdateOne) ClearAllocations() *ShiftUpdateOne {
	suo.mutation.ClearAllocations()
	return suo
}

// RemoveAllocationIDs removes the "allocations" edge to ResourceAllocation entities by IDs.
func (suo *ShiftUpdateOne) RemoveAllocationIDs(ids ...int) *ShiftUpdateOne {
	suo.mutation.RemoveAllocationIDs(ids...)
	return suo
}

// RemoveAllocations removes "allocations" edges to ResourceAllocation entities.
func (suo *ShiftUpdateOne) RemoveAllocations(r ...*ResourceAllocation) *ShiftUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return suo.RemoveAllocationIDs(ids...)
}

// Where appends a list predicates to the ShiftUpdate builder.
func (suo *ShiftUpdateOne) Where(ps ...predicate.Shift) *ShiftUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *ShiftUpdateOne) Select(field string, fields ...string) *ShiftUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Shift entity.
func (suo *ShiftUpdateOne) Save(ctx context.Context) (*Shift, error) {
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *ShiftUpdateOne) SaveX(ctx context.Context) *Shift {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *ShiftUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *ShiftUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *ShiftUpdateOne) check() error {
	if suo.mutation.StaffCleared() && len(suo.mutation.StaffIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Shift.staff"`)
	}
	return nil
}

func (suo *ShiftUpdateOne) sqlSave(ctx context.Context) (_node *Shift, err error) {
	if err := suo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(shift.Table, shift.Columns, sqlgraph.NewFieldSpec(shift.FieldID, field.TypeInt))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Shift.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, shift.FieldID)
		for _, f := range fields {
			if !shift.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != shift.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.StartTime(); ok {
		_spec.SetField(shift.FieldStartTime, field.TypeTime, value)
	}
	if value, ok := suo.mutation.EndTime(); ok {
		_spec.SetField(shift.FieldEndTime, field.TypeTime, value)
	}
	if suo.mutation.StaffCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shift.StaffTable,
			Columns: []string{shift.StaffColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(staff.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.StaffIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shift.StaffTable,
			Columns: []string{shift.StaffColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(staff.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.AllocationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shift.AllocationsTable,
			Columns: []string{shift.AllocationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resourceallocation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedAllocationsIDs(); len(nodes) > 0 && !suo.mutation.AllocationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shift.AllocationsTable,
			Columns: []string{shift.AllocationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resourceallocation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.AllocationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shift.AllocationsTable,
			Columns: []string{shift.AllocationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resourceallocation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Shift{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{shift.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
