// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"project/ent/kitchenresource"
	"project/ent/order"
	"project/ent/resourceallocation"
	"project/ent/shift"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ResourceAllocation is the model entity for the ResourceAllocation schema.
type ResourceAllocation struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// StartTime holds the value of the "start_time" field.
	StartTime time.Time `json:"start_time,omitempty"`
	// EndTime holds the value of the "end_time" field.
	EndTime time.Time `json:"end_time,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ResourceAllocationQuery when eager-loading is set.
	Edges                        ResourceAllocationEdges `json:"edges"`
	kitchen_resource_allocations *int
	resource_allocation_order    *int
	shift_allocations            *int
	selectValues                 sql.SelectValues
}

// ResourceAllocationEdges holds the relations/edges for other nodes in the graph.
type ResourceAllocationEdges struct {
	// Resource holds the value of the resource edge.
	Resource *KitchenResource `json:"resource,omitempty"`
	// Order holds the value of the order edge.
	Order *Order `json:"order,omitempty"`
	// Shift holds the value of the shift edge.
	Shift *Shift `json:"shift,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// ResourceOrErr returns the Resource value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ResourceAllocationEdges) ResourceOrErr() (*KitchenResource, error) {
	if e.Resource != nil {
		return e.Resource, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: kitchenresource.Label}
	}
	return nil, &NotLoadedError{edge: "resource"}
}

// OrderOrErr returns the Order value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ResourceAllocationEdges) OrderOrErr() (*Order, error) {
	if e.Order != nil {
		return e.Order, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: order.Label}
	}
	return nil, &NotLoadedError{edge: "order"}
}

// ShiftOrErr returns the Shift value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ResourceAllocationEdges) ShiftOrErr() (*Shift, error) {
	if e.Shift != nil {
		return e.Shift, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: shift.Label}
	}
	return nil, &NotLoadedError{edge: "shift"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ResourceAllocation) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case resourceallocation.FieldID:
			values[i] = new(sql.NullInt64)
		case resourceallocation.FieldStatus:
			values[i] = new(sql.NullString)
		case resourceallocation.FieldStartTime, resourceallocation.FieldEndTime:
			values[i] = new(sql.NullTime)
		case resourceallocation.ForeignKeys[0]: // kitchen_resource_allocations
			values[i] = new(sql.NullInt64)
		case resourceallocation.ForeignKeys[1]: // resource_allocation_order
			values[i] = new(sql.NullInt64)
		case resourceallocation.ForeignKeys[2]: // shift_allocations
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ResourceAllocation fields.
func (ra *ResourceAllocation) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case resourceallocation.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ra.ID = int(value.Int64)
		case resourceallocation.FieldStartTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_time", values[i])
			} else if value.Valid {
				ra.StartTime = value.Time
			}
		case resourceallocation.FieldEndTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end_time", values[i])
			} else if value.Valid {
				ra.EndTime = value.Time
			}
		case resourceallocation.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				ra.Status = value.String
			}
		case resourceallocation.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field kitchen_resource_allocations", value)
			} else if value.Valid {
				ra.kitchen_resource_allocations = new(int)
				*ra.kitchen_resource_allocations = int(value.Int64)
			}
		case resourceallocation.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field resource_allocation_order", value)
			} else if value.Valid {
				ra.resource_allocation_order = new(int)
				*ra.resource_allocation_order = int(value.Int64)
			}
		case resourceallocation.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field shift_allocations", value)
			} else if value.Valid {
				ra.shift_allocations = new(int)
				*ra.shift_allocations = int(value.Int64)
			}
		default:
			ra.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ResourceAllocation.
// This includes values selected through modifiers, order, etc.
func (ra *ResourceAllocation) Value(name string) (ent.Value, error) {
	return ra.selectValues.Get(name)
}

// QueryResource queries the "resource" edge of the ResourceAllocation entity.
func (ra *ResourceAllocation) QueryResource() *KitchenResourceQuery {
	return NewResourceAllocationClient(ra.config).QueryResource(ra)
}

// QueryOrder queries the "order" edge of the ResourceAllocation entity.
func (ra *ResourceAllocation) QueryOrder() *OrderQuery {
	return NewResourceAllocationClient(ra.config).QueryOrder(ra)
}

// QueryShift queries the "shift" edge of the ResourceAllocation entity.
func (ra *ResourceAllocation) QueryShift() *ShiftQuery {
	return NewResourceAllocationClient(ra.config).QueryShift(ra)
}

// Update returns a builder for updating this ResourceAllocation.
// Note that you need to call ResourceAllocation.Unwrap() before calling this method if this ResourceAllocation
// was returned from a transaction, and the transaction was committed or rolled back.
func (ra *ResourceAllocation) Update() *ResourceAllocationUpdateOne {
	return NewResourceAllocationClient(ra.config).UpdateOne(ra)
}

// Unwrap unwraps the ResourceAllocation entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ra *ResourceAllocation) Unwrap() *ResourceAllocation {
	_tx, ok := ra.config.driver.(*txDriver)
	if !ok {
		panic("ent: ResourceAllocation is not a transactional entity")
	}
	ra.config.driver = _tx.drv
	return ra
}

// String implements the fmt.Stringer.
func (ra *ResourceAllocation) String() string {
	var builder strings.Builder
	builder.WriteString("ResourceAllocation(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ra.ID))
	builder.WriteString("start_time=")
	builder.WriteString(ra.StartTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("end_time=")
	builder.WriteString(ra.EndTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(ra.Status)
	builder.WriteByte(')')
	return builder.String()
}

// ResourceAllocations is a parsable slice of ResourceAllocation.
type ResourceAllocations []*ResourceAllocation
