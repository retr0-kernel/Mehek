// Code generated by ent, DO NOT EDIT.

package shift

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the shift type in the database.
	Label = "shift"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldStartTime holds the string denoting the start_time field in the database.
	FieldStartTime = "start_time"
	// FieldEndTime holds the string denoting the end_time field in the database.
	FieldEndTime = "end_time"
	// EdgeStaff holds the string denoting the staff edge name in mutations.
	EdgeStaff = "staff"
	// EdgeAllocations holds the string denoting the allocations edge name in mutations.
	EdgeAllocations = "allocations"
	// Table holds the table name of the shift in the database.
	Table = "shifts"
	// StaffTable is the table that holds the staff relation/edge.
	StaffTable = "shifts"
	// StaffInverseTable is the table name for the Staff entity.
	// It exists in this package in order to avoid circular dependency with the "staff" package.
	StaffInverseTable = "staffs"
	// StaffColumn is the table column denoting the staff relation/edge.
	StaffColumn = "staff_shifts"
	// AllocationsTable is the table that holds the allocations relation/edge.
	AllocationsTable = "resource_allocations"
	// AllocationsInverseTable is the table name for the ResourceAllocation entity.
	// It exists in this package in order to avoid circular dependency with the "resourceallocation" package.
	AllocationsInverseTable = "resource_allocations"
	// AllocationsColumn is the table column denoting the allocations relation/edge.
	AllocationsColumn = "shift_allocations"
)

// Columns holds all SQL columns for shift fields.
var Columns = []string{
	FieldID,
	FieldStartTime,
	FieldEndTime,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "shifts"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"staff_shifts",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Shift queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByStartTime orders the results by the start_time field.
func ByStartTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartTime, opts...).ToFunc()
}

// ByEndTime orders the results by the end_time field.
func ByEndTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEndTime, opts...).ToFunc()
}

// ByStaffField orders the results by staff field.
func ByStaffField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newStaffStep(), sql.OrderByField(field, opts...))
	}
}

// ByAllocationsCount orders the results by allocations count.
func ByAllocationsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAllocationsStep(), opts...)
	}
}

// ByAllocations orders the results by allocations terms.
func ByAllocations(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAllocationsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newStaffStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(StaffInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, StaffTable, StaffColumn),
	)
}
func newAllocationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AllocationsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AllocationsTable, AllocationsColumn),
	)
}
