// Code generated by ent, DO NOT EDIT.

package resourceallocation

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the resourceallocation type in the database.
	Label = "resource_allocation"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldStartTime holds the string denoting the start_time field in the database.
	FieldStartTime = "start_time"
	// FieldEndTime holds the string denoting the end_time field in the database.
	FieldEndTime = "end_time"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// EdgeResource holds the string denoting the resource edge name in mutations.
	EdgeResource = "resource"
	// EdgeOrder holds the string denoting the order edge name in mutations.
	EdgeOrder = "order"
	// EdgeShift holds the string denoting the shift edge name in mutations.
	EdgeShift = "shift"
	// Table holds the table name of the resourceallocation in the database.
	Table = "resource_allocations"
	// ResourceTable is the table that holds the resource relation/edge.
	ResourceTable = "resource_allocations"
	// ResourceInverseTable is the table name for the KitchenResource entity.
	// It exists in this package in order to avoid circular dependency with the "kitchenresource" package.
	ResourceInverseTable = "kitchen_resources"
	// ResourceColumn is the table column denoting the resource relation/edge.
	ResourceColumn = "kitchen_resource_allocations"
	// OrderTable is the table that holds the order relation/edge.
	OrderTable = "resource_allocations"
	// OrderInverseTable is the table name for the Order entity.
	// It exists in this package in order to avoid circular dependency with the "order" package.
	OrderInverseTable = "orders"
	// OrderColumn is the table column denoting the order relation/edge.
	OrderColumn = "resource_allocation_order"
	// ShiftTable is the table that holds the shift relation/edge.
	ShiftTable = "resource_allocations"
	// ShiftInverseTable is the table name for the Shift entity.
	// It exists in this package in order to avoid circular dependency with the "shift" package.
	ShiftInverseTable = "shifts"
	// ShiftColumn is the table column denoting the shift relation/edge.
	ShiftColumn = "shift_allocations"
)

// Columns holds all SQL columns for resourceallocation fields.
var Columns = []string{
	FieldID,
	FieldStartTime,
	FieldEndTime,
	FieldStatus,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "resource_allocations"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"kitchen_resource_allocations",
	"resource_allocation_order",
	"shift_allocations",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus string
)

// OrderOption defines the ordering options for the ResourceAllocation queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByStartTime orders the results by the start_time field.
func ByStartTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartTime, opts...).ToFunc()
}

// ByEndTime orders the results by the end_time field.
func ByEndTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEndTime, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByResourceField orders the results by resource field.
func ByResourceField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newResourceStep(), sql.OrderByField(field, opts...))
	}
}

// ByOrderField orders the results by order field.
func ByOrderField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOrderStep(), sql.OrderByField(field, opts...))
	}
}

// ByShiftField orders the results by shift field.
func ByShiftField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newShiftStep(), sql.OrderByField(field, opts...))
	}
}
func newResourceStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ResourceInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ResourceTable, ResourceColumn),
	)
}
func newOrderStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OrderInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, OrderTable, OrderColumn),
	)
}
func newShiftStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ShiftInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ShiftTable, ShiftColumn),
	)
}
