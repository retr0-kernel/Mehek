// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"project/ent/brand"
	"project/ent/kitchen"
	"project/ent/menu"
	"project/ent/order"
	"project/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BrandUpdate is the builder for updating Brand entities.
type BrandUpdate struct {
	config
	hooks    []Hook
	mutation *BrandMutation
}

// Where appends a list predicates to the BrandUpdate builder.
func (bu *BrandUpdate) Where(ps ...predicate.Brand) *BrandUpdate {
	bu.mutation.Where(ps...)
	return bu
}

// SetName sets the "name" field.
func (bu *BrandUpdate) SetName(s string) *BrandUpdate {
	bu.mutation.SetName(s)
	return bu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (bu *BrandUpdate) SetNillableName(s *string) *BrandUpdate {
	if s != nil {
		bu.SetName(*s)
	}
	return bu
}

// SetCuisineType sets the "cuisine_type" field.
func (bu *BrandUpdate) SetCuisineType(s string) *BrandUpdate {
	bu.mutation.SetCuisineType(s)
	return bu
}

// SetNillableCuisineType sets the "cuisine_type" field if the given value is not nil.
func (bu *BrandUpdate) SetNillableCuisineType(s *string) *BrandUpdate {
	if s != nil {
		bu.SetCuisineType(*s)
	}
	return bu
}

// SetLogoURL sets the "logo_url" field.
func (bu *BrandUpdate) SetLogoURL(s string) *BrandUpdate {
	bu.mutation.SetLogoURL(s)
	return bu
}

// SetNillableLogoURL sets the "logo_url" field if the given value is not nil.
func (bu *BrandUpdate) SetNillableLogoURL(s *string) *BrandUpdate {
	if s != nil {
		bu.SetLogoURL(*s)
	}
	return bu
}

// SetKitchenID sets the "kitchen" edge to the Kitchen entity by ID.
func (bu *BrandUpdate) SetKitchenID(id int) *BrandUpdate {
	bu.mutation.SetKitchenID(id)
	return bu
}

// SetKitchen sets the "kitchen" edge to the Kitchen entity.
func (bu *BrandUpdate) SetKitchen(k *Kitchen) *BrandUpdate {
	return bu.SetKitchenID(k.ID)
}

// AddMenuIDs adds the "menus" edge to the Menu entity by IDs.
func (bu *BrandUpdate) AddMenuIDs(ids ...int) *BrandUpdate {
	bu.mutation.AddMenuIDs(ids...)
	return bu
}

// AddMenus adds the "menus" edges to the Menu entity.
func (bu *BrandUpdate) AddMenus(m ...*Menu) *BrandUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return bu.AddMenuIDs(ids...)
}

// AddOrderIDs adds the "orders" edge to the Order entity by IDs.
func (bu *BrandUpdate) AddOrderIDs(ids ...int) *BrandUpdate {
	bu.mutation.AddOrderIDs(ids...)
	return bu
}

// AddOrders adds the "orders" edges to the Order entity.
func (bu *BrandUpdate) AddOrders(o ...*Order) *BrandUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return bu.AddOrderIDs(ids...)
}

// Mutation returns the BrandMutation object of the builder.
func (bu *BrandUpdate) Mutation() *BrandMutation {
	return bu.mutation
}

// ClearKitchen clears the "kitchen" edge to the Kitchen entity.
func (bu *BrandUpdate) ClearKitchen() *BrandUpdate {
	bu.mutation.ClearKitchen()
	return bu
}

// ClearMenus clears all "menus" edges to the Menu entity.
func (bu *BrandUpdate) ClearMenus() *BrandUpdate {
	bu.mutation.ClearMenus()
	return bu
}

// RemoveMenuIDs removes the "menus" edge to Menu entities by IDs.
func (bu *BrandUpdate) RemoveMenuIDs(ids ...int) *BrandUpdate {
	bu.mutation.RemoveMenuIDs(ids...)
	return bu
}

// RemoveMenus removes "menus" edges to Menu entities.
func (bu *BrandUpdate) RemoveMenus(m ...*Menu) *BrandUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return bu.RemoveMenuIDs(ids...)
}

// ClearOrders clears all "orders" edges to the Order entity.
func (bu *BrandUpdate) ClearOrders() *BrandUpdate {
	bu.mutation.ClearOrders()
	return bu
}

// RemoveOrderIDs removes the "orders" edge to Order entities by IDs.
func (bu *BrandUpdate) RemoveOrderIDs(ids ...int) *BrandUpdate {
	bu.mutation.RemoveOrderIDs(ids...)
	return bu
}

// RemoveOrders removes "orders" edges to Order entities.
func (bu *BrandUpdate) RemoveOrders(o ...*Order) *BrandUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return bu.RemoveOrderIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bu *BrandUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, bu.sqlSave, bu.mutation, bu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bu *BrandUpdate) SaveX(ctx context.Context) int {
	affected, err := bu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bu *BrandUpdate) Exec(ctx context.Context) error {
	_, err := bu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bu *BrandUpdate) ExecX(ctx context.Context) {
	if err := bu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bu *BrandUpdate) check() error {
	if v, ok := bu.mutation.Name(); ok {
		if err := brand.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Brand.name": %w`, err)}
		}
	}
	if bu.mutation.KitchenCleared() && len(bu.mutation.KitchenIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Brand.kitchen"`)
	}
	return nil
}

func (bu *BrandUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := bu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(brand.Table, brand.Columns, sqlgraph.NewFieldSpec(brand.FieldID, field.TypeInt))
	if ps := bu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bu.mutation.Name(); ok {
		_spec.SetField(brand.FieldName, field.TypeString, value)
	}
	if value, ok := bu.mutation.CuisineType(); ok {
		_spec.SetField(brand.FieldCuisineType, field.TypeString, value)
	}
	if value, ok := bu.mutation.LogoURL(); ok {
		_spec.SetField(brand.FieldLogoURL, field.TypeString, value)
	}
	if bu.mutation.KitchenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   brand.KitchenTable,
			Columns: []string{brand.KitchenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(kitchen.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.KitchenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   brand.KitchenTable,
			Columns: []string{brand.KitchenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(kitchen.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.MenusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   brand.MenusTable,
			Columns: []string{brand.MenusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.RemovedMenusIDs(); len(nodes) > 0 && !bu.mutation.MenusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   brand.MenusTable,
			Columns: []string{brand.MenusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.MenusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   brand.MenusTable,
			Columns: []string{brand.MenusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   brand.OrdersTable,
			Columns: []string{brand.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.RemovedOrdersIDs(); len(nodes) > 0 && !bu.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   brand.OrdersTable,
			Columns: []string{brand.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.OrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   brand.OrdersTable,
			Columns: []string{brand.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{brand.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bu.mutation.done = true
	return n, nil
}

// BrandUpdateOne is the builder for updating a single Brand entity.
type BrandUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BrandMutation
}

// SetName sets the "name" field.
func (buo *BrandUpdateOne) SetName(s string) *BrandUpdateOne {
	buo.mutation.SetName(s)
	return buo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (buo *BrandUpdateOne) SetNillableName(s *string) *BrandUpdateOne {
	if s != nil {
		buo.SetName(*s)
	}
	return buo
}

// SetCuisineType sets the "cuisine_type" field.
func (buo *BrandUpdateOne) SetCuisineType(s string) *BrandUpdateOne {
	buo.mutation.SetCuisineType(s)
	return buo
}

// SetNillableCuisineType sets the "cuisine_type" field if the given value is not nil.
func (buo *BrandUpdateOne) SetNillableCuisineType(s *string) *BrandUpdateOne {
	if s != nil {
		buo.SetCuisineType(*s)
	}
	return buo
}

// SetLogoURL sets the "logo_url" field.
func (buo *BrandUpdateOne) SetLogoURL(s string) *BrandUpdateOne {
	buo.mutation.SetLogoURL(s)
	return buo
}

// SetNillableLogoURL sets the "logo_url" field if the given value is not nil.
func (buo *BrandUpdateOne) SetNillableLogoURL(s *string) *BrandUpdateOne {
	if s != nil {
		buo.SetLogoURL(*s)
	}
	return buo
}

// SetKitchenID sets the "kitchen" edge to the Kitchen entity by ID.
func (buo *BrandUpdateOne) SetKitchenID(id int) *BrandUpdateOne {
	buo.mutation.SetKitchenID(id)
	return buo
}

// SetKitchen sets the "kitchen" edge to the Kitchen entity.
func (buo *BrandUpdateOne) SetKitchen(k *Kitchen) *BrandUpdateOne {
	return buo.SetKitchenID(k.ID)
}

// AddMenuIDs adds the "menus" edge to the Menu entity by IDs.
func (buo *BrandUpdateOne) AddMenuIDs(ids ...int) *BrandUpdateOne {
	buo.mutation.AddMenuIDs(ids...)
	return buo
}

// AddMenus adds the "menus" edges to the Menu entity.
func (buo *BrandUpdateOne) AddMenus(m ...*Menu) *BrandUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return buo.AddMenuIDs(ids...)
}

// AddOrderIDs adds the "orders" edge to the Order entity by IDs.
func (buo *BrandUpdateOne) AddOrderIDs(ids ...int) *BrandUpdateOne {
	buo.mutation.AddOrderIDs(ids...)
	return buo
}

// AddOrders adds the "orders" edges to the Order entity.
func (buo *BrandUpdateOne) AddOrders(o ...*Order) *BrandUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return buo.AddOrderIDs(ids...)
}

// Mutation returns the BrandMutation object of the builder.
func (buo *BrandUpdateOne) Mutation() *BrandMutation {
	return buo.mutation
}

// ClearKitchen clears the "kitchen" edge to the Kitchen entity.
func (buo *BrandUpdateOne) ClearKitchen() *BrandUpdateOne {
	buo.mutation.ClearKitchen()
	return buo
}

// ClearMenus clears all "menus" edges to the Menu entity.
func (buo *BrandUpdateOne) ClearMenus() *BrandUpdateOne {
	buo.mutation.ClearMenus()
	return buo
}

// RemoveMenuIDs removes the "menus" edge to Menu entities by IDs.
func (buo *BrandUpdateOne) RemoveMenuIDs(ids ...int) *BrandUpdateOne {
	buo.mutation.RemoveMenuIDs(ids...)
	return buo
}

// RemoveMenus removes "menus" edges to Menu entities.
func (buo *BrandUpdateOne) RemoveMenus(m ...*Menu) *BrandUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return buo.RemoveMenuIDs(ids...)
}

// ClearOrders clears all "orders" edges to the Order entity.
func (buo *BrandUpdateOne) ClearOrders() *BrandUpdateOne {
	buo.mutation.ClearOrders()
	return buo
}

// RemoveOrderIDs removes the "orders" edge to Order entities by IDs.
func (buo *BrandUpdateOne) RemoveOrderIDs(ids ...int) *BrandUpdateOne {
	buo.mutation.RemoveOrderIDs(ids...)
	return buo
}

// RemoveOrders removes "orders" edges to Order entities.
func (buo *BrandUpdateOne) RemoveOrders(o ...*Order) *BrandUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return buo.RemoveOrderIDs(ids...)
}

// Where appends a list predicates to the BrandUpdate builder.
func (buo *BrandUpdateOne) Where(ps ...predicate.Brand) *BrandUpdateOne {
	buo.mutation.Where(ps...)
	return buo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (buo *BrandUpdateOne) Select(field string, fields ...string) *BrandUpdateOne {
	buo.fields = append([]string{field}, fields...)
	return buo
}

// Save executes the query and returns the updated Brand entity.
func (buo *BrandUpdateOne) Save(ctx context.Context) (*Brand, error) {
	return withHooks(ctx, buo.sqlSave, buo.mutation, buo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (buo *BrandUpdateOne) SaveX(ctx context.Context) *Brand {
	node, err := buo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (buo *BrandUpdateOne) Exec(ctx context.Context) error {
	_, err := buo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buo *BrandUpdateOne) ExecX(ctx context.Context) {
	if err := buo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (buo *BrandUpdateOne) check() error {
	if v, ok := buo.mutation.Name(); ok {
		if err := brand.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Brand.name": %w`, err)}
		}
	}
	if buo.mutation.KitchenCleared() && len(buo.mutation.KitchenIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Brand.kitchen"`)
	}
	return nil
}

func (buo *BrandUpdateOne) sqlSave(ctx context.Context) (_node *Brand, err error) {
	if err := buo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(brand.Table, brand.Columns, sqlgraph.NewFieldSpec(brand.FieldID, field.TypeInt))
	id, ok := buo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Brand.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := buo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, brand.FieldID)
		for _, f := range fields {
			if !brand.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != brand.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := buo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := buo.mutation.Name(); ok {
		_spec.SetField(brand.FieldName, field.TypeString, value)
	}
	if value, ok := buo.mutation.CuisineType(); ok {
		_spec.SetField(brand.FieldCuisineType, field.TypeString, value)
	}
	if value, ok := buo.mutation.LogoURL(); ok {
		_spec.SetField(brand.FieldLogoURL, field.TypeString, value)
	}
	if buo.mutation.KitchenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   brand.KitchenTable,
			Columns: []string{brand.KitchenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(kitchen.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.KitchenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   brand.KitchenTable,
			Columns: []string{brand.KitchenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(kitchen.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.MenusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   brand.MenusTable,
			Columns: []string{brand.MenusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.RemovedMenusIDs(); len(nodes) > 0 && !buo.mutation.MenusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   brand.MenusTable,
			Columns: []string{brand.MenusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.MenusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   brand.MenusTable,
			Columns: []string{brand.MenusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   brand.OrdersTable,
			Columns: []string{brand.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.RemovedOrdersIDs(); len(nodes) > 0 && !buo.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   brand.OrdersTable,
			Columns: []string{brand.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.OrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   brand.OrdersTable,
			Columns: []string{brand.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Brand{config: buo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, buo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{brand.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	buo.mutation.done = true
	return _node, nil
}
