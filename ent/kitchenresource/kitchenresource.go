// Code generated by ent, DO NOT EDIT.

package kitchenresource

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the kitchenresource type in the database.
	Label = "kitchen_resource"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldCapacity holds the string denoting the capacity field in the database.
	FieldCapacity = "capacity"
	// FieldAvailable holds the string denoting the available field in the database.
	FieldAvailable = "available"
	// EdgeKitchen holds the string denoting the kitchen edge name in mutations.
	EdgeKitchen = "kitchen"
	// EdgeAllocations holds the string denoting the allocations edge name in mutations.
	EdgeAllocations = "allocations"
	// Table holds the table name of the kitchenresource in the database.
	Table = "kitchen_resources"
	// KitchenTable is the table that holds the kitchen relation/edge.
	KitchenTable = "kitchen_resources"
	// KitchenInverseTable is the table name for the Kitchen entity.
	// It exists in this package in order to avoid circular dependency with the "kitchen" package.
	KitchenInverseTable = "kitchens"
	// KitchenColumn is the table column denoting the kitchen relation/edge.
	KitchenColumn = "kitchen_resources"
	// AllocationsTable is the table that holds the allocations relation/edge.
	AllocationsTable = "resource_allocations"
	// AllocationsInverseTable is the table name for the ResourceAllocation entity.
	// It exists in this package in order to avoid circular dependency with the "resourceallocation" package.
	AllocationsInverseTable = "resource_allocations"
	// AllocationsColumn is the table column denoting the allocations relation/edge.
	AllocationsColumn = "kitchen_resource_allocations"
)

// Columns holds all SQL columns for kitchenresource fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldType,
	FieldCapacity,
	FieldAvailable,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "kitchen_resources"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"kitchen_resources",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// TypeValidator is a validator for the "type" field. It is called by the builders before save.
	TypeValidator func(string) error
	// CapacityValidator is a validator for the "capacity" field. It is called by the builders before save.
	CapacityValidator func(int) error
	// DefaultAvailable holds the default value on creation for the "available" field.
	DefaultAvailable bool
)

// OrderOption defines the ordering options for the KitchenResource queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByCapacity orders the results by the capacity field.
func ByCapacity(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCapacity, opts...).ToFunc()
}

// ByAvailable orders the results by the available field.
func ByAvailable(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAvailable, opts...).ToFunc()
}

// ByKitchenField orders the results by kitchen field.
func ByKitchenField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newKitchenStep(), sql.OrderByField(field, opts...))
	}
}

// ByAllocationsCount orders the results by allocations count.
func ByAllocationsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAllocationsStep(), opts...)
	}
}

// ByAllocations orders the results by allocations terms.
func ByAllocations(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAllocationsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newKitchenStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(KitchenInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, KitchenTable, KitchenColumn),
	)
}
func newAllocationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AllocationsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AllocationsTable, AllocationsColumn),
	)
}
