// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"project/ent/kitchen"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Kitchen is the model entity for the Kitchen schema.
type Kitchen struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Location holds the value of the "location" field.
	Location string `json:"location,omitempty"`
	// Capacity holds the value of the "capacity" field.
	Capacity int `json:"capacity,omitempty"`
	// OperatingHours holds the value of the "operating_hours" field.
	OperatingHours map[string][]string `json:"operating_hours,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the KitchenQuery when eager-loading is set.
	Edges        KitchenEdges `json:"edges"`
	selectValues sql.SelectValues
}

// KitchenEdges holds the relations/edges for other nodes in the graph.
type KitchenEdges struct {
	// Resources holds the value of the resources edge.
	Resources []*KitchenResource `json:"resources,omitempty"`
	// Staff holds the value of the staff edge.
	Staff []*Staff `json:"staff,omitempty"`
	// Brands holds the value of the brands edge.
	Brands []*Brand `json:"brands,omitempty"`
	// Inventory holds the value of the inventory edge.
	Inventory []*InventoryItem `json:"inventory,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// ResourcesOrErr returns the Resources value or an error if the edge
// was not loaded in eager-loading.
func (e KitchenEdges) ResourcesOrErr() ([]*KitchenResource, error) {
	if e.loadedTypes[0] {
		return e.Resources, nil
	}
	return nil, &NotLoadedError{edge: "resources"}
}

// StaffOrErr returns the Staff value or an error if the edge
// was not loaded in eager-loading.
func (e KitchenEdges) StaffOrErr() ([]*Staff, error) {
	if e.loadedTypes[1] {
		return e.Staff, nil
	}
	return nil, &NotLoadedError{edge: "staff"}
}

// BrandsOrErr returns the Brands value or an error if the edge
// was not loaded in eager-loading.
func (e KitchenEdges) BrandsOrErr() ([]*Brand, error) {
	if e.loadedTypes[2] {
		return e.Brands, nil
	}
	return nil, &NotLoadedError{edge: "brands"}
}

// InventoryOrErr returns the Inventory value or an error if the edge
// was not loaded in eager-loading.
func (e KitchenEdges) InventoryOrErr() ([]*InventoryItem, error) {
	if e.loadedTypes[3] {
		return e.Inventory, nil
	}
	return nil, &NotLoadedError{edge: "inventory"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Kitchen) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case kitchen.FieldOperatingHours:
			values[i] = new([]byte)
		case kitchen.FieldID, kitchen.FieldCapacity:
			values[i] = new(sql.NullInt64)
		case kitchen.FieldName, kitchen.FieldLocation:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Kitchen fields.
func (k *Kitchen) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case kitchen.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			k.ID = int(value.Int64)
		case kitchen.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				k.Name = value.String
			}
		case kitchen.FieldLocation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field location", values[i])
			} else if value.Valid {
				k.Location = value.String
			}
		case kitchen.FieldCapacity:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field capacity", values[i])
			} else if value.Valid {
				k.Capacity = int(value.Int64)
			}
		case kitchen.FieldOperatingHours:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field operating_hours", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &k.OperatingHours); err != nil {
					return fmt.Errorf("unmarshal field operating_hours: %w", err)
				}
			}
		default:
			k.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Kitchen.
// This includes values selected through modifiers, order, etc.
func (k *Kitchen) Value(name string) (ent.Value, error) {
	return k.selectValues.Get(name)
}

// QueryResources queries the "resources" edge of the Kitchen entity.
func (k *Kitchen) QueryResources() *KitchenResourceQuery {
	return NewKitchenClient(k.config).QueryResources(k)
}

// QueryStaff queries the "staff" edge of the Kitchen entity.
func (k *Kitchen) QueryStaff() *StaffQuery {
	return NewKitchenClient(k.config).QueryStaff(k)
}

// QueryBrands queries the "brands" edge of the Kitchen entity.
func (k *Kitchen) QueryBrands() *BrandQuery {
	return NewKitchenClient(k.config).QueryBrands(k)
}

// QueryInventory queries the "inventory" edge of the Kitchen entity.
func (k *Kitchen) QueryInventory() *InventoryItemQuery {
	return NewKitchenClient(k.config).QueryInventory(k)
}

// Update returns a builder for updating this Kitchen.
// Note that you need to call Kitchen.Unwrap() before calling this method if this Kitchen
// was returned from a transaction, and the transaction was committed or rolled back.
func (k *Kitchen) Update() *KitchenUpdateOne {
	return NewKitchenClient(k.config).UpdateOne(k)
}

// Unwrap unwraps the Kitchen entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (k *Kitchen) Unwrap() *Kitchen {
	_tx, ok := k.config.driver.(*txDriver)
	if !ok {
		panic("ent: Kitchen is not a transactional entity")
	}
	k.config.driver = _tx.drv
	return k
}

// String implements the fmt.Stringer.
func (k *Kitchen) String() string {
	var builder strings.Builder
	builder.WriteString("Kitchen(")
	builder.WriteString(fmt.Sprintf("id=%v, ", k.ID))
	builder.WriteString("name=")
	builder.WriteString(k.Name)
	builder.WriteString(", ")
	builder.WriteString("location=")
	builder.WriteString(k.Location)
	builder.WriteString(", ")
	builder.WriteString("capacity=")
	builder.WriteString(fmt.Sprintf("%v", k.Capacity))
	builder.WriteString(", ")
	builder.WriteString("operating_hours=")
	builder.WriteString(fmt.Sprintf("%v", k.OperatingHours))
	builder.WriteByte(')')
	return builder.String()
}

// Kitchens is a parsable slice of Kitchen.
type Kitchens []*Kitchen
