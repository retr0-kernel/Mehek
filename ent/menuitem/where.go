// Code generated by ent, DO NOT EDIT.

package menuitem

import (
	"project/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldEQ(FieldName, v))
}

// Price applies equality check predicate on the "price" field. It's identical to PriceEQ.
func Price(v float64) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldEQ(FieldPrice, v))
}

// PrepTime applies equality check predicate on the "prep_time" field. It's identical to PrepTimeEQ.
func PrepTime(v int) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldEQ(FieldPrepTime, v))
}

// EquipmentNeeded applies equality check predicate on the "equipment_needed" field. It's identical to EquipmentNeededEQ.
func EquipmentNeeded(v string) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldEQ(FieldEquipmentNeeded, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldContainsFold(FieldName, v))
}

// PriceEQ applies the EQ predicate on the "price" field.
func PriceEQ(v float64) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldEQ(FieldPrice, v))
}

// PriceNEQ applies the NEQ predicate on the "price" field.
func PriceNEQ(v float64) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldNEQ(FieldPrice, v))
}

// PriceIn applies the In predicate on the "price" field.
func PriceIn(vs ...float64) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldIn(FieldPrice, vs...))
}

// PriceNotIn applies the NotIn predicate on the "price" field.
func PriceNotIn(vs ...float64) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldNotIn(FieldPrice, vs...))
}

// PriceGT applies the GT predicate on the "price" field.
func PriceGT(v float64) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldGT(FieldPrice, v))
}

// PriceGTE applies the GTE predicate on the "price" field.
func PriceGTE(v float64) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldGTE(FieldPrice, v))
}

// PriceLT applies the LT predicate on the "price" field.
func PriceLT(v float64) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldLT(FieldPrice, v))
}

// PriceLTE applies the LTE predicate on the "price" field.
func PriceLTE(v float64) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldLTE(FieldPrice, v))
}

// PrepTimeEQ applies the EQ predicate on the "prep_time" field.
func PrepTimeEQ(v int) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldEQ(FieldPrepTime, v))
}

// PrepTimeNEQ applies the NEQ predicate on the "prep_time" field.
func PrepTimeNEQ(v int) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldNEQ(FieldPrepTime, v))
}

// PrepTimeIn applies the In predicate on the "prep_time" field.
func PrepTimeIn(vs ...int) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldIn(FieldPrepTime, vs...))
}

// PrepTimeNotIn applies the NotIn predicate on the "prep_time" field.
func PrepTimeNotIn(vs ...int) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldNotIn(FieldPrepTime, vs...))
}

// PrepTimeGT applies the GT predicate on the "prep_time" field.
func PrepTimeGT(v int) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldGT(FieldPrepTime, v))
}

// PrepTimeGTE applies the GTE predicate on the "prep_time" field.
func PrepTimeGTE(v int) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldGTE(FieldPrepTime, v))
}

// PrepTimeLT applies the LT predicate on the "prep_time" field.
func PrepTimeLT(v int) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldLT(FieldPrepTime, v))
}

// PrepTimeLTE applies the LTE predicate on the "prep_time" field.
func PrepTimeLTE(v int) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldLTE(FieldPrepTime, v))
}

// EquipmentNeededEQ applies the EQ predicate on the "equipment_needed" field.
func EquipmentNeededEQ(v string) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldEQ(FieldEquipmentNeeded, v))
}

// EquipmentNeededNEQ applies the NEQ predicate on the "equipment_needed" field.
func EquipmentNeededNEQ(v string) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldNEQ(FieldEquipmentNeeded, v))
}

// EquipmentNeededIn applies the In predicate on the "equipment_needed" field.
func EquipmentNeededIn(vs ...string) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldIn(FieldEquipmentNeeded, vs...))
}

// EquipmentNeededNotIn applies the NotIn predicate on the "equipment_needed" field.
func EquipmentNeededNotIn(vs ...string) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldNotIn(FieldEquipmentNeeded, vs...))
}

// EquipmentNeededGT applies the GT predicate on the "equipment_needed" field.
func EquipmentNeededGT(v string) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldGT(FieldEquipmentNeeded, v))
}

// EquipmentNeededGTE applies the GTE predicate on the "equipment_needed" field.
func EquipmentNeededGTE(v string) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldGTE(FieldEquipmentNeeded, v))
}

// EquipmentNeededLT applies the LT predicate on the "equipment_needed" field.
func EquipmentNeededLT(v string) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldLT(FieldEquipmentNeeded, v))
}

// EquipmentNeededLTE applies the LTE predicate on the "equipment_needed" field.
func EquipmentNeededLTE(v string) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldLTE(FieldEquipmentNeeded, v))
}

// EquipmentNeededContains applies the Contains predicate on the "equipment_needed" field.
func EquipmentNeededContains(v string) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldContains(FieldEquipmentNeeded, v))
}

// EquipmentNeededHasPrefix applies the HasPrefix predicate on the "equipment_needed" field.
func EquipmentNeededHasPrefix(v string) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldHasPrefix(FieldEquipmentNeeded, v))
}

// EquipmentNeededHasSuffix applies the HasSuffix predicate on the "equipment_needed" field.
func EquipmentNeededHasSuffix(v string) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldHasSuffix(FieldEquipmentNeeded, v))
}

// EquipmentNeededEqualFold applies the EqualFold predicate on the "equipment_needed" field.
func EquipmentNeededEqualFold(v string) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldEqualFold(FieldEquipmentNeeded, v))
}

// EquipmentNeededContainsFold applies the ContainsFold predicate on the "equipment_needed" field.
func EquipmentNeededContainsFold(v string) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldContainsFold(FieldEquipmentNeeded, v))
}

// HasMenu applies the HasEdge predicate on the "menu" edge.
func HasMenu() predicate.MenuItem {
	return predicate.MenuItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, MenuTable, MenuColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMenuWith applies the HasEdge predicate on the "menu" edge with a given conditions (other predicates).
func HasMenuWith(preds ...predicate.Menu) predicate.MenuItem {
	return predicate.MenuItem(func(s *sql.Selector) {
		step := newMenuStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasIngredients applies the HasEdge predicate on the "ingredients" edge.
func HasIngredients() predicate.MenuItem {
	return predicate.MenuItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, IngredientsTable, IngredientsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasIngredientsWith applies the HasEdge predicate on the "ingredients" edge with a given conditions (other predicates).
func HasIngredientsWith(preds ...predicate.Ingredient) predicate.MenuItem {
	return predicate.MenuItem(func(s *sql.Selector) {
		step := newIngredientsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrderItems applies the HasEdge predicate on the "order_items" edge.
func HasOrderItems() predicate.MenuItem {
	return predicate.MenuItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, OrderItemsTable, OrderItemsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrderItemsWith applies the HasEdge predicate on the "order_items" edge with a given conditions (other predicates).
func HasOrderItemsWith(preds ...predicate.OrderItem) predicate.MenuItem {
	return predicate.MenuItem(func(s *sql.Selector) {
		step := newOrderItemsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.MenuItem) predicate.MenuItem {
	return predicate.MenuItem(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.MenuItem) predicate.MenuItem {
	return predicate.MenuItem(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.MenuItem) predicate.MenuItem {
	return predicate.MenuItem(sql.NotPredicates(p))
}
