// Code generated by ent, DO NOT EDIT.

package menuitem

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the menuitem type in the database.
	Label = "menu_item"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldPrice holds the string denoting the price field in the database.
	FieldPrice = "price"
	// FieldPrepTime holds the string denoting the prep_time field in the database.
	FieldPrepTime = "prep_time"
	// FieldEquipmentNeeded holds the string denoting the equipment_needed field in the database.
	FieldEquipmentNeeded = "equipment_needed"
	// EdgeMenu holds the string denoting the menu edge name in mutations.
	EdgeMenu = "menu"
	// EdgeIngredients holds the string denoting the ingredients edge name in mutations.
	EdgeIngredients = "ingredients"
	// EdgeOrderItems holds the string denoting the order_items edge name in mutations.
	EdgeOrderItems = "order_items"
	// Table holds the table name of the menuitem in the database.
	Table = "menu_items"
	// MenuTable is the table that holds the menu relation/edge.
	MenuTable = "menu_items"
	// MenuInverseTable is the table name for the Menu entity.
	// It exists in this package in order to avoid circular dependency with the "menu" package.
	MenuInverseTable = "menus"
	// MenuColumn is the table column denoting the menu relation/edge.
	MenuColumn = "menu_items"
	// IngredientsTable is the table that holds the ingredients relation/edge. The primary key declared below.
	IngredientsTable = "menu_item_ingredients"
	// IngredientsInverseTable is the table name for the Ingredient entity.
	// It exists in this package in order to avoid circular dependency with the "ingredient" package.
	IngredientsInverseTable = "ingredients"
	// OrderItemsTable is the table that holds the order_items relation/edge.
	OrderItemsTable = "order_items"
	// OrderItemsInverseTable is the table name for the OrderItem entity.
	// It exists in this package in order to avoid circular dependency with the "orderitem" package.
	OrderItemsInverseTable = "order_items"
	// OrderItemsColumn is the table column denoting the order_items relation/edge.
	OrderItemsColumn = "order_item_menu_item"
)

// Columns holds all SQL columns for menuitem fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldPrice,
	FieldPrepTime,
	FieldEquipmentNeeded,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "menu_items"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"menu_items",
}

var (
	// IngredientsPrimaryKey and IngredientsColumn2 are the table columns denoting the
	// primary key for the ingredients relation (M2M).
	IngredientsPrimaryKey = []string{"menu_item_id", "ingredient_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// PriceValidator is a validator for the "price" field. It is called by the builders before save.
	PriceValidator func(float64) error
	// PrepTimeValidator is a validator for the "prep_time" field. It is called by the builders before save.
	PrepTimeValidator func(int) error
)

// OrderOption defines the ordering options for the MenuItem queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByPrice orders the results by the price field.
func ByPrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPrice, opts...).ToFunc()
}

// ByPrepTime orders the results by the prep_time field.
func ByPrepTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPrepTime, opts...).ToFunc()
}

// ByEquipmentNeeded orders the results by the equipment_needed field.
func ByEquipmentNeeded(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEquipmentNeeded, opts...).ToFunc()
}

// ByMenuField orders the results by menu field.
func ByMenuField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMenuStep(), sql.OrderByField(field, opts...))
	}
}

// ByIngredientsCount orders the results by ingredients count.
func ByIngredientsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newIngredientsStep(), opts...)
	}
}

// ByIngredients orders the results by ingredients terms.
func ByIngredients(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newIngredientsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByOrderItemsCount orders the results by order_items count.
func ByOrderItemsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOrderItemsStep(), opts...)
	}
}

// ByOrderItems orders the results by order_items terms.
func ByOrderItems(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOrderItemsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newMenuStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MenuInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, MenuTable, MenuColumn),
	)
}
func newIngredientsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(IngredientsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, IngredientsTable, IngredientsPrimaryKey...),
	)
}
func newOrderItemsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OrderItemsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, OrderItemsTable, OrderItemsColumn),
	)
}
