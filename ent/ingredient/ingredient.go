// Code generated by ent, DO NOT EDIT.

package ingredient

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the ingredient type in the database.
	Label = "ingredient"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldUnit holds the string denoting the unit field in the database.
	FieldUnit = "unit"
	// FieldCostPerUnit holds the string denoting the cost_per_unit field in the database.
	FieldCostPerUnit = "cost_per_unit"
	// EdgeMenuItems holds the string denoting the menu_items edge name in mutations.
	EdgeMenuItems = "menu_items"
	// EdgeInventoryItems holds the string denoting the inventory_items edge name in mutations.
	EdgeInventoryItems = "inventory_items"
	// Table holds the table name of the ingredient in the database.
	Table = "ingredients"
	// MenuItemsTable is the table that holds the menu_items relation/edge. The primary key declared below.
	MenuItemsTable = "menu_item_ingredients"
	// MenuItemsInverseTable is the table name for the MenuItem entity.
	// It exists in this package in order to avoid circular dependency with the "menuitem" package.
	MenuItemsInverseTable = "menu_items"
	// InventoryItemsTable is the table that holds the inventory_items relation/edge.
	InventoryItemsTable = "inventory_items"
	// InventoryItemsInverseTable is the table name for the InventoryItem entity.
	// It exists in this package in order to avoid circular dependency with the "inventoryitem" package.
	InventoryItemsInverseTable = "inventory_items"
	// InventoryItemsColumn is the table column denoting the inventory_items relation/edge.
	InventoryItemsColumn = "inventory_item_ingredient"
)

// Columns holds all SQL columns for ingredient fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldUnit,
	FieldCostPerUnit,
}

var (
	// MenuItemsPrimaryKey and MenuItemsColumn2 are the table columns denoting the
	// primary key for the menu_items relation (M2M).
	MenuItemsPrimaryKey = []string{"menu_item_id", "ingredient_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// UnitValidator is a validator for the "unit" field. It is called by the builders before save.
	UnitValidator func(string) error
	// CostPerUnitValidator is a validator for the "cost_per_unit" field. It is called by the builders before save.
	CostPerUnitValidator func(float64) error
)

// OrderOption defines the ordering options for the Ingredient queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByUnit orders the results by the unit field.
func ByUnit(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUnit, opts...).ToFunc()
}

// ByCostPerUnit orders the results by the cost_per_unit field.
func ByCostPerUnit(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCostPerUnit, opts...).ToFunc()
}

// ByMenuItemsCount orders the results by menu_items count.
func ByMenuItemsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMenuItemsStep(), opts...)
	}
}

// ByMenuItems orders the results by menu_items terms.
func ByMenuItems(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMenuItemsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByInventoryItemsCount orders the results by inventory_items count.
func ByInventoryItemsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newInventoryItemsStep(), opts...)
	}
}

// ByInventoryItems orders the results by inventory_items terms.
func ByInventoryItems(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newInventoryItemsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newMenuItemsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MenuItemsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, MenuItemsTable, MenuItemsPrimaryKey...),
	)
}
func newInventoryItemsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(InventoryItemsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, InventoryItemsTable, InventoryItemsColumn),
	)
}
