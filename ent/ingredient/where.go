// Code generated by ent, DO NOT EDIT.

package ingredient

import (
	"project/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Ingredient {
	return predicate.Ingredient(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Ingredient {
	return predicate.Ingredient(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Ingredient {
	return predicate.Ingredient(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Ingredient {
	return predicate.Ingredient(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Ingredient {
	return predicate.Ingredient(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Ingredient {
	return predicate.Ingredient(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Ingredient {
	return predicate.Ingredient(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Ingredient {
	return predicate.Ingredient(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Ingredient {
	return predicate.Ingredient(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Ingredient {
	return predicate.Ingredient(sql.FieldEQ(FieldName, v))
}

// Unit applies equality check predicate on the "unit" field. It's identical to UnitEQ.
func Unit(v string) predicate.Ingredient {
	return predicate.Ingredient(sql.FieldEQ(FieldUnit, v))
}

// CostPerUnit applies equality check predicate on the "cost_per_unit" field. It's identical to CostPerUnitEQ.
func CostPerUnit(v float64) predicate.Ingredient {
	return predicate.Ingredient(sql.FieldEQ(FieldCostPerUnit, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Ingredient {
	return predicate.Ingredient(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Ingredient {
	return predicate.Ingredient(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Ingredient {
	return predicate.Ingredient(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Ingredient {
	return predicate.Ingredient(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Ingredient {
	return predicate.Ingredient(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Ingredient {
	return predicate.Ingredient(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Ingredient {
	return predicate.Ingredient(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Ingredient {
	return predicate.Ingredient(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Ingredient {
	return predicate.Ingredient(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Ingredient {
	return predicate.Ingredient(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Ingredient {
	return predicate.Ingredient(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Ingredient {
	return predicate.Ingredient(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Ingredient {
	return predicate.Ingredient(sql.FieldContainsFold(FieldName, v))
}

// UnitEQ applies the EQ predicate on the "unit" field.
func UnitEQ(v string) predicate.Ingredient {
	return predicate.Ingredient(sql.FieldEQ(FieldUnit, v))
}

// UnitNEQ applies the NEQ predicate on the "unit" field.
func UnitNEQ(v string) predicate.Ingredient {
	return predicate.Ingredient(sql.FieldNEQ(FieldUnit, v))
}

// UnitIn applies the In predicate on the "unit" field.
func UnitIn(vs ...string) predicate.Ingredient {
	return predicate.Ingredient(sql.FieldIn(FieldUnit, vs...))
}

// UnitNotIn applies the NotIn predicate on the "unit" field.
func UnitNotIn(vs ...string) predicate.Ingredient {
	return predicate.Ingredient(sql.FieldNotIn(FieldUnit, vs...))
}

// UnitGT applies the GT predicate on the "unit" field.
func UnitGT(v string) predicate.Ingredient {
	return predicate.Ingredient(sql.FieldGT(FieldUnit, v))
}

// UnitGTE applies the GTE predicate on the "unit" field.
func UnitGTE(v string) predicate.Ingredient {
	return predicate.Ingredient(sql.FieldGTE(FieldUnit, v))
}

// UnitLT applies the LT predicate on the "unit" field.
func UnitLT(v string) predicate.Ingredient {
	return predicate.Ingredient(sql.FieldLT(FieldUnit, v))
}

// UnitLTE applies the LTE predicate on the "unit" field.
func UnitLTE(v string) predicate.Ingredient {
	return predicate.Ingredient(sql.FieldLTE(FieldUnit, v))
}

// UnitContains applies the Contains predicate on the "unit" field.
func UnitContains(v string) predicate.Ingredient {
	return predicate.Ingredient(sql.FieldContains(FieldUnit, v))
}

// UnitHasPrefix applies the HasPrefix predicate on the "unit" field.
func UnitHasPrefix(v string) predicate.Ingredient {
	return predicate.Ingredient(sql.FieldHasPrefix(FieldUnit, v))
}

// UnitHasSuffix applies the HasSuffix predicate on the "unit" field.
func UnitHasSuffix(v string) predicate.Ingredient {
	return predicate.Ingredient(sql.FieldHasSuffix(FieldUnit, v))
}

// UnitEqualFold applies the EqualFold predicate on the "unit" field.
func UnitEqualFold(v string) predicate.Ingredient {
	return predicate.Ingredient(sql.FieldEqualFold(FieldUnit, v))
}

// UnitContainsFold applies the ContainsFold predicate on the "unit" field.
func UnitContainsFold(v string) predicate.Ingredient {
	return predicate.Ingredient(sql.FieldContainsFold(FieldUnit, v))
}

// CostPerUnitEQ applies the EQ predicate on the "cost_per_unit" field.
func CostPerUnitEQ(v float64) predicate.Ingredient {
	return predicate.Ingredient(sql.FieldEQ(FieldCostPerUnit, v))
}

// CostPerUnitNEQ applies the NEQ predicate on the "cost_per_unit" field.
func CostPerUnitNEQ(v float64) predicate.Ingredient {
	return predicate.Ingredient(sql.FieldNEQ(FieldCostPerUnit, v))
}

// CostPerUnitIn applies the In predicate on the "cost_per_unit" field.
func CostPerUnitIn(vs ...float64) predicate.Ingredient {
	return predicate.Ingredient(sql.FieldIn(FieldCostPerUnit, vs...))
}

// CostPerUnitNotIn applies the NotIn predicate on the "cost_per_unit" field.
func CostPerUnitNotIn(vs ...float64) predicate.Ingredient {
	return predicate.Ingredient(sql.FieldNotIn(FieldCostPerUnit, vs...))
}

// CostPerUnitGT applies the GT predicate on the "cost_per_unit" field.
func CostPerUnitGT(v float64) predicate.Ingredient {
	return predicate.Ingredient(sql.FieldGT(FieldCostPerUnit, v))
}

// CostPerUnitGTE applies the GTE predicate on the "cost_per_unit" field.
func CostPerUnitGTE(v float64) predicate.Ingredient {
	return predicate.Ingredient(sql.FieldGTE(FieldCostPerUnit, v))
}

// CostPerUnitLT applies the LT predicate on the "cost_per_unit" field.
func CostPerUnitLT(v float64) predicate.Ingredient {
	return predicate.Ingredient(sql.FieldLT(FieldCostPerUnit, v))
}

// CostPerUnitLTE applies the LTE predicate on the "cost_per_unit" field.
func CostPerUnitLTE(v float64) predicate.Ingredient {
	return predicate.Ingredient(sql.FieldLTE(FieldCostPerUnit, v))
}

// HasMenuItems applies the HasEdge predicate on the "menu_items" edge.
func HasMenuItems() predicate.Ingredient {
	return predicate.Ingredient(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, MenuItemsTable, MenuItemsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMenuItemsWith applies the HasEdge predicate on the "menu_items" edge with a given conditions (other predicates).
func HasMenuItemsWith(preds ...predicate.MenuItem) predicate.Ingredient {
	return predicate.Ingredient(func(s *sql.Selector) {
		step := newMenuItemsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasInventoryItems applies the HasEdge predicate on the "inventory_items" edge.
func HasInventoryItems() predicate.Ingredient {
	return predicate.Ingredient(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, InventoryItemsTable, InventoryItemsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasInventoryItemsWith applies the HasEdge predicate on the "inventory_items" edge with a given conditions (other predicates).
func HasInventoryItemsWith(preds ...predicate.InventoryItem) predicate.Ingredient {
	return predicate.Ingredient(func(s *sql.Selector) {
		step := newInventoryItemsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Ingredient) predicate.Ingredient {
	return predicate.Ingredient(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Ingredient) predicate.Ingredient {
	return predicate.Ingredient(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Ingredient) predicate.Ingredient {
	return predicate.Ingredient(sql.NotPredicates(p))
}
