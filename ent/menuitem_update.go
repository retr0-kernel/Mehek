// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"project/ent/ingredient"
	"project/ent/menu"
	"project/ent/menuitem"
	"project/ent/orderitem"
	"project/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MenuItemUpdate is the builder for updating MenuItem entities.
type MenuItemUpdate struct {
	config
	hooks    []Hook
	mutation *MenuItemMutation
}

// Where appends a list predicates to the MenuItemUpdate builder.
func (miu *MenuItemUpdate) Where(ps ...predicate.MenuItem) *MenuItemUpdate {
	miu.mutation.Where(ps...)
	return miu
}

// SetName sets the "name" field.
func (miu *MenuItemUpdate) SetName(s string) *MenuItemUpdate {
	miu.mutation.SetName(s)
	return miu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (miu *MenuItemUpdate) SetNillableName(s *string) *MenuItemUpdate {
	if s != nil {
		miu.SetName(*s)
	}
	return miu
}

// SetPrice sets the "price" field.
func (miu *MenuItemUpdate) SetPrice(f float64) *MenuItemUpdate {
	miu.mutation.ResetPrice()
	miu.mutation.SetPrice(f)
	return miu
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (miu *MenuItemUpdate) SetNillablePrice(f *float64) *MenuItemUpdate {
	if f != nil {
		miu.SetPrice(*f)
	}
	return miu
}

// AddPrice adds f to the "price" field.
func (miu *MenuItemUpdate) AddPrice(f float64) *MenuItemUpdate {
	miu.mutation.AddPrice(f)
	return miu
}

// SetPrepTime sets the "prep_time" field.
func (miu *MenuItemUpdate) SetPrepTime(i int) *MenuItemUpdate {
	miu.mutation.ResetPrepTime()
	miu.mutation.SetPrepTime(i)
	return miu
}

// SetNillablePrepTime sets the "prep_time" field if the given value is not nil.
func (miu *MenuItemUpdate) SetNillablePrepTime(i *int) *MenuItemUpdate {
	if i != nil {
		miu.SetPrepTime(*i)
	}
	return miu
}

// AddPrepTime adds i to the "prep_time" field.
func (miu *MenuItemUpdate) AddPrepTime(i int) *MenuItemUpdate {
	miu.mutation.AddPrepTime(i)
	return miu
}

// SetEquipmentNeeded sets the "equipment_needed" field.
func (miu *MenuItemUpdate) SetEquipmentNeeded(s string) *MenuItemUpdate {
	miu.mutation.SetEquipmentNeeded(s)
	return miu
}

// SetNillableEquipmentNeeded sets the "equipment_needed" field if the given value is not nil.
func (miu *MenuItemUpdate) SetNillableEquipmentNeeded(s *string) *MenuItemUpdate {
	if s != nil {
		miu.SetEquipmentNeeded(*s)
	}
	return miu
}

// SetMenuID sets the "menu" edge to the Menu entity by ID.
func (miu *MenuItemUpdate) SetMenuID(id int) *MenuItemUpdate {
	miu.mutation.SetMenuID(id)
	return miu
}

// SetMenu sets the "menu" edge to the Menu entity.
func (miu *MenuItemUpdate) SetMenu(m *Menu) *MenuItemUpdate {
	return miu.SetMenuID(m.ID)
}

// AddIngredientIDs adds the "ingredients" edge to the Ingredient entity by IDs.
func (miu *MenuItemUpdate) AddIngredientIDs(ids ...int) *MenuItemUpdate {
	miu.mutation.AddIngredientIDs(ids...)
	return miu
}

// AddIngredients adds the "ingredients" edges to the Ingredient entity.
func (miu *MenuItemUpdate) AddIngredients(i ...*Ingredient) *MenuItemUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return miu.AddIngredientIDs(ids...)
}

// AddOrderItemIDs adds the "order_items" edge to the OrderItem entity by IDs.
func (miu *MenuItemUpdate) AddOrderItemIDs(ids ...int) *MenuItemUpdate {
	miu.mutation.AddOrderItemIDs(ids...)
	return miu
}

// AddOrderItems adds the "order_items" edges to the OrderItem entity.
func (miu *MenuItemUpdate) AddOrderItems(o ...*OrderItem) *MenuItemUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return miu.AddOrderItemIDs(ids...)
}

// Mutation returns the MenuItemMutation object of the builder.
func (miu *MenuItemUpdate) Mutation() *MenuItemMutation {
	return miu.mutation
}

// ClearMenu clears the "menu" edge to the Menu entity.
func (miu *MenuItemUpdate) ClearMenu() *MenuItemUpdate {
	miu.mutation.ClearMenu()
	return miu
}

// ClearIngredients clears all "ingredients" edges to the Ingredient entity.
func (miu *MenuItemUpdate) ClearIngredients() *MenuItemUpdate {
	miu.mutation.ClearIngredients()
	return miu
}

// RemoveIngredientIDs removes the "ingredients" edge to Ingredient entities by IDs.
func (miu *MenuItemUpdate) RemoveIngredientIDs(ids ...int) *MenuItemUpdate {
	miu.mutation.RemoveIngredientIDs(ids...)
	return miu
}

// RemoveIngredients removes "ingredients" edges to Ingredient entities.
func (miu *MenuItemUpdate) RemoveIngredients(i ...*Ingredient) *MenuItemUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return miu.RemoveIngredientIDs(ids...)
}

// ClearOrderItems clears all "order_items" edges to the OrderItem entity.
func (miu *MenuItemUpdate) ClearOrderItems() *MenuItemUpdate {
	miu.mutation.ClearOrderItems()
	return miu
}

// RemoveOrderItemIDs removes the "order_items" edge to OrderItem entities by IDs.
func (miu *MenuItemUpdate) RemoveOrderItemIDs(ids ...int) *MenuItemUpdate {
	miu.mutation.RemoveOrderItemIDs(ids...)
	return miu
}

// RemoveOrderItems removes "order_items" edges to OrderItem entities.
func (miu *MenuItemUpdate) RemoveOrderItems(o ...*OrderItem) *MenuItemUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return miu.RemoveOrderItemIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (miu *MenuItemUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, miu.sqlSave, miu.mutation, miu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (miu *MenuItemUpdate) SaveX(ctx context.Context) int {
	affected, err := miu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (miu *MenuItemUpdate) Exec(ctx context.Context) error {
	_, err := miu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (miu *MenuItemUpdate) ExecX(ctx context.Context) {
	if err := miu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (miu *MenuItemUpdate) check() error {
	if v, ok := miu.mutation.Name(); ok {
		if err := menuitem.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "MenuItem.name": %w`, err)}
		}
	}
	if v, ok := miu.mutation.Price(); ok {
		if err := menuitem.PriceValidator(v); err != nil {
			return &ValidationError{Name: "price", err: fmt.Errorf(`ent: validator failed for field "MenuItem.price": %w`, err)}
		}
	}
	if v, ok := miu.mutation.PrepTime(); ok {
		if err := menuitem.PrepTimeValidator(v); err != nil {
			return &ValidationError{Name: "prep_time", err: fmt.Errorf(`ent: validator failed for field "MenuItem.prep_time": %w`, err)}
		}
	}
	if miu.mutation.MenuCleared() && len(miu.mutation.MenuIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "MenuItem.menu"`)
	}
	return nil
}

func (miu *MenuItemUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := miu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(menuitem.Table, menuitem.Columns, sqlgraph.NewFieldSpec(menuitem.FieldID, field.TypeInt))
	if ps := miu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := miu.mutation.Name(); ok {
		_spec.SetField(menuitem.FieldName, field.TypeString, value)
	}
	if value, ok := miu.mutation.Price(); ok {
		_spec.SetField(menuitem.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := miu.mutation.AddedPrice(); ok {
		_spec.AddField(menuitem.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := miu.mutation.PrepTime(); ok {
		_spec.SetField(menuitem.FieldPrepTime, field.TypeInt, value)
	}
	if value, ok := miu.mutation.AddedPrepTime(); ok {
		_spec.AddField(menuitem.FieldPrepTime, field.TypeInt, value)
	}
	if value, ok := miu.mutation.EquipmentNeeded(); ok {
		_spec.SetField(menuitem.FieldEquipmentNeeded, field.TypeString, value)
	}
	if miu.mutation.MenuCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   menuitem.MenuTable,
			Columns: []string{menuitem.MenuColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := miu.mutation.MenuIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   menuitem.MenuTable,
			Columns: []string{menuitem.MenuColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if miu.mutation.IngredientsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   menuitem.IngredientsTable,
			Columns: menuitem.IngredientsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ingredient.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := miu.mutation.RemovedIngredientsIDs(); len(nodes) > 0 && !miu.mutation.IngredientsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   menuitem.IngredientsTable,
			Columns: menuitem.IngredientsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ingredient.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := miu.mutation.IngredientsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   menuitem.IngredientsTable,
			Columns: menuitem.IngredientsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ingredient.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if miu.mutation.OrderItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   menuitem.OrderItemsTable,
			Columns: []string{menuitem.OrderItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderitem.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := miu.mutation.RemovedOrderItemsIDs(); len(nodes) > 0 && !miu.mutation.OrderItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   menuitem.OrderItemsTable,
			Columns: []string{menuitem.OrderItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := miu.mutation.OrderItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   menuitem.OrderItemsTable,
			Columns: []string{menuitem.OrderItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, miu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{menuitem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	miu.mutation.done = true
	return n, nil
}

// MenuItemUpdateOne is the builder for updating a single MenuItem entity.
type MenuItemUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MenuItemMutation
}

// SetName sets the "name" field.
func (miuo *MenuItemUpdateOne) SetName(s string) *MenuItemUpdateOne {
	miuo.mutation.SetName(s)
	return miuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (miuo *MenuItemUpdateOne) SetNillableName(s *string) *MenuItemUpdateOne {
	if s != nil {
		miuo.SetName(*s)
	}
	return miuo
}

// SetPrice sets the "price" field.
func (miuo *MenuItemUpdateOne) SetPrice(f float64) *MenuItemUpdateOne {
	miuo.mutation.ResetPrice()
	miuo.mutation.SetPrice(f)
	return miuo
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (miuo *MenuItemUpdateOne) SetNillablePrice(f *float64) *MenuItemUpdateOne {
	if f != nil {
		miuo.SetPrice(*f)
	}
	return miuo
}

// AddPrice adds f to the "price" field.
func (miuo *MenuItemUpdateOne) AddPrice(f float64) *MenuItemUpdateOne {
	miuo.mutation.AddPrice(f)
	return miuo
}

// SetPrepTime sets the "prep_time" field.
func (miuo *MenuItemUpdateOne) SetPrepTime(i int) *MenuItemUpdateOne {
	miuo.mutation.ResetPrepTime()
	miuo.mutation.SetPrepTime(i)
	return miuo
}

// SetNillablePrepTime sets the "prep_time" field if the given value is not nil.
func (miuo *MenuItemUpdateOne) SetNillablePrepTime(i *int) *MenuItemUpdateOne {
	if i != nil {
		miuo.SetPrepTime(*i)
	}
	return miuo
}

// AddPrepTime adds i to the "prep_time" field.
func (miuo *MenuItemUpdateOne) AddPrepTime(i int) *MenuItemUpdateOne {
	miuo.mutation.AddPrepTime(i)
	return miuo
}

// SetEquipmentNeeded sets the "equipment_needed" field.
func (miuo *MenuItemUpdateOne) SetEquipmentNeeded(s string) *MenuItemUpdateOne {
	miuo.mutation.SetEquipmentNeeded(s)
	return miuo
}

// SetNillableEquipmentNeeded sets the "equipment_needed" field if the given value is not nil.
func (miuo *MenuItemUpdateOne) SetNillableEquipmentNeeded(s *string) *MenuItemUpdateOne {
	if s != nil {
		miuo.SetEquipmentNeeded(*s)
	}
	return miuo
}

// SetMenuID sets the "menu" edge to the Menu entity by ID.
func (miuo *MenuItemUpdateOne) SetMenuID(id int) *MenuItemUpdateOne {
	miuo.mutation.SetMenuID(id)
	return miuo
}

// SetMenu sets the "menu" edge to the Menu entity.
func (miuo *MenuItemUpdateOne) SetMenu(m *Menu) *MenuItemUpdateOne {
	return miuo.SetMenuID(m.ID)
}

// AddIngredientIDs adds the "ingredients" edge to the Ingredient entity by IDs.
func (miuo *MenuItemUpdateOne) AddIngredientIDs(ids ...int) *MenuItemUpdateOne {
	miuo.mutation.AddIngredientIDs(ids...)
	return miuo
}

// AddIngredients adds the "ingredients" edges to the Ingredient entity.
func (miuo *MenuItemUpdateOne) AddIngredients(i ...*Ingredient) *MenuItemUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return miuo.AddIngredientIDs(ids...)
}

// AddOrderItemIDs adds the "order_items" edge to the OrderItem entity by IDs.
func (miuo *MenuItemUpdateOne) AddOrderItemIDs(ids ...int) *MenuItemUpdateOne {
	miuo.mutation.AddOrderItemIDs(ids...)
	return miuo
}

// AddOrderItems adds the "order_items" edges to the OrderItem entity.
func (miuo *MenuItemUpdateOne) AddOrderItems(o ...*OrderItem) *MenuItemUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return miuo.AddOrderItemIDs(ids...)
}

// Mutation returns the MenuItemMutation object of the builder.
func (miuo *MenuItemUpdateOne) Mutation() *MenuItemMutation {
	return miuo.mutation
}

// ClearMenu clears the "menu" edge to the Menu entity.
func (miuo *MenuItemUpdateOne) ClearMenu() *MenuItemUpdateOne {
	miuo.mutation.ClearMenu()
	return miuo
}

// ClearIngredients clears all "ingredients" edges to the Ingredient entity.
func (miuo *MenuItemUpdateOne) ClearIngredients() *MenuItemUpdateOne {
	miuo.mutation.ClearIngredients()
	return miuo
}

// RemoveIngredientIDs removes the "ingredients" edge to Ingredient entities by IDs.
func (miuo *MenuItemUpdateOne) RemoveIngredientIDs(ids ...int) *MenuItemUpdateOne {
	miuo.mutation.RemoveIngredientIDs(ids...)
	return miuo
}

// RemoveIngredients removes "ingredients" edges to Ingredient entities.
func (miuo *MenuItemUpdateOne) RemoveIngredients(i ...*Ingredient) *MenuItemUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return miuo.RemoveIngredientIDs(ids...)
}

// ClearOrderItems clears all "order_items" edges to the OrderItem entity.
func (miuo *MenuItemUpdateOne) ClearOrderItems() *MenuItemUpdateOne {
	miuo.mutation.ClearOrderItems()
	return miuo
}

// RemoveOrderItemIDs removes the "order_items" edge to OrderItem entities by IDs.
func (miuo *MenuItemUpdateOne) RemoveOrderItemIDs(ids ...int) *MenuItemUpdateOne {
	miuo.mutation.RemoveOrderItemIDs(ids...)
	return miuo
}

// RemoveOrderItems removes "order_items" edges to OrderItem entities.
func (miuo *MenuItemUpdateOne) RemoveOrderItems(o ...*OrderItem) *MenuItemUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return miuo.RemoveOrderItemIDs(ids...)
}

// Where appends a list predicates to the MenuItemUpdate builder.
func (miuo *MenuItemUpdateOne) Where(ps ...predicate.MenuItem) *MenuItemUpdateOne {
	miuo.mutation.Where(ps...)
	return miuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (miuo *MenuItemUpdateOne) Select(field string, fields ...string) *MenuItemUpdateOne {
	miuo.fields = append([]string{field}, fields...)
	return miuo
}

// Save executes the query and returns the updated MenuItem entity.
func (miuo *MenuItemUpdateOne) Save(ctx context.Context) (*MenuItem, error) {
	return withHooks(ctx, miuo.sqlSave, miuo.mutation, miuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (miuo *MenuItemUpdateOne) SaveX(ctx context.Context) *MenuItem {
	node, err := miuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (miuo *MenuItemUpdateOne) Exec(ctx context.Context) error {
	_, err := miuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (miuo *MenuItemUpdateOne) ExecX(ctx context.Context) {
	if err := miuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (miuo *MenuItemUpdateOne) check() error {
	if v, ok := miuo.mutation.Name(); ok {
		if err := menuitem.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "MenuItem.name": %w`, err)}
		}
	}
	if v, ok := miuo.mutation.Price(); ok {
		if err := menuitem.PriceValidator(v); err != nil {
			return &ValidationError{Name: "price", err: fmt.Errorf(`ent: validator failed for field "MenuItem.price": %w`, err)}
		}
	}
	if v, ok := miuo.mutation.PrepTime(); ok {
		if err := menuitem.PrepTimeValidator(v); err != nil {
			return &ValidationError{Name: "prep_time", err: fmt.Errorf(`ent: validator failed for field "MenuItem.prep_time": %w`, err)}
		}
	}
	if miuo.mutation.MenuCleared() && len(miuo.mutation.MenuIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "MenuItem.menu"`)
	}
	return nil
}

func (miuo *MenuItemUpdateOne) sqlSave(ctx context.Context) (_node *MenuItem, err error) {
	if err := miuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(menuitem.Table, menuitem.Columns, sqlgraph.NewFieldSpec(menuitem.FieldID, field.TypeInt))
	id, ok := miuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MenuItem.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := miuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, menuitem.FieldID)
		for _, f := range fields {
			if !menuitem.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != menuitem.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := miuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := miuo.mutation.Name(); ok {
		_spec.SetField(menuitem.FieldName, field.TypeString, value)
	}
	if value, ok := miuo.mutation.Price(); ok {
		_spec.SetField(menuitem.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := miuo.mutation.AddedPrice(); ok {
		_spec.AddField(menuitem.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := miuo.mutation.PrepTime(); ok {
		_spec.SetField(menuitem.FieldPrepTime, field.TypeInt, value)
	}
	if value, ok := miuo.mutation.AddedPrepTime(); ok {
		_spec.AddField(menuitem.FieldPrepTime, field.TypeInt, value)
	}
	if value, ok := miuo.mutation.EquipmentNeeded(); ok {
		_spec.SetField(menuitem.FieldEquipmentNeeded, field.TypeString, value)
	}
	if miuo.mutation.MenuCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   menuitem.MenuTable,
			Columns: []string{menuitem.MenuColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := miuo.mutation.MenuIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   menuitem.MenuTable,
			Columns: []string{menuitem.MenuColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if miuo.mutation.IngredientsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   menuitem.IngredientsTable,
			Columns: menuitem.IngredientsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ingredient.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := miuo.mutation.RemovedIngredientsIDs(); len(nodes) > 0 && !miuo.mutation.IngredientsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   menuitem.IngredientsTable,
			Columns: menuitem.IngredientsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ingredient.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := miuo.mutation.IngredientsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   menuitem.IngredientsTable,
			Columns: menuitem.IngredientsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ingredient.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if miuo.mutation.OrderItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   menuitem.OrderItemsTable,
			Columns: []string{menuitem.OrderItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderitem.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := miuo.mutation.RemovedOrderItemsIDs(); len(nodes) > 0 && !miuo.mutation.OrderItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   menuitem.OrderItemsTable,
			Columns: []string{menuitem.OrderItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := miuo.mutation.OrderItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   menuitem.OrderItemsTable,
			Columns: []string{menuitem.OrderItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &MenuItem{config: miuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, miuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{menuitem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	miuo.mutation.done = true
	return _node, nil
}
