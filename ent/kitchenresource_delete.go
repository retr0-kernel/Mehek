// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"project/ent/kitchenresource"
	"project/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// KitchenResourceDelete is the builder for deleting a KitchenResource entity.
type KitchenResourceDelete struct {
	config
	hooks    []Hook
	mutation *KitchenResourceMutation
}

// Where appends a list predicates to the KitchenResourceDelete builder.
func (krd *KitchenResourceDelete) Where(ps ...predicate.KitchenResource) *KitchenResourceDelete {
	krd.mutation.Where(ps...)
	return krd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (krd *KitchenResourceDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, krd.sqlExec, krd.mutation, krd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (krd *KitchenResourceDelete) ExecX(ctx context.Context) int {
	n, err := krd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (krd *KitchenResourceDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(kitchenresource.Table, sqlgraph.NewFieldSpec(kitchenresource.FieldID, field.TypeInt))
	if ps := krd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, krd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	krd.mutation.done = true
	return affected, err
}

// KitchenResourceDeleteOne is the builder for deleting a single KitchenResource entity.
type KitchenResourceDeleteOne struct {
	krd *KitchenResourceDelete
}

// Where appends a list predicates to the KitchenResourceDelete builder.
func (krdo *KitchenResourceDeleteOne) Where(ps ...predicate.KitchenResource) *KitchenResourceDeleteOne {
	krdo.krd.mutation.Where(ps...)
	return krdo
}

// Exec executes the deletion query.
func (krdo *KitchenResourceDeleteOne) Exec(ctx context.Context) error {
	n, err := krdo.krd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{kitchenresource.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (krdo *KitchenResourceDeleteOne) ExecX(ctx context.Context) {
	if err := krdo.Exec(ctx); err != nil {
		panic(err)
	}
}
