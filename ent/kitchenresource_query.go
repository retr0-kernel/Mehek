// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"
	"project/ent/kitchen"
	"project/ent/kitchenresource"
	"project/ent/predicate"
	"project/ent/resourceallocation"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// KitchenResourceQuery is the builder for querying KitchenResource entities.
type KitchenResourceQuery struct {
	config
	ctx             *QueryContext
	order           []kitchenresource.OrderOption
	inters          []Interceptor
	predicates      []predicate.KitchenResource
	withKitchen     *KitchenQuery
	withAllocations *ResourceAllocationQuery
	withFKs         bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the KitchenResourceQuery builder.
func (krq *KitchenResourceQuery) Where(ps ...predicate.KitchenResource) *KitchenResourceQuery {
	krq.predicates = append(krq.predicates, ps...)
	return krq
}

// Limit the number of records to be returned by this query.
func (krq *KitchenResourceQuery) Limit(limit int) *KitchenResourceQuery {
	krq.ctx.Limit = &limit
	return krq
}

// Offset to start from.
func (krq *KitchenResourceQuery) Offset(offset int) *KitchenResourceQuery {
	krq.ctx.Offset = &offset
	return krq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (krq *KitchenResourceQuery) Unique(unique bool) *KitchenResourceQuery {
	krq.ctx.Unique = &unique
	return krq
}

// Order specifies how the records should be ordered.
func (krq *KitchenResourceQuery) Order(o ...kitchenresource.OrderOption) *KitchenResourceQuery {
	krq.order = append(krq.order, o...)
	return krq
}

// QueryKitchen chains the current query on the "kitchen" edge.
func (krq *KitchenResourceQuery) QueryKitchen() *KitchenQuery {
	query := (&KitchenClient{config: krq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := krq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := krq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(kitchenresource.Table, kitchenresource.FieldID, selector),
			sqlgraph.To(kitchen.Table, kitchen.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, kitchenresource.KitchenTable, kitchenresource.KitchenColumn),
		)
		fromU = sqlgraph.SetNeighbors(krq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAllocations chains the current query on the "allocations" edge.
func (krq *KitchenResourceQuery) QueryAllocations() *ResourceAllocationQuery {
	query := (&ResourceAllocationClient{config: krq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := krq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := krq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(kitchenresource.Table, kitchenresource.FieldID, selector),
			sqlgraph.To(resourceallocation.Table, resourceallocation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, kitchenresource.AllocationsTable, kitchenresource.AllocationsColumn),
		)
		fromU = sqlgraph.SetNeighbors(krq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first KitchenResource entity from the query.
// Returns a *NotFoundError when no KitchenResource was found.
func (krq *KitchenResourceQuery) First(ctx context.Context) (*KitchenResource, error) {
	nodes, err := krq.Limit(1).All(setContextOp(ctx, krq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{kitchenresource.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (krq *KitchenResourceQuery) FirstX(ctx context.Context) *KitchenResource {
	node, err := krq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first KitchenResource ID from the query.
// Returns a *NotFoundError when no KitchenResource ID was found.
func (krq *KitchenResourceQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = krq.Limit(1).IDs(setContextOp(ctx, krq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{kitchenresource.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (krq *KitchenResourceQuery) FirstIDX(ctx context.Context) int {
	id, err := krq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single KitchenResource entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one KitchenResource entity is found.
// Returns a *NotFoundError when no KitchenResource entities are found.
func (krq *KitchenResourceQuery) Only(ctx context.Context) (*KitchenResource, error) {
	nodes, err := krq.Limit(2).All(setContextOp(ctx, krq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{kitchenresource.Label}
	default:
		return nil, &NotSingularError{kitchenresource.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (krq *KitchenResourceQuery) OnlyX(ctx context.Context) *KitchenResource {
	node, err := krq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only KitchenResource ID in the query.
// Returns a *NotSingularError when more than one KitchenResource ID is found.
// Returns a *NotFoundError when no entities are found.
func (krq *KitchenResourceQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = krq.Limit(2).IDs(setContextOp(ctx, krq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{kitchenresource.Label}
	default:
		err = &NotSingularError{kitchenresource.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (krq *KitchenResourceQuery) OnlyIDX(ctx context.Context) int {
	id, err := krq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of KitchenResources.
func (krq *KitchenResourceQuery) All(ctx context.Context) ([]*KitchenResource, error) {
	ctx = setContextOp(ctx, krq.ctx, ent.OpQueryAll)
	if err := krq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*KitchenResource, *KitchenResourceQuery]()
	return withInterceptors[[]*KitchenResource](ctx, krq, qr, krq.inters)
}

// AllX is like All, but panics if an error occurs.
func (krq *KitchenResourceQuery) AllX(ctx context.Context) []*KitchenResource {
	nodes, err := krq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of KitchenResource IDs.
func (krq *KitchenResourceQuery) IDs(ctx context.Context) (ids []int, err error) {
	if krq.ctx.Unique == nil && krq.path != nil {
		krq.Unique(true)
	}
	ctx = setContextOp(ctx, krq.ctx, ent.OpQueryIDs)
	if err = krq.Select(kitchenresource.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (krq *KitchenResourceQuery) IDsX(ctx context.Context) []int {
	ids, err := krq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (krq *KitchenResourceQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, krq.ctx, ent.OpQueryCount)
	if err := krq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, krq, querierCount[*KitchenResourceQuery](), krq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (krq *KitchenResourceQuery) CountX(ctx context.Context) int {
	count, err := krq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (krq *KitchenResourceQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, krq.ctx, ent.OpQueryExist)
	switch _, err := krq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (krq *KitchenResourceQuery) ExistX(ctx context.Context) bool {
	exist, err := krq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the KitchenResourceQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (krq *KitchenResourceQuery) Clone() *KitchenResourceQuery {
	if krq == nil {
		return nil
	}
	return &KitchenResourceQuery{
		config:          krq.config,
		ctx:             krq.ctx.Clone(),
		order:           append([]kitchenresource.OrderOption{}, krq.order...),
		inters:          append([]Interceptor{}, krq.inters...),
		predicates:      append([]predicate.KitchenResource{}, krq.predicates...),
		withKitchen:     krq.withKitchen.Clone(),
		withAllocations: krq.withAllocations.Clone(),
		// clone intermediate query.
		sql:  krq.sql.Clone(),
		path: krq.path,
	}
}

// WithKitchen tells the query-builder to eager-load the nodes that are connected to
// the "kitchen" edge. The optional arguments are used to configure the query builder of the edge.
func (krq *KitchenResourceQuery) WithKitchen(opts ...func(*KitchenQuery)) *KitchenResourceQuery {
	query := (&KitchenClient{config: krq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	krq.withKitchen = query
	return krq
}

// WithAllocations tells the query-builder to eager-load the nodes that are connected to
// the "allocations" edge. The optional arguments are used to configure the query builder of the edge.
func (krq *KitchenResourceQuery) WithAllocations(opts ...func(*ResourceAllocationQuery)) *KitchenResourceQuery {
	query := (&ResourceAllocationClient{config: krq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	krq.withAllocations = query
	return krq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.KitchenResource.Query().
//		GroupBy(kitchenresource.FieldName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (krq *KitchenResourceQuery) GroupBy(field string, fields ...string) *KitchenResourceGroupBy {
	krq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &KitchenResourceGroupBy{build: krq}
	grbuild.flds = &krq.ctx.Fields
	grbuild.label = kitchenresource.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//	}
//
//	client.KitchenResource.Query().
//		Select(kitchenresource.FieldName).
//		Scan(ctx, &v)
func (krq *KitchenResourceQuery) Select(fields ...string) *KitchenResourceSelect {
	krq.ctx.Fields = append(krq.ctx.Fields, fields...)
	sbuild := &KitchenResourceSelect{KitchenResourceQuery: krq}
	sbuild.label = kitchenresource.Label
	sbuild.flds, sbuild.scan = &krq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a KitchenResourceSelect configured with the given aggregations.
func (krq *KitchenResourceQuery) Aggregate(fns ...AggregateFunc) *KitchenResourceSelect {
	return krq.Select().Aggregate(fns...)
}

func (krq *KitchenResourceQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range krq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, krq); err != nil {
				return err
			}
		}
	}
	for _, f := range krq.ctx.Fields {
		if !kitchenresource.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if krq.path != nil {
		prev, err := krq.path(ctx)
		if err != nil {
			return err
		}
		krq.sql = prev
	}
	return nil
}

func (krq *KitchenResourceQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*KitchenResource, error) {
	var (
		nodes       = []*KitchenResource{}
		withFKs     = krq.withFKs
		_spec       = krq.querySpec()
		loadedTypes = [2]bool{
			krq.withKitchen != nil,
			krq.withAllocations != nil,
		}
	)
	if krq.withKitchen != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, kitchenresource.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*KitchenResource).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &KitchenResource{config: krq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, krq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := krq.withKitchen; query != nil {
		if err := krq.loadKitchen(ctx, query, nodes, nil,
			func(n *KitchenResource, e *Kitchen) { n.Edges.Kitchen = e }); err != nil {
			return nil, err
		}
	}
	if query := krq.withAllocations; query != nil {
		if err := krq.loadAllocations(ctx, query, nodes,
			func(n *KitchenResource) { n.Edges.Allocations = []*ResourceAllocation{} },
			func(n *KitchenResource, e *ResourceAllocation) { n.Edges.Allocations = append(n.Edges.Allocations, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (krq *KitchenResourceQuery) loadKitchen(ctx context.Context, query *KitchenQuery, nodes []*KitchenResource, init func(*KitchenResource), assign func(*KitchenResource, *Kitchen)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*KitchenResource)
	for i := range nodes {
		if nodes[i].kitchen_resources == nil {
			continue
		}
		fk := *nodes[i].kitchen_resources
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(kitchen.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "kitchen_resources" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (krq *KitchenResourceQuery) loadAllocations(ctx context.Context, query *ResourceAllocationQuery, nodes []*KitchenResource, init func(*KitchenResource), assign func(*KitchenResource, *ResourceAllocation)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*KitchenResource)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.ResourceAllocation(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(kitchenresource.AllocationsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.kitchen_resource_allocations
		if fk == nil {
			return fmt.Errorf(`foreign-key "kitchen_resource_allocations" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "kitchen_resource_allocations" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (krq *KitchenResourceQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := krq.querySpec()
	_spec.Node.Columns = krq.ctx.Fields
	if len(krq.ctx.Fields) > 0 {
		_spec.Unique = krq.ctx.Unique != nil && *krq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, krq.driver, _spec)
}

func (krq *KitchenResourceQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(kitchenresource.Table, kitchenresource.Columns, sqlgraph.NewFieldSpec(kitchenresource.FieldID, field.TypeInt))
	_spec.From = krq.sql
	if unique := krq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if krq.path != nil {
		_spec.Unique = true
	}
	if fields := krq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, kitchenresource.FieldID)
		for i := range fields {
			if fields[i] != kitchenresource.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := krq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := krq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := krq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := krq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (krq *KitchenResourceQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(krq.driver.Dialect())
	t1 := builder.Table(kitchenresource.Table)
	columns := krq.ctx.Fields
	if len(columns) == 0 {
		columns = kitchenresource.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if krq.sql != nil {
		selector = krq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if krq.ctx.Unique != nil && *krq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range krq.predicates {
		p(selector)
	}
	for _, p := range krq.order {
		p(selector)
	}
	if offset := krq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := krq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// KitchenResourceGroupBy is the group-by builder for KitchenResource entities.
type KitchenResourceGroupBy struct {
	selector
	build *KitchenResourceQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (krgb *KitchenResourceGroupBy) Aggregate(fns ...AggregateFunc) *KitchenResourceGroupBy {
	krgb.fns = append(krgb.fns, fns...)
	return krgb
}

// Scan applies the selector query and scans the result into the given value.
func (krgb *KitchenResourceGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, krgb.build.ctx, ent.OpQueryGroupBy)
	if err := krgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*KitchenResourceQuery, *KitchenResourceGroupBy](ctx, krgb.build, krgb, krgb.build.inters, v)
}

func (krgb *KitchenResourceGroupBy) sqlScan(ctx context.Context, root *KitchenResourceQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(krgb.fns))
	for _, fn := range krgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*krgb.flds)+len(krgb.fns))
		for _, f := range *krgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*krgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := krgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// KitchenResourceSelect is the builder for selecting fields of KitchenResource entities.
type KitchenResourceSelect struct {
	*KitchenResourceQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (krs *KitchenResourceSelect) Aggregate(fns ...AggregateFunc) *KitchenResourceSelect {
	krs.fns = append(krs.fns, fns...)
	return krs
}

// Scan applies the selector query and scans the result into the given value.
func (krs *KitchenResourceSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, krs.ctx, ent.OpQuerySelect)
	if err := krs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*KitchenResourceQuery, *KitchenResourceSelect](ctx, krs.KitchenResourceQuery, krs, krs.inters, v)
}

func (krs *KitchenResourceSelect) sqlScan(ctx context.Context, root *KitchenResourceQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(krs.fns))
	for _, fn := range krs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*krs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := krs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
