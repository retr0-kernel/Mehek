// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"project/ent/brand"
	"project/ent/kitchen"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Brand is the model entity for the Brand schema.
type Brand struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// CuisineType holds the value of the "cuisine_type" field.
	CuisineType string `json:"cuisine_type,omitempty"`
	// LogoURL holds the value of the "logo_url" field.
	LogoURL string `json:"logo_url,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BrandQuery when eager-loading is set.
	Edges          BrandEdges `json:"edges"`
	kitchen_brands *int
	selectValues   sql.SelectValues
}

// BrandEdges holds the relations/edges for other nodes in the graph.
type BrandEdges struct {
	// Kitchen holds the value of the kitchen edge.
	Kitchen *Kitchen `json:"kitchen,omitempty"`
	// Menus holds the value of the menus edge.
	Menus []*Menu `json:"menus,omitempty"`
	// Orders holds the value of the orders edge.
	Orders []*Order `json:"orders,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// KitchenOrErr returns the Kitchen value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BrandEdges) KitchenOrErr() (*Kitchen, error) {
	if e.Kitchen != nil {
		return e.Kitchen, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: kitchen.Label}
	}
	return nil, &NotLoadedError{edge: "kitchen"}
}

// MenusOrErr returns the Menus value or an error if the edge
// was not loaded in eager-loading.
func (e BrandEdges) MenusOrErr() ([]*Menu, error) {
	if e.loadedTypes[1] {
		return e.Menus, nil
	}
	return nil, &NotLoadedError{edge: "menus"}
}

// OrdersOrErr returns the Orders value or an error if the edge
// was not loaded in eager-loading.
func (e BrandEdges) OrdersOrErr() ([]*Order, error) {
	if e.loadedTypes[2] {
		return e.Orders, nil
	}
	return nil, &NotLoadedError{edge: "orders"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Brand) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case brand.FieldID:
			values[i] = new(sql.NullInt64)
		case brand.FieldName, brand.FieldCuisineType, brand.FieldLogoURL:
			values[i] = new(sql.NullString)
		case brand.ForeignKeys[0]: // kitchen_brands
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Brand fields.
func (b *Brand) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case brand.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			b.ID = int(value.Int64)
		case brand.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				b.Name = value.String
			}
		case brand.FieldCuisineType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field cuisine_type", values[i])
			} else if value.Valid {
				b.CuisineType = value.String
			}
		case brand.FieldLogoURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field logo_url", values[i])
			} else if value.Valid {
				b.LogoURL = value.String
			}
		case brand.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field kitchen_brands", value)
			} else if value.Valid {
				b.kitchen_brands = new(int)
				*b.kitchen_brands = int(value.Int64)
			}
		default:
			b.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Brand.
// This includes values selected through modifiers, order, etc.
func (b *Brand) Value(name string) (ent.Value, error) {
	return b.selectValues.Get(name)
}

// QueryKitchen queries the "kitchen" edge of the Brand entity.
func (b *Brand) QueryKitchen() *KitchenQuery {
	return NewBrandClient(b.config).QueryKitchen(b)
}

// QueryMenus queries the "menus" edge of the Brand entity.
func (b *Brand) QueryMenus() *MenuQuery {
	return NewBrandClient(b.config).QueryMenus(b)
}

// QueryOrders queries the "orders" edge of the Brand entity.
func (b *Brand) QueryOrders() *OrderQuery {
	return NewBrandClient(b.config).QueryOrders(b)
}

// Update returns a builder for updating this Brand.
// Note that you need to call Brand.Unwrap() before calling this method if this Brand
// was returned from a transaction, and the transaction was committed or rolled back.
func (b *Brand) Update() *BrandUpdateOne {
	return NewBrandClient(b.config).UpdateOne(b)
}

// Unwrap unwraps the Brand entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (b *Brand) Unwrap() *Brand {
	_tx, ok := b.config.driver.(*txDriver)
	if !ok {
		panic("ent: Brand is not a transactional entity")
	}
	b.config.driver = _tx.drv
	return b
}

// String implements the fmt.Stringer.
func (b *Brand) String() string {
	var builder strings.Builder
	builder.WriteString("Brand(")
	builder.WriteString(fmt.Sprintf("id=%v, ", b.ID))
	builder.WriteString("name=")
	builder.WriteString(b.Name)
	builder.WriteString(", ")
	builder.WriteString("cuisine_type=")
	builder.WriteString(b.CuisineType)
	builder.WriteString(", ")
	builder.WriteString("logo_url=")
	builder.WriteString(b.LogoURL)
	builder.WriteByte(')')
	return builder.String()
}

// Brands is a parsable slice of Brand.
type Brands []*Brand
