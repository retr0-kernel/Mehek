// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"project/ent/brand"
	"project/ent/order"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Order is the model entity for the Order schema.
type Order struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// RequiredBy holds the value of the "required_by" field.
	RequiredBy time.Time `json:"required_by,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// TotalPrice holds the value of the "total_price" field.
	TotalPrice float64 `json:"total_price,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OrderQuery when eager-loading is set.
	Edges        OrderEdges `json:"edges"`
	brand_orders *int
	selectValues sql.SelectValues
}

// OrderEdges holds the relations/edges for other nodes in the graph.
type OrderEdges struct {
	// Brand holds the value of the brand edge.
	Brand *Brand `json:"brand,omitempty"`
	// Items holds the value of the items edge.
	Items []*OrderItem `json:"items,omitempty"`
	// ResourceAllocations holds the value of the resource_allocations edge.
	ResourceAllocations []*ResourceAllocation `json:"resource_allocations,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// BrandOrErr returns the Brand value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrderEdges) BrandOrErr() (*Brand, error) {
	if e.Brand != nil {
		return e.Brand, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: brand.Label}
	}
	return nil, &NotLoadedError{edge: "brand"}
}

// ItemsOrErr returns the Items value or an error if the edge
// was not loaded in eager-loading.
func (e OrderEdges) ItemsOrErr() ([]*OrderItem, error) {
	if e.loadedTypes[1] {
		return e.Items, nil
	}
	return nil, &NotLoadedError{edge: "items"}
}

// ResourceAllocationsOrErr returns the ResourceAllocations value or an error if the edge
// was not loaded in eager-loading.
func (e OrderEdges) ResourceAllocationsOrErr() ([]*ResourceAllocation, error) {
	if e.loadedTypes[2] {
		return e.ResourceAllocations, nil
	}
	return nil, &NotLoadedError{edge: "resource_allocations"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Order) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case order.FieldTotalPrice:
			values[i] = new(sql.NullFloat64)
		case order.FieldID:
			values[i] = new(sql.NullInt64)
		case order.FieldStatus:
			values[i] = new(sql.NullString)
		case order.FieldCreatedAt, order.FieldRequiredBy:
			values[i] = new(sql.NullTime)
		case order.ForeignKeys[0]: // brand_orders
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Order fields.
func (o *Order) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case order.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			o.ID = int(value.Int64)
		case order.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				o.CreatedAt = value.Time
			}
		case order.FieldRequiredBy:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field required_by", values[i])
			} else if value.Valid {
				o.RequiredBy = value.Time
			}
		case order.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				o.Status = value.String
			}
		case order.FieldTotalPrice:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field total_price", values[i])
			} else if value.Valid {
				o.TotalPrice = value.Float64
			}
		case order.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field brand_orders", value)
			} else if value.Valid {
				o.brand_orders = new(int)
				*o.brand_orders = int(value.Int64)
			}
		default:
			o.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Order.
// This includes values selected through modifiers, order, etc.
func (o *Order) Value(name string) (ent.Value, error) {
	return o.selectValues.Get(name)
}

// QueryBrand queries the "brand" edge of the Order entity.
func (o *Order) QueryBrand() *BrandQuery {
	return NewOrderClient(o.config).QueryBrand(o)
}

// QueryItems queries the "items" edge of the Order entity.
func (o *Order) QueryItems() *OrderItemQuery {
	return NewOrderClient(o.config).QueryItems(o)
}

// QueryResourceAllocations queries the "resource_allocations" edge of the Order entity.
func (o *Order) QueryResourceAllocations() *ResourceAllocationQuery {
	return NewOrderClient(o.config).QueryResourceAllocations(o)
}

// Update returns a builder for updating this Order.
// Note that you need to call Order.Unwrap() before calling this method if this Order
// was returned from a transaction, and the transaction was committed or rolled back.
func (o *Order) Update() *OrderUpdateOne {
	return NewOrderClient(o.config).UpdateOne(o)
}

// Unwrap unwraps the Order entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (o *Order) Unwrap() *Order {
	_tx, ok := o.config.driver.(*txDriver)
	if !ok {
		panic("ent: Order is not a transactional entity")
	}
	o.config.driver = _tx.drv
	return o
}

// String implements the fmt.Stringer.
func (o *Order) String() string {
	var builder strings.Builder
	builder.WriteString("Order(")
	builder.WriteString(fmt.Sprintf("id=%v, ", o.ID))
	builder.WriteString("created_at=")
	builder.WriteString(o.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("required_by=")
	builder.WriteString(o.RequiredBy.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(o.Status)
	builder.WriteString(", ")
	builder.WriteString("total_price=")
	builder.WriteString(fmt.Sprintf("%v", o.TotalPrice))
	builder.WriteByte(')')
	return builder.String()
}

// Orders is a parsable slice of Order.
type Orders []*Order
