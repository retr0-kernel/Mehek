// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"project/ent/ingredient"
	"project/ent/inventoryitem"
	"project/ent/kitchen"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// InventoryItemCreate is the builder for creating a InventoryItem entity.
type InventoryItemCreate struct {
	config
	mutation *InventoryItemMutation
	hooks    []Hook
}

// SetQuantity sets the "quantity" field.
func (iic *InventoryItemCreate) SetQuantity(f float64) *InventoryItemCreate {
	iic.mutation.SetQuantity(f)
	return iic
}

// SetExpirationDate sets the "expiration_date" field.
func (iic *InventoryItemCreate) SetExpirationDate(t time.Time) *InventoryItemCreate {
	iic.mutation.SetExpirationDate(t)
	return iic
}

// SetNillableExpirationDate sets the "expiration_date" field if the given value is not nil.
func (iic *InventoryItemCreate) SetNillableExpirationDate(t *time.Time) *InventoryItemCreate {
	if t != nil {
		iic.SetExpirationDate(*t)
	}
	return iic
}

// SetKitchenID sets the "kitchen" edge to the Kitchen entity by ID.
func (iic *InventoryItemCreate) SetKitchenID(id int) *InventoryItemCreate {
	iic.mutation.SetKitchenID(id)
	return iic
}

// SetKitchen sets the "kitchen" edge to the Kitchen entity.
func (iic *InventoryItemCreate) SetKitchen(k *Kitchen) *InventoryItemCreate {
	return iic.SetKitchenID(k.ID)
}

// SetIngredientID sets the "ingredient" edge to the Ingredient entity by ID.
func (iic *InventoryItemCreate) SetIngredientID(id int) *InventoryItemCreate {
	iic.mutation.SetIngredientID(id)
	return iic
}

// SetIngredient sets the "ingredient" edge to the Ingredient entity.
func (iic *InventoryItemCreate) SetIngredient(i *Ingredient) *InventoryItemCreate {
	return iic.SetIngredientID(i.ID)
}

// Mutation returns the InventoryItemMutation object of the builder.
func (iic *InventoryItemCreate) Mutation() *InventoryItemMutation {
	return iic.mutation
}

// Save creates the InventoryItem in the database.
func (iic *InventoryItemCreate) Save(ctx context.Context) (*InventoryItem, error) {
	return withHooks(ctx, iic.sqlSave, iic.mutation, iic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (iic *InventoryItemCreate) SaveX(ctx context.Context) *InventoryItem {
	v, err := iic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (iic *InventoryItemCreate) Exec(ctx context.Context) error {
	_, err := iic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iic *InventoryItemCreate) ExecX(ctx context.Context) {
	if err := iic.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iic *InventoryItemCreate) check() error {
	if _, ok := iic.mutation.Quantity(); !ok {
		return &ValidationError{Name: "quantity", err: errors.New(`ent: missing required field "InventoryItem.quantity"`)}
	}
	if v, ok := iic.mutation.Quantity(); ok {
		if err := inventoryitem.QuantityValidator(v); err != nil {
			return &ValidationError{Name: "quantity", err: fmt.Errorf(`ent: validator failed for field "InventoryItem.quantity": %w`, err)}
		}
	}
	if len(iic.mutation.KitchenIDs()) == 0 {
		return &ValidationError{Name: "kitchen", err: errors.New(`ent: missing required edge "InventoryItem.kitchen"`)}
	}
	if len(iic.mutation.IngredientIDs()) == 0 {
		return &ValidationError{Name: "ingredient", err: errors.New(`ent: missing required edge "InventoryItem.ingredient"`)}
	}
	return nil
}

func (iic *InventoryItemCreate) sqlSave(ctx context.Context) (*InventoryItem, error) {
	if err := iic.check(); err != nil {
		return nil, err
	}
	_node, _spec := iic.createSpec()
	if err := sqlgraph.CreateNode(ctx, iic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	iic.mutation.id = &_node.ID
	iic.mutation.done = true
	return _node, nil
}

func (iic *InventoryItemCreate) createSpec() (*InventoryItem, *sqlgraph.CreateSpec) {
	var (
		_node = &InventoryItem{config: iic.config}
		_spec = sqlgraph.NewCreateSpec(inventoryitem.Table, sqlgraph.NewFieldSpec(inventoryitem.FieldID, field.TypeInt))
	)
	if value, ok := iic.mutation.Quantity(); ok {
		_spec.SetField(inventoryitem.FieldQuantity, field.TypeFloat64, value)
		_node.Quantity = value
	}
	if value, ok := iic.mutation.ExpirationDate(); ok {
		_spec.SetField(inventoryitem.FieldExpirationDate, field.TypeTime, value)
		_node.ExpirationDate = value
	}
	if nodes := iic.mutation.KitchenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   inventoryitem.KitchenTable,
			Columns: []string{inventoryitem.KitchenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(kitchen.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.kitchen_inventory = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := iic.mutation.IngredientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   inventoryitem.IngredientTable,
			Columns: []string{inventoryitem.IngredientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ingredient.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.inventory_item_ingredient = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// InventoryItemCreateBulk is the builder for creating many InventoryItem entities in bulk.
type InventoryItemCreateBulk struct {
	config
	err      error
	builders []*InventoryItemCreate
}

// Save creates the InventoryItem entities in the database.
func (iicb *InventoryItemCreateBulk) Save(ctx context.Context) ([]*InventoryItem, error) {
	if iicb.err != nil {
		return nil, iicb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(iicb.builders))
	nodes := make([]*InventoryItem, len(iicb.builders))
	mutators := make([]Mutator, len(iicb.builders))
	for i := range iicb.builders {
		func(i int, root context.Context) {
			builder := iicb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*InventoryItemMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, iicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, iicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, iicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (iicb *InventoryItemCreateBulk) SaveX(ctx context.Context) []*InventoryItem {
	v, err := iicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (iicb *InventoryItemCreateBulk) Exec(ctx context.Context) error {
	_, err := iicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iicb *InventoryItemCreateBulk) ExecX(ctx context.Context) {
	if err := iicb.Exec(ctx); err != nil {
		panic(err)
	}
}
