// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"project/ent/ingredient"
	"project/ent/inventoryitem"
	"project/ent/kitchen"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// InventoryItem is the model entity for the InventoryItem schema.
type InventoryItem struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Quantity holds the value of the "quantity" field.
	Quantity float64 `json:"quantity,omitempty"`
	// ExpirationDate holds the value of the "expiration_date" field.
	ExpirationDate time.Time `json:"expiration_date,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the InventoryItemQuery when eager-loading is set.
	Edges                     InventoryItemEdges `json:"edges"`
	inventory_item_ingredient *int
	kitchen_inventory         *int
	selectValues              sql.SelectValues
}

// InventoryItemEdges holds the relations/edges for other nodes in the graph.
type InventoryItemEdges struct {
	// Kitchen holds the value of the kitchen edge.
	Kitchen *Kitchen `json:"kitchen,omitempty"`
	// Ingredient holds the value of the ingredient edge.
	Ingredient *Ingredient `json:"ingredient,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// KitchenOrErr returns the Kitchen value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e InventoryItemEdges) KitchenOrErr() (*Kitchen, error) {
	if e.Kitchen != nil {
		return e.Kitchen, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: kitchen.Label}
	}
	return nil, &NotLoadedError{edge: "kitchen"}
}

// IngredientOrErr returns the Ingredient value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e InventoryItemEdges) IngredientOrErr() (*Ingredient, error) {
	if e.Ingredient != nil {
		return e.Ingredient, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: ingredient.Label}
	}
	return nil, &NotLoadedError{edge: "ingredient"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*InventoryItem) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case inventoryitem.FieldQuantity:
			values[i] = new(sql.NullFloat64)
		case inventoryitem.FieldID:
			values[i] = new(sql.NullInt64)
		case inventoryitem.FieldExpirationDate:
			values[i] = new(sql.NullTime)
		case inventoryitem.ForeignKeys[0]: // inventory_item_ingredient
			values[i] = new(sql.NullInt64)
		case inventoryitem.ForeignKeys[1]: // kitchen_inventory
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the InventoryItem fields.
func (ii *InventoryItem) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case inventoryitem.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ii.ID = int(value.Int64)
		case inventoryitem.FieldQuantity:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field quantity", values[i])
			} else if value.Valid {
				ii.Quantity = value.Float64
			}
		case inventoryitem.FieldExpirationDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expiration_date", values[i])
			} else if value.Valid {
				ii.ExpirationDate = value.Time
			}
		case inventoryitem.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field inventory_item_ingredient", value)
			} else if value.Valid {
				ii.inventory_item_ingredient = new(int)
				*ii.inventory_item_ingredient = int(value.Int64)
			}
		case inventoryitem.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field kitchen_inventory", value)
			} else if value.Valid {
				ii.kitchen_inventory = new(int)
				*ii.kitchen_inventory = int(value.Int64)
			}
		default:
			ii.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the InventoryItem.
// This includes values selected through modifiers, order, etc.
func (ii *InventoryItem) Value(name string) (ent.Value, error) {
	return ii.selectValues.Get(name)
}

// QueryKitchen queries the "kitchen" edge of the InventoryItem entity.
func (ii *InventoryItem) QueryKitchen() *KitchenQuery {
	return NewInventoryItemClient(ii.config).QueryKitchen(ii)
}

// QueryIngredient queries the "ingredient" edge of the InventoryItem entity.
func (ii *InventoryItem) QueryIngredient() *IngredientQuery {
	return NewInventoryItemClient(ii.config).QueryIngredient(ii)
}

// Update returns a builder for updating this InventoryItem.
// Note that you need to call InventoryItem.Unwrap() before calling this method if this InventoryItem
// was returned from a transaction, and the transaction was committed or rolled back.
func (ii *InventoryItem) Update() *InventoryItemUpdateOne {
	return NewInventoryItemClient(ii.config).UpdateOne(ii)
}

// Unwrap unwraps the InventoryItem entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ii *InventoryItem) Unwrap() *InventoryItem {
	_tx, ok := ii.config.driver.(*txDriver)
	if !ok {
		panic("ent: InventoryItem is not a transactional entity")
	}
	ii.config.driver = _tx.drv
	return ii
}

// String implements the fmt.Stringer.
func (ii *InventoryItem) String() string {
	var builder strings.Builder
	builder.WriteString("InventoryItem(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ii.ID))
	builder.WriteString("quantity=")
	builder.WriteString(fmt.Sprintf("%v", ii.Quantity))
	builder.WriteString(", ")
	builder.WriteString("expiration_date=")
	builder.WriteString(ii.ExpirationDate.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// InventoryItems is a parsable slice of InventoryItem.
type InventoryItems []*InventoryItem
