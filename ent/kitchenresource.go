// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"project/ent/kitchen"
	"project/ent/kitchenresource"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// KitchenResource is the model entity for the KitchenResource schema.
type KitchenResource struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Type holds the value of the "type" field.
	Type string `json:"type,omitempty"`
	// Capacity holds the value of the "capacity" field.
	Capacity int `json:"capacity,omitempty"`
	// Available holds the value of the "available" field.
	Available bool `json:"available,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the KitchenResourceQuery when eager-loading is set.
	Edges             KitchenResourceEdges `json:"edges"`
	kitchen_resources *int
	selectValues      sql.SelectValues
}

// KitchenResourceEdges holds the relations/edges for other nodes in the graph.
type KitchenResourceEdges struct {
	// Kitchen holds the value of the kitchen edge.
	Kitchen *Kitchen `json:"kitchen,omitempty"`
	// Allocations holds the value of the allocations edge.
	Allocations []*ResourceAllocation `json:"allocations,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// KitchenOrErr returns the Kitchen value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e KitchenResourceEdges) KitchenOrErr() (*Kitchen, error) {
	if e.Kitchen != nil {
		return e.Kitchen, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: kitchen.Label}
	}
	return nil, &NotLoadedError{edge: "kitchen"}
}

// AllocationsOrErr returns the Allocations value or an error if the edge
// was not loaded in eager-loading.
func (e KitchenResourceEdges) AllocationsOrErr() ([]*ResourceAllocation, error) {
	if e.loadedTypes[1] {
		return e.Allocations, nil
	}
	return nil, &NotLoadedError{edge: "allocations"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*KitchenResource) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case kitchenresource.FieldAvailable:
			values[i] = new(sql.NullBool)
		case kitchenresource.FieldID, kitchenresource.FieldCapacity:
			values[i] = new(sql.NullInt64)
		case kitchenresource.FieldName, kitchenresource.FieldType:
			values[i] = new(sql.NullString)
		case kitchenresource.ForeignKeys[0]: // kitchen_resources
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the KitchenResource fields.
func (kr *KitchenResource) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case kitchenresource.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			kr.ID = int(value.Int64)
		case kitchenresource.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				kr.Name = value.String
			}
		case kitchenresource.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				kr.Type = value.String
			}
		case kitchenresource.FieldCapacity:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field capacity", values[i])
			} else if value.Valid {
				kr.Capacity = int(value.Int64)
			}
		case kitchenresource.FieldAvailable:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field available", values[i])
			} else if value.Valid {
				kr.Available = value.Bool
			}
		case kitchenresource.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field kitchen_resources", value)
			} else if value.Valid {
				kr.kitchen_resources = new(int)
				*kr.kitchen_resources = int(value.Int64)
			}
		default:
			kr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the KitchenResource.
// This includes values selected through modifiers, order, etc.
func (kr *KitchenResource) Value(name string) (ent.Value, error) {
	return kr.selectValues.Get(name)
}

// QueryKitchen queries the "kitchen" edge of the KitchenResource entity.
func (kr *KitchenResource) QueryKitchen() *KitchenQuery {
	return NewKitchenResourceClient(kr.config).QueryKitchen(kr)
}

// QueryAllocations queries the "allocations" edge of the KitchenResource entity.
func (kr *KitchenResource) QueryAllocations() *ResourceAllocationQuery {
	return NewKitchenResourceClient(kr.config).QueryAllocations(kr)
}

// Update returns a builder for updating this KitchenResource.
// Note that you need to call KitchenResource.Unwrap() before calling this method if this KitchenResource
// was returned from a transaction, and the transaction was committed or rolled back.
func (kr *KitchenResource) Update() *KitchenResourceUpdateOne {
	return NewKitchenResourceClient(kr.config).UpdateOne(kr)
}

// Unwrap unwraps the KitchenResource entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (kr *KitchenResource) Unwrap() *KitchenResource {
	_tx, ok := kr.config.driver.(*txDriver)
	if !ok {
		panic("ent: KitchenResource is not a transactional entity")
	}
	kr.config.driver = _tx.drv
	return kr
}

// String implements the fmt.Stringer.
func (kr *KitchenResource) String() string {
	var builder strings.Builder
	builder.WriteString("KitchenResource(")
	builder.WriteString(fmt.Sprintf("id=%v, ", kr.ID))
	builder.WriteString("name=")
	builder.WriteString(kr.Name)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(kr.Type)
	builder.WriteString(", ")
	builder.WriteString("capacity=")
	builder.WriteString(fmt.Sprintf("%v", kr.Capacity))
	builder.WriteString(", ")
	builder.WriteString("available=")
	builder.WriteString(fmt.Sprintf("%v", kr.Available))
	builder.WriteByte(')')
	return builder.String()
}

// KitchenResources is a parsable slice of KitchenResource.
type KitchenResources []*KitchenResource
