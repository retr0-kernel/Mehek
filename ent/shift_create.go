// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"project/ent/resourceallocation"
	"project/ent/shift"
	"project/ent/staff"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ShiftCreate is the builder for creating a Shift entity.
type ShiftCreate struct {
	config
	mutation *ShiftMutation
	hooks    []Hook
}

// SetStartTime sets the "start_time" field.
func (sc *ShiftCreate) SetStartTime(t time.Time) *ShiftCreate {
	sc.mutation.SetStartTime(t)
	return sc
}

// SetEndTime sets the "end_time" field.
func (sc *ShiftCreate) SetEndTime(t time.Time) *ShiftCreate {
	sc.mutation.SetEndTime(t)
	return sc
}

// SetStaffID sets the "staff" edge to the Staff entity by ID.
func (sc *ShiftCreate) SetStaffID(id int) *ShiftCreate {
	sc.mutation.SetStaffID(id)
	return sc
}

// SetStaff sets the "staff" edge to the Staff entity.
func (sc *ShiftCreate) SetStaff(s *Staff) *ShiftCreate {
	return sc.SetStaffID(s.ID)
}

// AddAllocationIDs adds the "allocations" edge to the ResourceAllocation entity by IDs.
func (sc *ShiftCreate) AddAllocationIDs(ids ...int) *ShiftCreate {
	sc.mutation.AddAllocationIDs(ids...)
	return sc
}

// AddAllocations adds the "allocations" edges to the ResourceAllocation entity.
func (sc *ShiftCreate) AddAllocations(r ...*ResourceAllocation) *ShiftCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return sc.AddAllocationIDs(ids...)
}

// Mutation returns the ShiftMutation object of the builder.
func (sc *ShiftCreate) Mutation() *ShiftMutation {
	return sc.mutation
}

// Save creates the Shift in the database.
func (sc *ShiftCreate) Save(ctx context.Context) (*Shift, error) {
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *ShiftCreate) SaveX(ctx context.Context) *Shift {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *ShiftCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *ShiftCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *ShiftCreate) check() error {
	if _, ok := sc.mutation.StartTime(); !ok {
		return &ValidationError{Name: "start_time", err: errors.New(`ent: missing required field "Shift.start_time"`)}
	}
	if _, ok := sc.mutation.EndTime(); !ok {
		return &ValidationError{Name: "end_time", err: errors.New(`ent: missing required field "Shift.end_time"`)}
	}
	if len(sc.mutation.StaffIDs()) == 0 {
		return &ValidationError{Name: "staff", err: errors.New(`ent: missing required edge "Shift.staff"`)}
	}
	return nil
}

func (sc *ShiftCreate) sqlSave(ctx context.Context) (*Shift, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *ShiftCreate) createSpec() (*Shift, *sqlgraph.CreateSpec) {
	var (
		_node = &Shift{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(shift.Table, sqlgraph.NewFieldSpec(shift.FieldID, field.TypeInt))
	)
	if value, ok := sc.mutation.StartTime(); ok {
		_spec.SetField(shift.FieldStartTime, field.TypeTime, value)
		_node.StartTime = value
	}
	if value, ok := sc.mutation.EndTime(); ok {
		_spec.SetField(shift.FieldEndTime, field.TypeTime, value)
		_node.EndTime = value
	}
	if nodes := sc.mutation.StaffIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shift.StaffTable,
			Columns: []string{shift.StaffColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(staff.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.staff_shifts = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.AllocationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shift.AllocationsTable,
			Columns: []string{shift.AllocationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resourceallocation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ShiftCreateBulk is the builder for creating many Shift entities in bulk.
type ShiftCreateBulk struct {
	config
	err      error
	builders []*ShiftCreate
}

// Save creates the Shift entities in the database.
func (scb *ShiftCreateBulk) Save(ctx context.Context) ([]*Shift, error) {
	if scb.err != nil {
		return nil, scb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Shift, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ShiftMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *ShiftCreateBulk) SaveX(ctx context.Context) []*Shift {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *ShiftCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *ShiftCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}
