// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"project/ent/menu"
	"project/ent/menuitem"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// MenuItem is the model entity for the MenuItem schema.
type MenuItem struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Price holds the value of the "price" field.
	Price float64 `json:"price,omitempty"`
	// PrepTime holds the value of the "prep_time" field.
	PrepTime int `json:"prep_time,omitempty"`
	// EquipmentNeeded holds the value of the "equipment_needed" field.
	EquipmentNeeded string `json:"equipment_needed,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MenuItemQuery when eager-loading is set.
	Edges        MenuItemEdges `json:"edges"`
	menu_items   *int
	selectValues sql.SelectValues
}

// MenuItemEdges holds the relations/edges for other nodes in the graph.
type MenuItemEdges struct {
	// Menu holds the value of the menu edge.
	Menu *Menu `json:"menu,omitempty"`
	// Ingredients holds the value of the ingredients edge.
	Ingredients []*Ingredient `json:"ingredients,omitempty"`
	// OrderItems holds the value of the order_items edge.
	OrderItems []*OrderItem `json:"order_items,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// MenuOrErr returns the Menu value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MenuItemEdges) MenuOrErr() (*Menu, error) {
	if e.Menu != nil {
		return e.Menu, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: menu.Label}
	}
	return nil, &NotLoadedError{edge: "menu"}
}

// IngredientsOrErr returns the Ingredients value or an error if the edge
// was not loaded in eager-loading.
func (e MenuItemEdges) IngredientsOrErr() ([]*Ingredient, error) {
	if e.loadedTypes[1] {
		return e.Ingredients, nil
	}
	return nil, &NotLoadedError{edge: "ingredients"}
}

// OrderItemsOrErr returns the OrderItems value or an error if the edge
// was not loaded in eager-loading.
func (e MenuItemEdges) OrderItemsOrErr() ([]*OrderItem, error) {
	if e.loadedTypes[2] {
		return e.OrderItems, nil
	}
	return nil, &NotLoadedError{edge: "order_items"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MenuItem) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case menuitem.FieldPrice:
			values[i] = new(sql.NullFloat64)
		case menuitem.FieldID, menuitem.FieldPrepTime:
			values[i] = new(sql.NullInt64)
		case menuitem.FieldName, menuitem.FieldEquipmentNeeded:
			values[i] = new(sql.NullString)
		case menuitem.ForeignKeys[0]: // menu_items
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MenuItem fields.
func (mi *MenuItem) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case menuitem.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			mi.ID = int(value.Int64)
		case menuitem.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				mi.Name = value.String
			}
		case menuitem.FieldPrice:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field price", values[i])
			} else if value.Valid {
				mi.Price = value.Float64
			}
		case menuitem.FieldPrepTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field prep_time", values[i])
			} else if value.Valid {
				mi.PrepTime = int(value.Int64)
			}
		case menuitem.FieldEquipmentNeeded:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field equipment_needed", values[i])
			} else if value.Valid {
				mi.EquipmentNeeded = value.String
			}
		case menuitem.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field menu_items", value)
			} else if value.Valid {
				mi.menu_items = new(int)
				*mi.menu_items = int(value.Int64)
			}
		default:
			mi.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the MenuItem.
// This includes values selected through modifiers, order, etc.
func (mi *MenuItem) Value(name string) (ent.Value, error) {
	return mi.selectValues.Get(name)
}

// QueryMenu queries the "menu" edge of the MenuItem entity.
func (mi *MenuItem) QueryMenu() *MenuQuery {
	return NewMenuItemClient(mi.config).QueryMenu(mi)
}

// QueryIngredients queries the "ingredients" edge of the MenuItem entity.
func (mi *MenuItem) QueryIngredients() *IngredientQuery {
	return NewMenuItemClient(mi.config).QueryIngredients(mi)
}

// QueryOrderItems queries the "order_items" edge of the MenuItem entity.
func (mi *MenuItem) QueryOrderItems() *OrderItemQuery {
	return NewMenuItemClient(mi.config).QueryOrderItems(mi)
}

// Update returns a builder for updating this MenuItem.
// Note that you need to call MenuItem.Unwrap() before calling this method if this MenuItem
// was returned from a transaction, and the transaction was committed or rolled back.
func (mi *MenuItem) Update() *MenuItemUpdateOne {
	return NewMenuItemClient(mi.config).UpdateOne(mi)
}

// Unwrap unwraps the MenuItem entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (mi *MenuItem) Unwrap() *MenuItem {
	_tx, ok := mi.config.driver.(*txDriver)
	if !ok {
		panic("ent: MenuItem is not a transactional entity")
	}
	mi.config.driver = _tx.drv
	return mi
}

// String implements the fmt.Stringer.
func (mi *MenuItem) String() string {
	var builder strings.Builder
	builder.WriteString("MenuItem(")
	builder.WriteString(fmt.Sprintf("id=%v, ", mi.ID))
	builder.WriteString("name=")
	builder.WriteString(mi.Name)
	builder.WriteString(", ")
	builder.WriteString("price=")
	builder.WriteString(fmt.Sprintf("%v", mi.Price))
	builder.WriteString(", ")
	builder.WriteString("prep_time=")
	builder.WriteString(fmt.Sprintf("%v", mi.PrepTime))
	builder.WriteString(", ")
	builder.WriteString("equipment_needed=")
	builder.WriteString(mi.EquipmentNeeded)
	builder.WriteByte(')')
	return builder.String()
}

// MenuItems is a parsable slice of MenuItem.
type MenuItems []*MenuItem
