// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"project/ent/shift"
	"project/ent/staff"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Shift is the model entity for the Shift schema.
type Shift struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// StartTime holds the value of the "start_time" field.
	StartTime time.Time `json:"start_time,omitempty"`
	// EndTime holds the value of the "end_time" field.
	EndTime time.Time `json:"end_time,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ShiftQuery when eager-loading is set.
	Edges        ShiftEdges `json:"edges"`
	staff_shifts *int
	selectValues sql.SelectValues
}

// ShiftEdges holds the relations/edges for other nodes in the graph.
type ShiftEdges struct {
	// Staff holds the value of the staff edge.
	Staff *Staff `json:"staff,omitempty"`
	// Allocations holds the value of the allocations edge.
	Allocations []*ResourceAllocation `json:"allocations,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// StaffOrErr returns the Staff value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ShiftEdges) StaffOrErr() (*Staff, error) {
	if e.Staff != nil {
		return e.Staff, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: staff.Label}
	}
	return nil, &NotLoadedError{edge: "staff"}
}

// AllocationsOrErr returns the Allocations value or an error if the edge
// was not loaded in eager-loading.
func (e ShiftEdges) AllocationsOrErr() ([]*ResourceAllocation, error) {
	if e.loadedTypes[1] {
		return e.Allocations, nil
	}
	return nil, &NotLoadedError{edge: "allocations"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Shift) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case shift.FieldID:
			values[i] = new(sql.NullInt64)
		case shift.FieldStartTime, shift.FieldEndTime:
			values[i] = new(sql.NullTime)
		case shift.ForeignKeys[0]: // staff_shifts
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Shift fields.
func (s *Shift) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case shift.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int(value.Int64)
		case shift.FieldStartTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_time", values[i])
			} else if value.Valid {
				s.StartTime = value.Time
			}
		case shift.FieldEndTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end_time", values[i])
			} else if value.Valid {
				s.EndTime = value.Time
			}
		case shift.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field staff_shifts", value)
			} else if value.Valid {
				s.staff_shifts = new(int)
				*s.staff_shifts = int(value.Int64)
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Shift.
// This includes values selected through modifiers, order, etc.
func (s *Shift) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// QueryStaff queries the "staff" edge of the Shift entity.
func (s *Shift) QueryStaff() *StaffQuery {
	return NewShiftClient(s.config).QueryStaff(s)
}

// QueryAllocations queries the "allocations" edge of the Shift entity.
func (s *Shift) QueryAllocations() *ResourceAllocationQuery {
	return NewShiftClient(s.config).QueryAllocations(s)
}

// Update returns a builder for updating this Shift.
// Note that you need to call Shift.Unwrap() before calling this method if this Shift
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Shift) Update() *ShiftUpdateOne {
	return NewShiftClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Shift entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Shift) Unwrap() *Shift {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Shift is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Shift) String() string {
	var builder strings.Builder
	builder.WriteString("Shift(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("start_time=")
	builder.WriteString(s.StartTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("end_time=")
	builder.WriteString(s.EndTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Shifts is a parsable slice of Shift.
type Shifts []*Shift
