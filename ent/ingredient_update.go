// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"project/ent/ingredient"
	"project/ent/inventoryitem"
	"project/ent/menuitem"
	"project/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// IngredientUpdate is the builder for updating Ingredient entities.
type IngredientUpdate struct {
	config
	hooks    []Hook
	mutation *IngredientMutation
}

// Where appends a list predicates to the IngredientUpdate builder.
func (iu *IngredientUpdate) Where(ps ...predicate.Ingredient) *IngredientUpdate {
	iu.mutation.Where(ps...)
	return iu
}

// SetName sets the "name" field.
func (iu *IngredientUpdate) SetName(s string) *IngredientUpdate {
	iu.mutation.SetName(s)
	return iu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (iu *IngredientUpdate) SetNillableName(s *string) *IngredientUpdate {
	if s != nil {
		iu.SetName(*s)
	}
	return iu
}

// SetUnit sets the "unit" field.
func (iu *IngredientUpdate) SetUnit(s string) *IngredientUpdate {
	iu.mutation.SetUnit(s)
	return iu
}

// SetNillableUnit sets the "unit" field if the given value is not nil.
func (iu *IngredientUpdate) SetNillableUnit(s *string) *IngredientUpdate {
	if s != nil {
		iu.SetUnit(*s)
	}
	return iu
}

// SetCostPerUnit sets the "cost_per_unit" field.
func (iu *IngredientUpdate) SetCostPerUnit(f float64) *IngredientUpdate {
	iu.mutation.ResetCostPerUnit()
	iu.mutation.SetCostPerUnit(f)
	return iu
}

// SetNillableCostPerUnit sets the "cost_per_unit" field if the given value is not nil.
func (iu *IngredientUpdate) SetNillableCostPerUnit(f *float64) *IngredientUpdate {
	if f != nil {
		iu.SetCostPerUnit(*f)
	}
	return iu
}

// AddCostPerUnit adds f to the "cost_per_unit" field.
func (iu *IngredientUpdate) AddCostPerUnit(f float64) *IngredientUpdate {
	iu.mutation.AddCostPerUnit(f)
	return iu
}

// AddMenuItemIDs adds the "menu_items" edge to the MenuItem entity by IDs.
func (iu *IngredientUpdate) AddMenuItemIDs(ids ...int) *IngredientUpdate {
	iu.mutation.AddMenuItemIDs(ids...)
	return iu
}

// AddMenuItems adds the "menu_items" edges to the MenuItem entity.
func (iu *IngredientUpdate) AddMenuItems(m ...*MenuItem) *IngredientUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return iu.AddMenuItemIDs(ids...)
}

// AddInventoryItemIDs adds the "inventory_items" edge to the InventoryItem entity by IDs.
func (iu *IngredientUpdate) AddInventoryItemIDs(ids ...int) *IngredientUpdate {
	iu.mutation.AddInventoryItemIDs(ids...)
	return iu
}

// AddInventoryItems adds the "inventory_items" edges to the InventoryItem entity.
func (iu *IngredientUpdate) AddInventoryItems(i ...*InventoryItem) *IngredientUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iu.AddInventoryItemIDs(ids...)
}

// Mutation returns the IngredientMutation object of the builder.
func (iu *IngredientUpdate) Mutation() *IngredientMutation {
	return iu.mutation
}

// ClearMenuItems clears all "menu_items" edges to the MenuItem entity.
func (iu *IngredientUpdate) ClearMenuItems() *IngredientUpdate {
	iu.mutation.ClearMenuItems()
	return iu
}

// RemoveMenuItemIDs removes the "menu_items" edge to MenuItem entities by IDs.
func (iu *IngredientUpdate) RemoveMenuItemIDs(ids ...int) *IngredientUpdate {
	iu.mutation.RemoveMenuItemIDs(ids...)
	return iu
}

// RemoveMenuItems removes "menu_items" edges to MenuItem entities.
func (iu *IngredientUpdate) RemoveMenuItems(m ...*MenuItem) *IngredientUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return iu.RemoveMenuItemIDs(ids...)
}

// ClearInventoryItems clears all "inventory_items" edges to the InventoryItem entity.
func (iu *IngredientUpdate) ClearInventoryItems() *IngredientUpdate {
	iu.mutation.ClearInventoryItems()
	return iu
}

// RemoveInventoryItemIDs removes the "inventory_items" edge to InventoryItem entities by IDs.
func (iu *IngredientUpdate) RemoveInventoryItemIDs(ids ...int) *IngredientUpdate {
	iu.mutation.RemoveInventoryItemIDs(ids...)
	return iu
}

// RemoveInventoryItems removes "inventory_items" edges to InventoryItem entities.
func (iu *IngredientUpdate) RemoveInventoryItems(i ...*InventoryItem) *IngredientUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iu.RemoveInventoryItemIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iu *IngredientUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, iu.sqlSave, iu.mutation, iu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iu *IngredientUpdate) SaveX(ctx context.Context) int {
	affected, err := iu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iu *IngredientUpdate) Exec(ctx context.Context) error {
	_, err := iu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iu *IngredientUpdate) ExecX(ctx context.Context) {
	if err := iu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iu *IngredientUpdate) check() error {
	if v, ok := iu.mutation.Name(); ok {
		if err := ingredient.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Ingredient.name": %w`, err)}
		}
	}
	if v, ok := iu.mutation.Unit(); ok {
		if err := ingredient.UnitValidator(v); err != nil {
			return &ValidationError{Name: "unit", err: fmt.Errorf(`ent: validator failed for field "Ingredient.unit": %w`, err)}
		}
	}
	if v, ok := iu.mutation.CostPerUnit(); ok {
		if err := ingredient.CostPerUnitValidator(v); err != nil {
			return &ValidationError{Name: "cost_per_unit", err: fmt.Errorf(`ent: validator failed for field "Ingredient.cost_per_unit": %w`, err)}
		}
	}
	return nil
}

func (iu *IngredientUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := iu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(ingredient.Table, ingredient.Columns, sqlgraph.NewFieldSpec(ingredient.FieldID, field.TypeInt))
	if ps := iu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iu.mutation.Name(); ok {
		_spec.SetField(ingredient.FieldName, field.TypeString, value)
	}
	if value, ok := iu.mutation.Unit(); ok {
		_spec.SetField(ingredient.FieldUnit, field.TypeString, value)
	}
	if value, ok := iu.mutation.CostPerUnit(); ok {
		_spec.SetField(ingredient.FieldCostPerUnit, field.TypeFloat64, value)
	}
	if value, ok := iu.mutation.AddedCostPerUnit(); ok {
		_spec.AddField(ingredient.FieldCostPerUnit, field.TypeFloat64, value)
	}
	if iu.mutation.MenuItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   ingredient.MenuItemsTable,
			Columns: ingredient.MenuItemsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menuitem.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.RemovedMenuItemsIDs(); len(nodes) > 0 && !iu.mutation.MenuItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   ingredient.MenuItemsTable,
			Columns: ingredient.MenuItemsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menuitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.MenuItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   ingredient.MenuItemsTable,
			Columns: ingredient.MenuItemsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menuitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iu.mutation.InventoryItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   ingredient.InventoryItemsTable,
			Columns: []string{ingredient.InventoryItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(inventoryitem.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.RemovedInventoryItemsIDs(); len(nodes) > 0 && !iu.mutation.InventoryItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   ingredient.InventoryItemsTable,
			Columns: []string{ingredient.InventoryItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(inventoryitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.InventoryItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   ingredient.InventoryItemsTable,
			Columns: []string{ingredient.InventoryItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(inventoryitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ingredient.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	iu.mutation.done = true
	return n, nil
}

// IngredientUpdateOne is the builder for updating a single Ingredient entity.
type IngredientUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *IngredientMutation
}

// SetName sets the "name" field.
func (iuo *IngredientUpdateOne) SetName(s string) *IngredientUpdateOne {
	iuo.mutation.SetName(s)
	return iuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (iuo *IngredientUpdateOne) SetNillableName(s *string) *IngredientUpdateOne {
	if s != nil {
		iuo.SetName(*s)
	}
	return iuo
}

// SetUnit sets the "unit" field.
func (iuo *IngredientUpdateOne) SetUnit(s string) *IngredientUpdateOne {
	iuo.mutation.SetUnit(s)
	return iuo
}

// SetNillableUnit sets the "unit" field if the given value is not nil.
func (iuo *IngredientUpdateOne) SetNillableUnit(s *string) *IngredientUpdateOne {
	if s != nil {
		iuo.SetUnit(*s)
	}
	return iuo
}

// SetCostPerUnit sets the "cost_per_unit" field.
func (iuo *IngredientUpdateOne) SetCostPerUnit(f float64) *IngredientUpdateOne {
	iuo.mutation.ResetCostPerUnit()
	iuo.mutation.SetCostPerUnit(f)
	return iuo
}

// SetNillableCostPerUnit sets the "cost_per_unit" field if the given value is not nil.
func (iuo *IngredientUpdateOne) SetNillableCostPerUnit(f *float64) *IngredientUpdateOne {
	if f != nil {
		iuo.SetCostPerUnit(*f)
	}
	return iuo
}

// AddCostPerUnit adds f to the "cost_per_unit" field.
func (iuo *IngredientUpdateOne) AddCostPerUnit(f float64) *IngredientUpdateOne {
	iuo.mutation.AddCostPerUnit(f)
	return iuo
}

// AddMenuItemIDs adds the "menu_items" edge to the MenuItem entity by IDs.
func (iuo *IngredientUpdateOne) AddMenuItemIDs(ids ...int) *IngredientUpdateOne {
	iuo.mutation.AddMenuItemIDs(ids...)
	return iuo
}

// AddMenuItems adds the "menu_items" edges to the MenuItem entity.
func (iuo *IngredientUpdateOne) AddMenuItems(m ...*MenuItem) *IngredientUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return iuo.AddMenuItemIDs(ids...)
}

// AddInventoryItemIDs adds the "inventory_items" edge to the InventoryItem entity by IDs.
func (iuo *IngredientUpdateOne) AddInventoryItemIDs(ids ...int) *IngredientUpdateOne {
	iuo.mutation.AddInventoryItemIDs(ids...)
	return iuo
}

// AddInventoryItems adds the "inventory_items" edges to the InventoryItem entity.
func (iuo *IngredientUpdateOne) AddInventoryItems(i ...*InventoryItem) *IngredientUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iuo.AddInventoryItemIDs(ids...)
}

// Mutation returns the IngredientMutation object of the builder.
func (iuo *IngredientUpdateOne) Mutation() *IngredientMutation {
	return iuo.mutation
}

// ClearMenuItems clears all "menu_items" edges to the MenuItem entity.
func (iuo *IngredientUpdateOne) ClearMenuItems() *IngredientUpdateOne {
	iuo.mutation.ClearMenuItems()
	return iuo
}

// RemoveMenuItemIDs removes the "menu_items" edge to MenuItem entities by IDs.
func (iuo *IngredientUpdateOne) RemoveMenuItemIDs(ids ...int) *IngredientUpdateOne {
	iuo.mutation.RemoveMenuItemIDs(ids...)
	return iuo
}

// RemoveMenuItems removes "menu_items" edges to MenuItem entities.
func (iuo *IngredientUpdateOne) RemoveMenuItems(m ...*MenuItem) *IngredientUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return iuo.RemoveMenuItemIDs(ids...)
}

// ClearInventoryItems clears all "inventory_items" edges to the InventoryItem entity.
func (iuo *IngredientUpdateOne) ClearInventoryItems() *IngredientUpdateOne {
	iuo.mutation.ClearInventoryItems()
	return iuo
}

// RemoveInventoryItemIDs removes the "inventory_items" edge to InventoryItem entities by IDs.
func (iuo *IngredientUpdateOne) RemoveInventoryItemIDs(ids ...int) *IngredientUpdateOne {
	iuo.mutation.RemoveInventoryItemIDs(ids...)
	return iuo
}

// RemoveInventoryItems removes "inventory_items" edges to InventoryItem entities.
func (iuo *IngredientUpdateOne) RemoveInventoryItems(i ...*InventoryItem) *IngredientUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iuo.RemoveInventoryItemIDs(ids...)
}

// Where appends a list predicates to the IngredientUpdate builder.
func (iuo *IngredientUpdateOne) Where(ps ...predicate.Ingredient) *IngredientUpdateOne {
	iuo.mutation.Where(ps...)
	return iuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iuo *IngredientUpdateOne) Select(field string, fields ...string) *IngredientUpdateOne {
	iuo.fields = append([]string{field}, fields...)
	return iuo
}

// Save executes the query and returns the updated Ingredient entity.
func (iuo *IngredientUpdateOne) Save(ctx context.Context) (*Ingredient, error) {
	return withHooks(ctx, iuo.sqlSave, iuo.mutation, iuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iuo *IngredientUpdateOne) SaveX(ctx context.Context) *Ingredient {
	node, err := iuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iuo *IngredientUpdateOne) Exec(ctx context.Context) error {
	_, err := iuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iuo *IngredientUpdateOne) ExecX(ctx context.Context) {
	if err := iuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iuo *IngredientUpdateOne) check() error {
	if v, ok := iuo.mutation.Name(); ok {
		if err := ingredient.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Ingredient.name": %w`, err)}
		}
	}
	if v, ok := iuo.mutation.Unit(); ok {
		if err := ingredient.UnitValidator(v); err != nil {
			return &ValidationError{Name: "unit", err: fmt.Errorf(`ent: validator failed for field "Ingredient.unit": %w`, err)}
		}
	}
	if v, ok := iuo.mutation.CostPerUnit(); ok {
		if err := ingredient.CostPerUnitValidator(v); err != nil {
			return &ValidationError{Name: "cost_per_unit", err: fmt.Errorf(`ent: validator failed for field "Ingredient.cost_per_unit": %w`, err)}
		}
	}
	return nil
}

func (iuo *IngredientUpdateOne) sqlSave(ctx context.Context) (_node *Ingredient, err error) {
	if err := iuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(ingredient.Table, ingredient.Columns, sqlgraph.NewFieldSpec(ingredient.FieldID, field.TypeInt))
	id, ok := iuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Ingredient.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, ingredient.FieldID)
		for _, f := range fields {
			if !ingredient.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != ingredient.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iuo.mutation.Name(); ok {
		_spec.SetField(ingredient.FieldName, field.TypeString, value)
	}
	if value, ok := iuo.mutation.Unit(); ok {
		_spec.SetField(ingredient.FieldUnit, field.TypeString, value)
	}
	if value, ok := iuo.mutation.CostPerUnit(); ok {
		_spec.SetField(ingredient.FieldCostPerUnit, field.TypeFloat64, value)
	}
	if value, ok := iuo.mutation.AddedCostPerUnit(); ok {
		_spec.AddField(ingredient.FieldCostPerUnit, field.TypeFloat64, value)
	}
	if iuo.mutation.MenuItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   ingredient.MenuItemsTable,
			Columns: ingredient.MenuItemsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menuitem.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.RemovedMenuItemsIDs(); len(nodes) > 0 && !iuo.mutation.MenuItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   ingredient.MenuItemsTable,
			Columns: ingredient.MenuItemsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menuitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.MenuItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   ingredient.MenuItemsTable,
			Columns: ingredient.MenuItemsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menuitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iuo.mutation.InventoryItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   ingredient.InventoryItemsTable,
			Columns: []string{ingredient.InventoryItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(inventoryitem.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.RemovedInventoryItemsIDs(); len(nodes) > 0 && !iuo.mutation.InventoryItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   ingredient.InventoryItemsTable,
			Columns: []string{ingredient.InventoryItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(inventoryitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.InventoryItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   ingredient.InventoryItemsTable,
			Columns: []string{ingredient.InventoryItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(inventoryitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Ingredient{config: iuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ingredient.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	iuo.mutation.done = true
	return _node, nil
}
