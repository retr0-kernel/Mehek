// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"project/ent/brand"
	"project/ent/inventoryitem"
	"project/ent/kitchen"
	"project/ent/kitchenresource"
	"project/ent/staff"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// KitchenCreate is the builder for creating a Kitchen entity.
type KitchenCreate struct {
	config
	mutation *KitchenMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (kc *KitchenCreate) SetName(s string) *KitchenCreate {
	kc.mutation.SetName(s)
	return kc
}

// SetLocation sets the "location" field.
func (kc *KitchenCreate) SetLocation(s string) *KitchenCreate {
	kc.mutation.SetLocation(s)
	return kc
}

// SetCapacity sets the "capacity" field.
func (kc *KitchenCreate) SetCapacity(i int) *KitchenCreate {
	kc.mutation.SetCapacity(i)
	return kc
}

// SetOperatingHours sets the "operating_hours" field.
func (kc *KitchenCreate) SetOperatingHours(m map[string][]string) *KitchenCreate {
	kc.mutation.SetOperatingHours(m)
	return kc
}

// AddResourceIDs adds the "resources" edge to the KitchenResource entity by IDs.
func (kc *KitchenCreate) AddResourceIDs(ids ...int) *KitchenCreate {
	kc.mutation.AddResourceIDs(ids...)
	return kc
}

// AddResources adds the "resources" edges to the KitchenResource entity.
func (kc *KitchenCreate) AddResources(k ...*KitchenResource) *KitchenCreate {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return kc.AddResourceIDs(ids...)
}

// AddStaffIDs adds the "staff" edge to the Staff entity by IDs.
func (kc *KitchenCreate) AddStaffIDs(ids ...int) *KitchenCreate {
	kc.mutation.AddStaffIDs(ids...)
	return kc
}

// AddStaff adds the "staff" edges to the Staff entity.
func (kc *KitchenCreate) AddStaff(s ...*Staff) *KitchenCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return kc.AddStaffIDs(ids...)
}

// AddBrandIDs adds the "brands" edge to the Brand entity by IDs.
func (kc *KitchenCreate) AddBrandIDs(ids ...int) *KitchenCreate {
	kc.mutation.AddBrandIDs(ids...)
	return kc
}

// AddBrands adds the "brands" edges to the Brand entity.
func (kc *KitchenCreate) AddBrands(b ...*Brand) *KitchenCreate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return kc.AddBrandIDs(ids...)
}

// AddInventoryIDs adds the "inventory" edge to the InventoryItem entity by IDs.
func (kc *KitchenCreate) AddInventoryIDs(ids ...int) *KitchenCreate {
	kc.mutation.AddInventoryIDs(ids...)
	return kc
}

// AddInventory adds the "inventory" edges to the InventoryItem entity.
func (kc *KitchenCreate) AddInventory(i ...*InventoryItem) *KitchenCreate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return kc.AddInventoryIDs(ids...)
}

// Mutation returns the KitchenMutation object of the builder.
func (kc *KitchenCreate) Mutation() *KitchenMutation {
	return kc.mutation
}

// Save creates the Kitchen in the database.
func (kc *KitchenCreate) Save(ctx context.Context) (*Kitchen, error) {
	return withHooks(ctx, kc.sqlSave, kc.mutation, kc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (kc *KitchenCreate) SaveX(ctx context.Context) *Kitchen {
	v, err := kc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (kc *KitchenCreate) Exec(ctx context.Context) error {
	_, err := kc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (kc *KitchenCreate) ExecX(ctx context.Context) {
	if err := kc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (kc *KitchenCreate) check() error {
	if _, ok := kc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Kitchen.name"`)}
	}
	if v, ok := kc.mutation.Name(); ok {
		if err := kitchen.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Kitchen.name": %w`, err)}
		}
	}
	if _, ok := kc.mutation.Location(); !ok {
		return &ValidationError{Name: "location", err: errors.New(`ent: missing required field "Kitchen.location"`)}
	}
	if v, ok := kc.mutation.Location(); ok {
		if err := kitchen.LocationValidator(v); err != nil {
			return &ValidationError{Name: "location", err: fmt.Errorf(`ent: validator failed for field "Kitchen.location": %w`, err)}
		}
	}
	if _, ok := kc.mutation.Capacity(); !ok {
		return &ValidationError{Name: "capacity", err: errors.New(`ent: missing required field "Kitchen.capacity"`)}
	}
	if v, ok := kc.mutation.Capacity(); ok {
		if err := kitchen.CapacityValidator(v); err != nil {
			return &ValidationError{Name: "capacity", err: fmt.Errorf(`ent: validator failed for field "Kitchen.capacity": %w`, err)}
		}
	}
	if _, ok := kc.mutation.OperatingHours(); !ok {
		return &ValidationError{Name: "operating_hours", err: errors.New(`ent: missing required field "Kitchen.operating_hours"`)}
	}
	return nil
}

func (kc *KitchenCreate) sqlSave(ctx context.Context) (*Kitchen, error) {
	if err := kc.check(); err != nil {
		return nil, err
	}
	_node, _spec := kc.createSpec()
	if err := sqlgraph.CreateNode(ctx, kc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	kc.mutation.id = &_node.ID
	kc.mutation.done = true
	return _node, nil
}

func (kc *KitchenCreate) createSpec() (*Kitchen, *sqlgraph.CreateSpec) {
	var (
		_node = &Kitchen{config: kc.config}
		_spec = sqlgraph.NewCreateSpec(kitchen.Table, sqlgraph.NewFieldSpec(kitchen.FieldID, field.TypeInt))
	)
	if value, ok := kc.mutation.Name(); ok {
		_spec.SetField(kitchen.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := kc.mutation.Location(); ok {
		_spec.SetField(kitchen.FieldLocation, field.TypeString, value)
		_node.Location = value
	}
	if value, ok := kc.mutation.Capacity(); ok {
		_spec.SetField(kitchen.FieldCapacity, field.TypeInt, value)
		_node.Capacity = value
	}
	if value, ok := kc.mutation.OperatingHours(); ok {
		_spec.SetField(kitchen.FieldOperatingHours, field.TypeJSON, value)
		_node.OperatingHours = value
	}
	if nodes := kc.mutation.ResourcesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kitchen.ResourcesTable,
			Columns: []string{kitchen.ResourcesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(kitchenresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := kc.mutation.StaffIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kitchen.StaffTable,
			Columns: []string{kitchen.StaffColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(staff.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := kc.mutation.BrandsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kitchen.BrandsTable,
			Columns: []string{kitchen.BrandsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(brand.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := kc.mutation.InventoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kitchen.InventoryTable,
			Columns: []string{kitchen.InventoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(inventoryitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// KitchenCreateBulk is the builder for creating many Kitchen entities in bulk.
type KitchenCreateBulk struct {
	config
	err      error
	builders []*KitchenCreate
}

// Save creates the Kitchen entities in the database.
func (kcb *KitchenCreateBulk) Save(ctx context.Context) ([]*Kitchen, error) {
	if kcb.err != nil {
		return nil, kcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(kcb.builders))
	nodes := make([]*Kitchen, len(kcb.builders))
	mutators := make([]Mutator, len(kcb.builders))
	for i := range kcb.builders {
		func(i int, root context.Context) {
			builder := kcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*KitchenMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, kcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, kcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, kcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (kcb *KitchenCreateBulk) SaveX(ctx context.Context) []*Kitchen {
	v, err := kcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (kcb *KitchenCreateBulk) Exec(ctx context.Context) error {
	_, err := kcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (kcb *KitchenCreateBulk) ExecX(ctx context.Context) {
	if err := kcb.Exec(ctx); err != nil {
		panic(err)
	}
}
