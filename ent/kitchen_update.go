// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"project/ent/brand"
	"project/ent/inventoryitem"
	"project/ent/kitchen"
	"project/ent/kitchenresource"
	"project/ent/predicate"
	"project/ent/staff"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// KitchenUpdate is the builder for updating Kitchen entities.
type KitchenUpdate struct {
	config
	hooks    []Hook
	mutation *KitchenMutation
}

// Where appends a list predicates to the KitchenUpdate builder.
func (ku *KitchenUpdate) Where(ps ...predicate.Kitchen) *KitchenUpdate {
	ku.mutation.Where(ps...)
	return ku
}

// SetName sets the "name" field.
func (ku *KitchenUpdate) SetName(s string) *KitchenUpdate {
	ku.mutation.SetName(s)
	return ku
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ku *KitchenUpdate) SetNillableName(s *string) *KitchenUpdate {
	if s != nil {
		ku.SetName(*s)
	}
	return ku
}

// SetLocation sets the "location" field.
func (ku *KitchenUpdate) SetLocation(s string) *KitchenUpdate {
	ku.mutation.SetLocation(s)
	return ku
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (ku *KitchenUpdate) SetNillableLocation(s *string) *KitchenUpdate {
	if s != nil {
		ku.SetLocation(*s)
	}
	return ku
}

// SetCapacity sets the "capacity" field.
func (ku *KitchenUpdate) SetCapacity(i int) *KitchenUpdate {
	ku.mutation.ResetCapacity()
	ku.mutation.SetCapacity(i)
	return ku
}

// SetNillableCapacity sets the "capacity" field if the given value is not nil.
func (ku *KitchenUpdate) SetNillableCapacity(i *int) *KitchenUpdate {
	if i != nil {
		ku.SetCapacity(*i)
	}
	return ku
}

// AddCapacity adds i to the "capacity" field.
func (ku *KitchenUpdate) AddCapacity(i int) *KitchenUpdate {
	ku.mutation.AddCapacity(i)
	return ku
}

// SetOperatingHours sets the "operating_hours" field.
func (ku *KitchenUpdate) SetOperatingHours(m map[string][]string) *KitchenUpdate {
	ku.mutation.SetOperatingHours(m)
	return ku
}

// AddResourceIDs adds the "resources" edge to the KitchenResource entity by IDs.
func (ku *KitchenUpdate) AddResourceIDs(ids ...int) *KitchenUpdate {
	ku.mutation.AddResourceIDs(ids...)
	return ku
}

// AddResources adds the "resources" edges to the KitchenResource entity.
func (ku *KitchenUpdate) AddResources(k ...*KitchenResource) *KitchenUpdate {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return ku.AddResourceIDs(ids...)
}

// AddStaffIDs adds the "staff" edge to the Staff entity by IDs.
func (ku *KitchenUpdate) AddStaffIDs(ids ...int) *KitchenUpdate {
	ku.mutation.AddStaffIDs(ids...)
	return ku
}

// AddStaff adds the "staff" edges to the Staff entity.
func (ku *KitchenUpdate) AddStaff(s ...*Staff) *KitchenUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ku.AddStaffIDs(ids...)
}

// AddBrandIDs adds the "brands" edge to the Brand entity by IDs.
func (ku *KitchenUpdate) AddBrandIDs(ids ...int) *KitchenUpdate {
	ku.mutation.AddBrandIDs(ids...)
	return ku
}

// AddBrands adds the "brands" edges to the Brand entity.
func (ku *KitchenUpdate) AddBrands(b ...*Brand) *KitchenUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return ku.AddBrandIDs(ids...)
}

// AddInventoryIDs adds the "inventory" edge to the InventoryItem entity by IDs.
func (ku *KitchenUpdate) AddInventoryIDs(ids ...int) *KitchenUpdate {
	ku.mutation.AddInventoryIDs(ids...)
	return ku
}

// AddInventory adds the "inventory" edges to the InventoryItem entity.
func (ku *KitchenUpdate) AddInventory(i ...*InventoryItem) *KitchenUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ku.AddInventoryIDs(ids...)
}

// Mutation returns the KitchenMutation object of the builder.
func (ku *KitchenUpdate) Mutation() *KitchenMutation {
	return ku.mutation
}

// ClearResources clears all "resources" edges to the KitchenResource entity.
func (ku *KitchenUpdate) ClearResources() *KitchenUpdate {
	ku.mutation.ClearResources()
	return ku
}

// RemoveResourceIDs removes the "resources" edge to KitchenResource entities by IDs.
func (ku *KitchenUpdate) RemoveResourceIDs(ids ...int) *KitchenUpdate {
	ku.mutation.RemoveResourceIDs(ids...)
	return ku
}

// RemoveResources removes "resources" edges to KitchenResource entities.
func (ku *KitchenUpdate) RemoveResources(k ...*KitchenResource) *KitchenUpdate {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return ku.RemoveResourceIDs(ids...)
}

// ClearStaff clears all "staff" edges to the Staff entity.
func (ku *KitchenUpdate) ClearStaff() *KitchenUpdate {
	ku.mutation.ClearStaff()
	return ku
}

// RemoveStaffIDs removes the "staff" edge to Staff entities by IDs.
func (ku *KitchenUpdate) RemoveStaffIDs(ids ...int) *KitchenUpdate {
	ku.mutation.RemoveStaffIDs(ids...)
	return ku
}

// RemoveStaff removes "staff" edges to Staff entities.
func (ku *KitchenUpdate) RemoveStaff(s ...*Staff) *KitchenUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ku.RemoveStaffIDs(ids...)
}

// ClearBrands clears all "brands" edges to the Brand entity.
func (ku *KitchenUpdate) ClearBrands() *KitchenUpdate {
	ku.mutation.ClearBrands()
	return ku
}

// RemoveBrandIDs removes the "brands" edge to Brand entities by IDs.
func (ku *KitchenUpdate) RemoveBrandIDs(ids ...int) *KitchenUpdate {
	ku.mutation.RemoveBrandIDs(ids...)
	return ku
}

// RemoveBrands removes "brands" edges to Brand entities.
func (ku *KitchenUpdate) RemoveBrands(b ...*Brand) *KitchenUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return ku.RemoveBrandIDs(ids...)
}

// ClearInventory clears all "inventory" edges to the InventoryItem entity.
func (ku *KitchenUpdate) ClearInventory() *KitchenUpdate {
	ku.mutation.ClearInventory()
	return ku
}

// RemoveInventoryIDs removes the "inventory" edge to InventoryItem entities by IDs.
func (ku *KitchenUpdate) RemoveInventoryIDs(ids ...int) *KitchenUpdate {
	ku.mutation.RemoveInventoryIDs(ids...)
	return ku
}

// RemoveInventory removes "inventory" edges to InventoryItem entities.
func (ku *KitchenUpdate) RemoveInventory(i ...*InventoryItem) *KitchenUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ku.RemoveInventoryIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ku *KitchenUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ku.sqlSave, ku.mutation, ku.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ku *KitchenUpdate) SaveX(ctx context.Context) int {
	affected, err := ku.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ku *KitchenUpdate) Exec(ctx context.Context) error {
	_, err := ku.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ku *KitchenUpdate) ExecX(ctx context.Context) {
	if err := ku.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ku *KitchenUpdate) check() error {
	if v, ok := ku.mutation.Name(); ok {
		if err := kitchen.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Kitchen.name": %w`, err)}
		}
	}
	if v, ok := ku.mutation.Location(); ok {
		if err := kitchen.LocationValidator(v); err != nil {
			return &ValidationError{Name: "location", err: fmt.Errorf(`ent: validator failed for field "Kitchen.location": %w`, err)}
		}
	}
	if v, ok := ku.mutation.Capacity(); ok {
		if err := kitchen.CapacityValidator(v); err != nil {
			return &ValidationError{Name: "capacity", err: fmt.Errorf(`ent: validator failed for field "Kitchen.capacity": %w`, err)}
		}
	}
	return nil
}

func (ku *KitchenUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ku.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(kitchen.Table, kitchen.Columns, sqlgraph.NewFieldSpec(kitchen.FieldID, field.TypeInt))
	if ps := ku.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ku.mutation.Name(); ok {
		_spec.SetField(kitchen.FieldName, field.TypeString, value)
	}
	if value, ok := ku.mutation.Location(); ok {
		_spec.SetField(kitchen.FieldLocation, field.TypeString, value)
	}
	if value, ok := ku.mutation.Capacity(); ok {
		_spec.SetField(kitchen.FieldCapacity, field.TypeInt, value)
	}
	if value, ok := ku.mutation.AddedCapacity(); ok {
		_spec.AddField(kitchen.FieldCapacity, field.TypeInt, value)
	}
	if value, ok := ku.mutation.OperatingHours(); ok {
		_spec.SetField(kitchen.FieldOperatingHours, field.TypeJSON, value)
	}
	if ku.mutation.ResourcesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kitchen.ResourcesTable,
			Columns: []string{kitchen.ResourcesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(kitchenresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ku.mutation.RemovedResourcesIDs(); len(nodes) > 0 && !ku.mutation.ResourcesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kitchen.ResourcesTable,
			Columns: []string{kitchen.ResourcesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(kitchenresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ku.mutation.ResourcesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kitchen.ResourcesTable,
			Columns: []string{kitchen.ResourcesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(kitchenresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ku.mutation.StaffCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kitchen.StaffTable,
			Columns: []string{kitchen.StaffColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(staff.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ku.mutation.RemovedStaffIDs(); len(nodes) > 0 && !ku.mutation.StaffCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kitchen.StaffTable,
			Columns: []string{kitchen.StaffColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(staff.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ku.mutation.StaffIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kitchen.StaffTable,
			Columns: []string{kitchen.StaffColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(staff.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ku.mutation.BrandsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kitchen.BrandsTable,
			Columns: []string{kitchen.BrandsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(brand.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ku.mutation.RemovedBrandsIDs(); len(nodes) > 0 && !ku.mutation.BrandsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kitchen.BrandsTable,
			Columns: []string{kitchen.BrandsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(brand.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ku.mutation.BrandsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kitchen.BrandsTable,
			Columns: []string{kitchen.BrandsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(brand.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ku.mutation.InventoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kitchen.InventoryTable,
			Columns: []string{kitchen.InventoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(inventoryitem.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ku.mutation.RemovedInventoryIDs(); len(nodes) > 0 && !ku.mutation.InventoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kitchen.InventoryTable,
			Columns: []string{kitchen.InventoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(inventoryitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ku.mutation.InventoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kitchen.InventoryTable,
			Columns: []string{kitchen.InventoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(inventoryitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ku.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{kitchen.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ku.mutation.done = true
	return n, nil
}

// KitchenUpdateOne is the builder for updating a single Kitchen entity.
type KitchenUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *KitchenMutation
}

// SetName sets the "name" field.
func (kuo *KitchenUpdateOne) SetName(s string) *KitchenUpdateOne {
	kuo.mutation.SetName(s)
	return kuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (kuo *KitchenUpdateOne) SetNillableName(s *string) *KitchenUpdateOne {
	if s != nil {
		kuo.SetName(*s)
	}
	return kuo
}

// SetLocation sets the "location" field.
func (kuo *KitchenUpdateOne) SetLocation(s string) *KitchenUpdateOne {
	kuo.mutation.SetLocation(s)
	return kuo
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (kuo *KitchenUpdateOne) SetNillableLocation(s *string) *KitchenUpdateOne {
	if s != nil {
		kuo.SetLocation(*s)
	}
	return kuo
}

// SetCapacity sets the "capacity" field.
func (kuo *KitchenUpdateOne) SetCapacity(i int) *KitchenUpdateOne {
	kuo.mutation.ResetCapacity()
	kuo.mutation.SetCapacity(i)
	return kuo
}

// SetNillableCapacity sets the "capacity" field if the given value is not nil.
func (kuo *KitchenUpdateOne) SetNillableCapacity(i *int) *KitchenUpdateOne {
	if i != nil {
		kuo.SetCapacity(*i)
	}
	return kuo
}

// AddCapacity adds i to the "capacity" field.
func (kuo *KitchenUpdateOne) AddCapacity(i int) *KitchenUpdateOne {
	kuo.mutation.AddCapacity(i)
	return kuo
}

// SetOperatingHours sets the "operating_hours" field.
func (kuo *KitchenUpdateOne) SetOperatingHours(m map[string][]string) *KitchenUpdateOne {
	kuo.mutation.SetOperatingHours(m)
	return kuo
}

// AddResourceIDs adds the "resources" edge to the KitchenResource entity by IDs.
func (kuo *KitchenUpdateOne) AddResourceIDs(ids ...int) *KitchenUpdateOne {
	kuo.mutation.AddResourceIDs(ids...)
	return kuo
}

// AddResources adds the "resources" edges to the KitchenResource entity.
func (kuo *KitchenUpdateOne) AddResources(k ...*KitchenResource) *KitchenUpdateOne {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return kuo.AddResourceIDs(ids...)
}

// AddStaffIDs adds the "staff" edge to the Staff entity by IDs.
func (kuo *KitchenUpdateOne) AddStaffIDs(ids ...int) *KitchenUpdateOne {
	kuo.mutation.AddStaffIDs(ids...)
	return kuo
}

// AddStaff adds the "staff" edges to the Staff entity.
func (kuo *KitchenUpdateOne) AddStaff(s ...*Staff) *KitchenUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return kuo.AddStaffIDs(ids...)
}

// AddBrandIDs adds the "brands" edge to the Brand entity by IDs.
func (kuo *KitchenUpdateOne) AddBrandIDs(ids ...int) *KitchenUpdateOne {
	kuo.mutation.AddBrandIDs(ids...)
	return kuo
}

// AddBrands adds the "brands" edges to the Brand entity.
func (kuo *KitchenUpdateOne) AddBrands(b ...*Brand) *KitchenUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return kuo.AddBrandIDs(ids...)
}

// AddInventoryIDs adds the "inventory" edge to the InventoryItem entity by IDs.
func (kuo *KitchenUpdateOne) AddInventoryIDs(ids ...int) *KitchenUpdateOne {
	kuo.mutation.AddInventoryIDs(ids...)
	return kuo
}

// AddInventory adds the "inventory" edges to the InventoryItem entity.
func (kuo *KitchenUpdateOne) AddInventory(i ...*InventoryItem) *KitchenUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return kuo.AddInventoryIDs(ids...)
}

// Mutation returns the KitchenMutation object of the builder.
func (kuo *KitchenUpdateOne) Mutation() *KitchenMutation {
	return kuo.mutation
}

// ClearResources clears all "resources" edges to the KitchenResource entity.
func (kuo *KitchenUpdateOne) ClearResources() *KitchenUpdateOne {
	kuo.mutation.ClearResources()
	return kuo
}

// RemoveResourceIDs removes the "resources" edge to KitchenResource entities by IDs.
func (kuo *KitchenUpdateOne) RemoveResourceIDs(ids ...int) *KitchenUpdateOne {
	kuo.mutation.RemoveResourceIDs(ids...)
	return kuo
}

// RemoveResources removes "resources" edges to KitchenResource entities.
func (kuo *KitchenUpdateOne) RemoveResources(k ...*KitchenResource) *KitchenUpdateOne {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return kuo.RemoveResourceIDs(ids...)
}

// ClearStaff clears all "staff" edges to the Staff entity.
func (kuo *KitchenUpdateOne) ClearStaff() *KitchenUpdateOne {
	kuo.mutation.ClearStaff()
	return kuo
}

// RemoveStaffIDs removes the "staff" edge to Staff entities by IDs.
func (kuo *KitchenUpdateOne) RemoveStaffIDs(ids ...int) *KitchenUpdateOne {
	kuo.mutation.RemoveStaffIDs(ids...)
	return kuo
}

// RemoveStaff removes "staff" edges to Staff entities.
func (kuo *KitchenUpdateOne) RemoveStaff(s ...*Staff) *KitchenUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return kuo.RemoveStaffIDs(ids...)
}

// ClearBrands clears all "brands" edges to the Brand entity.
func (kuo *KitchenUpdateOne) ClearBrands() *KitchenUpdateOne {
	kuo.mutation.ClearBrands()
	return kuo
}

// RemoveBrandIDs removes the "brands" edge to Brand entities by IDs.
func (kuo *KitchenUpdateOne) RemoveBrandIDs(ids ...int) *KitchenUpdateOne {
	kuo.mutation.RemoveBrandIDs(ids...)
	return kuo
}

// RemoveBrands removes "brands" edges to Brand entities.
func (kuo *KitchenUpdateOne) RemoveBrands(b ...*Brand) *KitchenUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return kuo.RemoveBrandIDs(ids...)
}

// ClearInventory clears all "inventory" edges to the InventoryItem entity.
func (kuo *KitchenUpdateOne) ClearInventory() *KitchenUpdateOne {
	kuo.mutation.ClearInventory()
	return kuo
}

// RemoveInventoryIDs removes the "inventory" edge to InventoryItem entities by IDs.
func (kuo *KitchenUpdateOne) RemoveInventoryIDs(ids ...int) *KitchenUpdateOne {
	kuo.mutation.RemoveInventoryIDs(ids...)
	return kuo
}

// RemoveInventory removes "inventory" edges to InventoryItem entities.
func (kuo *KitchenUpdateOne) RemoveInventory(i ...*InventoryItem) *KitchenUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return kuo.RemoveInventoryIDs(ids...)
}

// Where appends a list predicates to the KitchenUpdate builder.
func (kuo *KitchenUpdateOne) Where(ps ...predicate.Kitchen) *KitchenUpdateOne {
	kuo.mutation.Where(ps...)
	return kuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (kuo *KitchenUpdateOne) Select(field string, fields ...string) *KitchenUpdateOne {
	kuo.fields = append([]string{field}, fields...)
	return kuo
}

// Save executes the query and returns the updated Kitchen entity.
func (kuo *KitchenUpdateOne) Save(ctx context.Context) (*Kitchen, error) {
	return withHooks(ctx, kuo.sqlSave, kuo.mutation, kuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (kuo *KitchenUpdateOne) SaveX(ctx context.Context) *Kitchen {
	node, err := kuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (kuo *KitchenUpdateOne) Exec(ctx context.Context) error {
	_, err := kuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (kuo *KitchenUpdateOne) ExecX(ctx context.Context) {
	if err := kuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (kuo *KitchenUpdateOne) check() error {
	if v, ok := kuo.mutation.Name(); ok {
		if err := kitchen.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Kitchen.name": %w`, err)}
		}
	}
	if v, ok := kuo.mutation.Location(); ok {
		if err := kitchen.LocationValidator(v); err != nil {
			return &ValidationError{Name: "location", err: fmt.Errorf(`ent: validator failed for field "Kitchen.location": %w`, err)}
		}
	}
	if v, ok := kuo.mutation.Capacity(); ok {
		if err := kitchen.CapacityValidator(v); err != nil {
			return &ValidationError{Name: "capacity", err: fmt.Errorf(`ent: validator failed for field "Kitchen.capacity": %w`, err)}
		}
	}
	return nil
}

func (kuo *KitchenUpdateOne) sqlSave(ctx context.Context) (_node *Kitchen, err error) {
	if err := kuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(kitchen.Table, kitchen.Columns, sqlgraph.NewFieldSpec(kitchen.FieldID, field.TypeInt))
	id, ok := kuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Kitchen.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := kuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, kitchen.FieldID)
		for _, f := range fields {
			if !kitchen.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != kitchen.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := kuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := kuo.mutation.Name(); ok {
		_spec.SetField(kitchen.FieldName, field.TypeString, value)
	}
	if value, ok := kuo.mutation.Location(); ok {
		_spec.SetField(kitchen.FieldLocation, field.TypeString, value)
	}
	if value, ok := kuo.mutation.Capacity(); ok {
		_spec.SetField(kitchen.FieldCapacity, field.TypeInt, value)
	}
	if value, ok := kuo.mutation.AddedCapacity(); ok {
		_spec.AddField(kitchen.FieldCapacity, field.TypeInt, value)
	}
	if value, ok := kuo.mutation.OperatingHours(); ok {
		_spec.SetField(kitchen.FieldOperatingHours, field.TypeJSON, value)
	}
	if kuo.mutation.ResourcesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kitchen.ResourcesTable,
			Columns: []string{kitchen.ResourcesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(kitchenresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kuo.mutation.RemovedResourcesIDs(); len(nodes) > 0 && !kuo.mutation.ResourcesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kitchen.ResourcesTable,
			Columns: []string{kitchen.ResourcesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(kitchenresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kuo.mutation.ResourcesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kitchen.ResourcesTable,
			Columns: []string{kitchen.ResourcesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(kitchenresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if kuo.mutation.StaffCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kitchen.StaffTable,
			Columns: []string{kitchen.StaffColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(staff.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kuo.mutation.RemovedStaffIDs(); len(nodes) > 0 && !kuo.mutation.StaffCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kitchen.StaffTable,
			Columns: []string{kitchen.StaffColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(staff.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kuo.mutation.StaffIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kitchen.StaffTable,
			Columns: []string{kitchen.StaffColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(staff.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if kuo.mutation.BrandsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kitchen.BrandsTable,
			Columns: []string{kitchen.BrandsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(brand.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kuo.mutation.RemovedBrandsIDs(); len(nodes) > 0 && !kuo.mutation.BrandsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kitchen.BrandsTable,
			Columns: []string{kitchen.BrandsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(brand.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kuo.mutation.BrandsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kitchen.BrandsTable,
			Columns: []string{kitchen.BrandsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(brand.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if kuo.mutation.InventoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kitchen.InventoryTable,
			Columns: []string{kitchen.InventoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(inventoryitem.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kuo.mutation.RemovedInventoryIDs(); len(nodes) > 0 && !kuo.mutation.InventoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kitchen.InventoryTable,
			Columns: []string{kitchen.InventoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(inventoryitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kuo.mutation.InventoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kitchen.InventoryTable,
			Columns: []string{kitchen.InventoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(inventoryitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Kitchen{config: kuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, kuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{kitchen.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	kuo.mutation.done = true
	return _node, nil
}
