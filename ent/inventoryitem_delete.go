// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"project/ent/inventoryitem"
	"project/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// InventoryItemDelete is the builder for deleting a InventoryItem entity.
type InventoryItemDelete struct {
	config
	hooks    []Hook
	mutation *InventoryItemMutation
}

// Where appends a list predicates to the InventoryItemDelete builder.
func (iid *InventoryItemDelete) Where(ps ...predicate.InventoryItem) *InventoryItemDelete {
	iid.mutation.Where(ps...)
	return iid
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (iid *InventoryItemDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, iid.sqlExec, iid.mutation, iid.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (iid *InventoryItemDelete) ExecX(ctx context.Context) int {
	n, err := iid.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (iid *InventoryItemDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(inventoryitem.Table, sqlgraph.NewFieldSpec(inventoryitem.FieldID, field.TypeInt))
	if ps := iid.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, iid.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	iid.mutation.done = true
	return affected, err
}

// InventoryItemDeleteOne is the builder for deleting a single InventoryItem entity.
type InventoryItemDeleteOne struct {
	iid *InventoryItemDelete
}

// Where appends a list predicates to the InventoryItemDelete builder.
func (iido *InventoryItemDeleteOne) Where(ps ...predicate.InventoryItem) *InventoryItemDeleteOne {
	iido.iid.mutation.Where(ps...)
	return iido
}

// Exec executes the deletion query.
func (iido *InventoryItemDeleteOne) Exec(ctx context.Context) error {
	n, err := iido.iid.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{inventoryitem.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (iido *InventoryItemDeleteOne) ExecX(ctx context.Context) {
	if err := iido.Exec(ctx); err != nil {
		panic(err)
	}
}
